1 preliminary report international algebraic language
2 extraction roots repeated subtractions digital computers
3 techniques department matrix program schemes
4 glossary computer engineering programming terminology
5 square root approximations
6 computers inspection procedures
7 glossary computer engineering programming terminology
8 equivalence transformation program schemes
9 proposal uncol
10 glossary computer engineering programming terminology
11 problem programming communication changing machines proposed solution part
12 error estimation runge kutta procedures
13 glossary computer engineering programming terminology
14 problem programming communication changing machines proposed solution part
15 recursive curve fitting technique
16 secant modification newton method
17 programming arithmetic operations
18 simple automatic coding systems
19 glossary computer engineering programming terminology
20 accelerating convergence iterative processes technique discussed applied iterative procedure solution equation accelerates rate convergence iteration converges induces convergence iteration diverges illustrative
21 algebraic formulation flow diagrams
22 unusual applications department automatic implementation computer logic
23 binary truth function operations decimal computer extract command
24 improved decimal redundancy check
25 general purpose programming systems
26 subroutine method calculating logarithms
27 note empirical bounds generating bessel functions
28 request methods programs
29 algorithm
30 algorithm analyzing logical statements produce truth function table
31 ibm code nundrums
32 variable width tables binary search facility
33 programmed binary counter ibm type calculator
34 tables automatic computation
35 machine method square root computation
36 queue network simulator ibm burroughs
37 impact computer developments
38 proposed interpretation algol
39 secant method simultaneous nonlinear equations procedure simultaneous solution system necessarily linear equations generalization secant method single function variable
40 fingers fists choice decimal binary representation binary number system offers advantages decimal representation high performance general purpose computer greater simplicity binary arithmetic unit greater compactness binary numbers contribute directly arithmetic speed obvious important binary addressing instruction formats increase performance binary addresses essential powerful operations practical decimal instruction formats hand decimal numbers essential communicating man computer applications requiring processing large volume inherently decimal input output data time decimal binary conversion needed purely binary computer significant slower decimal adder time fast binary adder addition conversions careful review significance decimal binary addressing binary decimal data arithmetic supplemented efficient conversion instructions
41 notes computer research eastern europe
42 method computation square roots division
43 technique handling macro instructions
44 runcible algebraic translation limited computer
45 flow outlining substitute flow charting
46 multiprogramming stretch feasibility considerations tendency increased parallelism computers noted exploitation parallelism presents number problems machine design programming systems minimum requirements successful concurrent execution independent problem programs discussed requirements met stretch system carefully balanced combination built programmed logic techniques place burden programmed logic system programs supervisory program compiler problem programs
47 russian visit computers
48 shift register code indexing applications communication shift register code calling wireless telemetering stations fixed cyclical order high degree redundancy permitting single error correcting code minimum distance code bit code words employed station identification code embedding shift register code period permits code employed punctuation telemetering station receivers simply putting received zeros shift register time code combination arises identifying station barring tuitous error combinations low probability called communication describes properties application code detail finding employed ural soviet built drum computer donated indian statistical institute united nations technical aid administration untaa
49 scientific business applications oracle curve plotter
50 statistical programs ibm part ii
51 construction micro flowcharts
52 efficient method generating uniformly distributed points surface dimensional sphere corrigendum
53 recommendations share algol committee
54 sale simple algebraic language engineers
55 algebraic translator
56 proposed standard flow chart symbols
57 computer center
58 lem small size general purpose digital computer magnetic ferrite elements paper examines questions development construction general purpose digital computer contactless magnetic ferrite capacitive dezu long duration capacitive memory elements developed laboratory electrical modeling vinityi sssr supervision professor gutenmacher
59 survey progress trend development automatic data processing business management control systems federal government december iii
60 alpha vector transformation system linear constraints
61 ibm tape matrix compiler
62 multi dimensional squares polynomial curve fitting
63 octal diagrams binary conception applicability computer design logic paper dates back genesis binary conception circa years ago octal diagrams years ago derived chinese ancients analyzes applicability binary trinities octal diagrams modern electronic digital computer design logic
64 remarks algol symbol manipulation
65 algol committee report extensions
66 proposal generalized card code characters
67 central european computers
68 role university computers data processing related fields study made university programs united states fields computers data processing operations research closely related fields university policies organization administration faculties students researches curricula equipment financing investigated integrated university program recommended reflecting conviction present activities related computers develop disciplines legitimate province university scholar details recommended graduate school computer sciences
69 statistical programs ibm part collection descriptions statistical programs university computing centers ibm
70 construction set test matrices paper develops equations properties set test matrices determination accuracy routines finding inverse determinant eigenvalues matrix
71 proposal feasible programming system paper proposes designing programming facility involving digital computer program assist preparation large scale real time programs facility capable preparing programs variety machines characteristics similar facility computer basic assumptions random access storage avoid necessity segmenting constructed program fashion trivial assumption unrealistic intended provide opportunity concentrate aspects program construction programming system stress discovery source program statements errors attempting construct object program computer characteristics advocated program interrupt scheme large set characters indirect addressing
72 educational program computing
73 real time data assimilator
74 high speed sorting procedure
75 parameter estimation simple nonlinear models
76 binary conversion fixed decimal precision decimal fraction
77 gat construction translators
78 remarks practical solution characteristic problems paper concerned practical solution characteristic problem ordinary differential equation apparent sequential computers digital analog solve initial problems boundary problems mathematical process found compensate machine inadequacy compensating machine imperfection normal activity numerical analyst number papers applied devices problems purpose note establish mathematical framework model practical procedures assist extension ideas problems
79 programming machine extended address calculational mechanism
80 technique computing critical rotational speeds flexible shafts automatic computer
81 norc high speed printer
82 handling identifiers internal symbols language processors substitution computer oriented symbols programmer oriented symbols language processors examined feasible method presented
83 visit computation centers soviet union
84 survey progress trend development automatic data processing business management control systems federal government december ii part ca
85 error analysis floating point arithmetic
86 survey progress trend development automatic data processing business management control systems federal government december
87 note method generating points uniformly dimensional spheres
88 efficient method generating uniformly distributed points surface dimensional sphere
89 routine find solution simultaneous linear equations polynomial coefficients
90 binary arithmetic discretely variable word length serial computer
91 mathematical procedure machine division
92 checklist intelligence programming systems remarkable variation exists degree sophistication programming systems manifestation jungle assorted devices reproducing limited human decision procedures attempt made begin systematic classification devices educating computer decision making functions human operators demonstrated feasible date highly desirable future
93 formulas computer oriented language technique shown enabling computer translate simple algebraic formulas address computer code
94 iterative method fitting logistic curve iterative method finding logistic curve squares fit set dimensional points
95 elimination special functions differential equations set ordinary differential equations mathematical functions requiring subroutines numerical solution electronic computer tabular data numerical solution hand calculation function generators analog methods applied expanded equivalent set equations functions practical functions satisfy sufficiently simple differential equations functions eliminated procedure trigonometric inverse trigonometric exponential transcendental functions
96 computing radiation integrals relative merit cost ways evaluating typical radiation integrals spherical bessel functions investigated methods desk machine evaluation finite series integration differential equation reeves electronic analog computer litton ibm computer results generally applicable equations separated helmholtz wave equation
97 signal corps research development automatic programming digital computers
98 arithmetic translator compiler ibm fortran automatic coding system
99 modifications international algebraic language
100 recursive subscripting compilers list types memories
101 nuclear reactor codes
102 comparison programming methods
103 cope console operator proficiency examination year electronic computers sophisticated programs process complex dependence computing skill experience operators increasing time selection training qualified operators grows difficult meet quick accurate uniform operator test training aid authors developed cope console operator proficiency examination outlined examination programmed specifically ibm model ii tape record coordinators similar programs developed computers
104 digital simulation discrete flow systems discrete flow systems discussed characterized movement randomly arriving items interacting channels programing digital computer simulate systems utilizes techniques common approaches physical problems principal portion paper discussion simulation studies illustrate programming problems involved extensive package handling plant objective optimization parameters storage capacities processing rates air traffic flow control procedures simulated compare effects alternative control decisions
105 methods word inversion ibm
106 method overlapping erasure lists important property newell shaw simon scheme computer storage lists data multiple occurrences stored place computer lists overlapped overlapping poses problem subsequent erasure list longer needed desired erase parts overlap lists lisp mccarthy employs elegant inefficient solution problem present paper describes general method enables efficient erasure method employs interspersed reference counts describe extent overlapping
107 multiple precision arithmetic
108 programmed error correction project mercury
109 note approximating
110 fibonaccian searching
111 programming numerical solution polynomial equations numerical techniques presented computing roots polynomial equations applying recommended scaling inversion rules basic bairstow newton raphson iterative techniques applied great reliability high degree accuracy rapid convergence realized numerical examples shown illustrate pitfalls show circumvented application recommended procedures
112 numerical solution polynomial equation algorithm
113 survey coded character representation
114 survey punched card codes
115 optimizers structure
116 sumador chino recent motor trip mexico writer adding device referred sumador chino chinese adder survey literature history mathematics instruments calculation uncovered reference device purpose communication enlist members bringing light evolution present status sumador chino
117 estimation relative efficiency internal sorting methods
118 character scanning ibm
119 note eigenvalue computation
120 simple technique coding differential equations
121 computation control labelling
122 squares fitting great circle points sphere
123 compilation computers neliac neliac compiler based algol developed navy electronics laboratory san diego california boot strap compiler remington rand univac countess computer compiler generate version running countess program generated machine code control data corporation cdc versions neliac accepted essentially identical input language
124 algorithm assignment problem assignment problem formulated briefly discussed efficient algorithm solution presented algol code empirical relation solution time size problem based extensive experiments carried digital computer
125 polynomial transformer algorithm
126 squares fit orthogonal polynomials algorithm
127 assignment algorithm
128 rootfinder iii algorithm
129 rootfinder ii algorithm
130 real zeros arbitrary function algorithm
131 solution tri diagonal linear equations algorithm
132 math sort algorithm
133 riccati bessel functions kind algorithm
134 bessel function set integer orders algorithm
135 digital computers universities iv
136 note calculation interest
137 evaluating numbers expressed strings english words
138 thoughts reconciling character set proposals corrigenda
139 binomial coefficients algorithm
140 crout pivoting algorithm
141 thoughts parallel processing
142 comments technique counting
143 list computer systems programs ibm datatron univac ss
144 numbers digital shorthand present communications systems transmit single characters groups coded pulses simple terminal equipments english words form sparse set alphabetic combinations present methods inefficient computer systems substituted terminals numeric representations entire words common phrases character character representations requires approximately present transmission time saving reflected costs benefits accrue code language translation schemes provision made transmission purely numeric binary streams single character transmission dictionary words names people places
145 automatic graders programming classes
146 computers engineering classroom instruction april computer committee college engineering university michigan acts steering committee ford foundation project computers engineering education held special conference discuss timely topics pertinent ford project report condensed transcription key ideas offered conference attendees selected topics
147 report conference university computing center directors
148 digital computers universities iii
149 decision rule improved efficiency solving linear programming problems simplex algorithm
150 rational interpolation continued fractions algorithm
151 trdiag algorithm
152 crout pivoting algorithm
153 comments fortran user
154 rapidly convergent expressions evaluating
155 trie memory
156 introductory problem symbol manipulation student
157 digital computers universities ii
158 rootfinder ii algorithm
159 rootfinder algorithm
160 rootfinder ii algorithm
161 abbreviating words systematically corrigendum
162 variant technique counting
163 counting ibm
164 short study notation efficiency
165 neliac dialect algol
166 programming compatibility family closely related digital computers
167 combining algol statement analysis validity checking
168 multiprogram scheduling parts scheduling algorithm external constraints
169 multilingual terminology project
170 thoughts reconciling character set proposals
171 digital computers universities part
172 complex exponential integral algorithm
173 atlas concept large computer design
174 interval estimation time state total time ratio doubleexponential process
175 solution simultaneous ordinary differential equations general purpose digital computer
176 symbol manipulation threaded lists corrigendum
177 solution polynomial equation bairstow hitchcock method grau communications acm february algorithm
178 rootfinder algorithm
179 evaluation legendre polynomial pn recursion algorithm
180 evaluation laguerre polynomial ln recursion algorithm
181 evaluation hermite polynomial hn recursion algorithm
182 evaluation chebyshev polynomial tn recursion algorithm
183 conversion floating point representations
184 short method measuring error squares power series
185 multiprogram scheduling parts introduction theory order exploit fully fast computer possesses simultaneous processing abilities large extent schedule workload scheduling routine capable extremely rapid execution prove defeating construction schedule entails determining programs run concurrently sequentially respect concise scheduling algorithm minimize time executing entire pending workload subset subject external constraints precedence urgency algorithm applicable wide class machines
186 algorithm defining algol assignment statements addendum
187 compiling connectives
188 department computer mathematics moscow state university
189 future automatic digital computers
190 bendix system
191 abbreviating words systematically
192 technique counting binary computer
193 start automatic storage assignment
194 divisionless computation square roots continued squaring
195 code
196 report algorithmic language algol
197 imaginary number system
198 high speed multiplication process digital computers
199 euclidian algorithm algorithm
200 bessel function asymptotic expansion algorithm
201 bessel funtion series expansion algorithm
202 control system logical block diagnosis data loading paper describes section integrated diagnostic monitor system facilitates checking sections instructions subroutines object program method diagnostic operations format similar computer program makes system convenient simple understand paper describes number diagnostic features included system
203 decoding combinations integers time
204 proving theorems pattern recognition
205 macro instruction extensions compiler languages macroinstruction compilers constructed small set functions made extremely powerful conditional assembly nested definitions parenthetical notation serve make compiler capable accepting general extensions ground language
206 symbol manipulation xtran
207 syntactic semantic augments algol
208 introduction information processing language
209 symbol manipulation threaded lists
210 recursive functions symbolic expressions computation machine part
211 share standard flow chart symbols
212 bisection routine algorithm
213 numerical inversion laplace transforms
214 algorithm defining algol assignment statements
215 execute operations fourth mode instruction sequencing
216 note abacus number conversion
217 soviet computer technology
218 computer preparation poetry concordance
219 marriage problems
220 method computation square roots division
221 basic side tape labeling
222 coding isomorphisms coding external symbols symbols internal compute carried relevant informational properties preserved form easily dealt case point presented
223 selfcipher programming
224 sequential formula translation syntax algorithmic language algol conveniently sequence states element called cellar transitions controlled admissible state symbol pairs represented transition matrix description syntax furnishes time extremely simple rule translating machine programs statements algorithmic language sequential treatment feasible case optimizing processes recursive address calculation
225 techniquefor handling macro instructions corrigendum
226 solution polynomial equation bairstow hitchcock method algorithm
227 rootfinder algorithm
228 quadi algorithm
229 terminology proposal
230 proposal character code compatibility
231 proposal set publication standards acm
232 high speed sorting procedure
233 abstracts additional nuclear reactor codes
234 sap assembly program ibm
235 pieces
236 soviet cybernetics computer article records observations soviet research technology cybernetics computer science made author visit soviet union delegate ifac congress automatic control held moscow summer
237 computer production peek boo sheets
238 simulation analysis biochemical systems
239 inefficiency boolean functions information retrieval systems
240 processing magnetic tape files variable blocks
241 machine calculation moments probability distribution method presented calculation machine moments probability distribution necessitating additions references memory moment minimum multiplication additions references memory required straightforward method number entries probability distribution method directly applicable tabulated distribution exists computed repeated convolution case conserves time accuracy
242 notes geometric weighted check digit verification note describes method utilizing geometric weight modulus checking digits computer multiplication division addition attempt made show limitations system
243 dimensional codes detecting correcting multiple errors paper introduces family codes detecting correcting multiple errors binary coded message message arranged conceptually multidimensional rectangular array processes encoding error detection based parity evaluations prescribed dimensions array effectiveness codes increased introducing system check bit essentially parity check parity bits dimensional codes discussed paper parity evaluations horizontal vertical main diagonal family codes restricted dimensions evidenced discussion minnick ashenhurst similar multidimensional single bit selection plan purpose dimensional code correcting detecting errors developed extension higher dimensional codes greater correction power straightforward
244 incomplete elliptic integrals algorithm
245 set associate legendre polynomials kind algorithm
246 squares fit orthogonal polynomials algorithm
247 incomplete elliptic integrals algorithm
248 proprietary mathematical programming impressions panel discussion panel discussion proprietary mathematical programming sponsored special interest committee mathematical programming acm hall discussion september national acm meeting los angeles note consists solely impressions garnered moderator panel necessarily represent position panelists participants discussion
249 specification languages mechanical languages processors baker dozen
250 engineering application logic structure tables
251 ballistic cam design paper presents digital computer program rapid calculation manufacturing data essential design preproduction cams utilized ballistic computers tank fire control systems cam profile generated introduces superelevation angle required tank main armament type ammunition
252 programming duplex computer system paper describes method duplex computer programming computers military defense system method combines special programs basic data processing program package duplex operation system greater reliability achieving required level integration computers similar processing inputs continually cross check intermediate final results
253 program ray chaudhuri algorithm minimum cover abstract complex
254 smalgol prior western joint computer conference people joint users groups expressed interest defining smalgol language algol language compilers small size computers preliminary report resulted acm national conference months counter proposals final version agreed subcommittee recommendations subcommittee standard subset algol small computers presented
255 augmentation algorithm
256 set test matrices algorithm
257 invert algorithm
258 composition generator algorithm
259 permutation algorithm
260 interpolation aitken algorithm
261 tape splitting
262 map
263 library loading alternate routine selection
264 generalized polyphase merge algorithm
265 low level language subroutines fortran paper describes subroutines coded symbolic languages fortran coded programs deal special arithmetic multi precision arithmetic symbol manipulation bit manipulation expanded character set input output visual display
266 fitting spheres method squares
267 proposals improving efficiency algol
268 stochastic evaluation static storage allocation
269 core allocation based probability
270 techniques storage allocation algorithms
271 semi automatic storage allocation system loading time
272 storage allocation scheme algol storage allocation scheme machine instruction core store magnetic drum drum storing program blocks data directed programmer auxiliary information algol program administrative routines controlling storage run time full detailed
273 experience automatic storage allocation
274 dynamic storage allocation atlas computer including automatic backing store
275 dynamic storage allocation information retrieval system
276 program organization record keeping dynamic storage allocation material presented paper part design plan core allocation portion ascii matic programming system project ascii matic concerned application computer techniques activities headquarters military intelligence operations army
277 problems storage allocation multiprocessor multiprogrammed system
278 general formulation storage allocation formalization general computer storage allocation process attempted computer fictitious computer essentially identical respect possession unbounded primary storage mappings total storage set internal external direct address set introduced program sequence termed admissible relative specific execution time period mapping underwhich effective data referents located direct address set storage allocation considered process establishing arbitrary program sequence mappings decoupling program admissible subprograms linking set interludes existence proof terms completely interpretive program special cases discussed restrictions generality programs considered practical realization allocation processes tractable
279 case dynamic storage allocation
280 preplanned approach storage allocating compiler
281 putting hex recent notes approximate natural antilogy considered indirect formulations describing note produce family fast high precision eminently practical exponential evaluation formulas derived formulation
282 optimum tape writing procedures magnetic tape system read check writing error occurs writing record programmed error routine bypass area tape rewrite record area paper evaluates procedures basis expected loss computer time develops decision rule selecting optimum procedure rule depends critically number times tape written future case optimum procedure bypass area decision size area bypassed formula developed determine optimum area bypassed procedure
283 inversion complex matrix
284 manipulation algebraic expressions algorithm algebraically manipulating expressions form sum cipi developed conjunction development programs systems analysis problems algorithm enablesus derive system transfer functions algebraically block diagrams linear continuous multi loop feedback system machine representation derived expression virtue algorithm form simplifies task compiling algorithm developed purpose connection system analysis studies application mathematical device extends confines original problem
285 solution tridiagonal matrices
286 iterative method inversion power series
287 generalized important event technique
288 syntactical chart algol
289 critical path scheduling algorithm
290 chain tracing algorithm
291 mobol preparingretrieval programs
292 information retrieval language legal studies
293 applied mathematics laboratory david taylor model basin
294 imaginary number system
295 rational approximations error function similar functions
296 note multiple precision arithmetic
297 note fitting great circles squares
298 bit pseudo random number generator bit pseudo random number generator suitable computers tested statistically randomness determine adequacy monte carlo programs frequency tests distributions low order moments runs runs applied half million generated numbers lying interval sets integers obtained bits generated numbers tests substantiated randomness numbers set integers coming significant bits
299 generalized polyphase merge algorithm
300 cobol sample problem simplified merchandise control problem chosen presenting cobol users potential users computing systems mythical department store language bros programming cobol language runs computer
301 set test matrices algorithm
302 augmentation algorithm
303 basic terminology connected mechanical languages processors suggestions paper part terminology work university pennsylvania office computer research education work jointly supported national science foundation air force office scientific research
304 nth roots complex number algorithm
305 cram algorithm
306 invrs algorithm
307 find algorithm
308 quicksort algorithm
309 partition algorithm
310 set associate legendre polynomials kind algorithm
311 procedures range arithmetic algorithm
312 note approximating
313 iterative method inversion power series
314 divisionless method integer conversion
315 solution tridiagonal matrices
316 algorithm equivalence declarations
317 approximation curves line segments dynamic programming
318 combat vehicle firing stability active suspension
319 class iteration formulas historical notes class iteration formulas obtainable rational approximations euler formula derived error estimates historical notes iterative procedures derivation euler formula error estimate notation simplifies error estimate suggests generalizations final section considers pade approximants euler polynomial shows number formulas derived unified approach short discussion formula
320 logic structure tables logic tables excellent developing expressing logic required procedures operations systems circuits set rules writing logic tables explained means simple examples logic structure vending machine logic tables logic tables dimensional nature enabling fully express sequential parallel aspects logic compiled directly computer program eliminate flow charting hand coding
321 algol confidential algol report encountered describe complex language difficult learn metalinguistic formulae admirably serve purpose precisely language readable beginner experience shown report explained fact easy learn algol write algorithms language general powerful handle enormous class problems hard learn parts algol present compiler languages write assignment statements lot unnecessary restrictions imposed compiling languages finally lifted algol unobvious things written lies problem algol general restrictions lifted lot technical details crop hard learn correctly paper obscure features language considered usefulness discussed remarks based authors interpretations algol report
322 operational compatibility systems conventions general standards committee share organization devoted considerable effort problem operating computer efficiently view growing number programming systems programming systems coded utilize fixed set hardware components recognizing fact occupying storage medium required incompatibilities resolved manually setting computer system required set conventions considered minimize computer set time sufficiently broad interest feel computer users aware george ryckman chairman
323 state digital computer technology europe
324 romberg integration algorithm
325 numerical solution polynomial equation algorithm
326 mathsort algorithm
327 zeros real polynomial resultant procedure algorithm
328 matrix inversion algorithm
329 automatic abstracting indexing survey recommendations preparation widespread automatic scanners read documents transmit contents machines analysis report presents concept automatic analysis relative frequency approach measuring significance words word groups sentences relative frequency approach discussed detail application problems automatic indexing automatic abstracting included report summary automatic analysis studies published date writing conclusions point sophisticated mathematical linguistic techniques solution problems automatic analysis
330 method evaluating area normal function
331 successive approximations computer storage problems ordinary differential equations
332 indirect chaining method addressing secondary keys methods entering random access files basis key briefly surveyed widely chaining method based pseudo random key transformation reviewed detail efficient generalization chaining method permits recovery additional keys presented
333 design improved transmission data processing code
334 division square root quater imaginary number system
335 numerical experiments newton method nonlinear parabolic ellipticboundary problems generalization newton method nonlinear parabolic equation form xx nonlinear elliptic equation xx yy exp solved numerically comparison results results obtained picard iteration procedure show cases quisi linearization method offers substantial advantages time accuracy
336 practical technique determination optimum relaxation factor successive relaxation method
337 survey punched card codes
338 grout ii algorithm
339 real exponential integral algorithm
340 legendre polynomial algorithm
341 chebyschev polynomial algorithm
342 solution polynomial equation barstow hitchcock algorithm
343 frequently occurring errors algol programs algorithm
344 ber bei function algorithm
345 complete elliptic integral kind algorithm
346 complete elliptic integral kind algorithm
347 gamma function range algorithm
348 nth roots complex number algorithm
349 set test matrices
350 adjust inverse matrix element perturbed algorithm
351 inverse finite segment hilbert matrix algorithm
352 spherical neumant function algorithm
353 logarithm complex number algorithm
354 legendre functions kind real imaginary arguments algorithm
355 exponential complex number algorithm
356 interest algorithm
357 bessel functions computed recursively algorithm
358 crout pivoting ii algorithm
359 invert algorithm
360 evaluation determinant algorithm
361 programmed error correction decimal computer
362 table techniques
363 approximating transcendental numbers continued fractions
364 compilation subscripted variables
365 bessel functions integral order complex argument
366 eigenvalues symmetric matrix
367 topological ordering list randomly numbered elements network network directed line segments free circular elements assumed lines identified terminal nodes nodes assumed numbered topological system list lines numeric order simple technique create high speed list topological order
368 real zeros arbitrary function algorithm
369 crout pivoting algorithm
370 bisection routine algorithm
371 remarks algorithms algorithm algorithms
372 critical path scheduling algorithm
373 correlation coefficients matrix multiplication algorithm
374 telescope algorithm
375 telescope algorithm
376 tchebycheff algorithm
377 sieve algorithm
378 generalized technique symbol manipulation numerical calculation
379 bitwise operations
380 comparison iterative methods calculation nth roots iterative methods calculation nth roots including proposed author compared ways theoretical convergence estimates macrocompiler estimates machine running time compare running time methods variety input data
381 alternate form uncol diagram
382 statistical programs university north carolina
383 finding minimum routes network turn penalties
384 gamma function algorithm
385 factorial algorithm
386 multint algorithm
387 gamma function algorithm
388 solution polynomial equations bairstow hitchcock method algorithm
389 real exponential integral algorithm
390 complex exponential integral algorithm
391 bks system philco
392 comment paper parallel processing
393 subroutines symbol manipulation algebraic compiler
394 multiple programming data processing
395 multiple precision division
396 automation program debugging automatic debugging substantially reduce lead time coding effective complex program enforces analysis debugging criteria resulting verifiably accurate programs programmer specifies program debugged memory areas set input data maximum repetition loops checkpoint information set data executive debugging program runs program debugged performing checking functions creating trace record analysis location errors applications flexible system conjunction debugging techniques
397 card format reference files information processing paper proposes card format suitable variety reference files information processing column ibm card divided fields reference material field columns identification field columns format reference material flexible format identification rigid reference material includes basically index title source class summary cross reference entry identification includes basically codes matrix descriptors entry number kind major interest source reference identification choice identify material personal general files card format sufficient identify material reference files books articles programming terms hardware terms equipment machine systems abbreviations suitable standard card reference files information processing
398 slang system
399 compiling techniques boolean expressions conditional statements algol
400 comments implementation recursive procedures blocks algol
401 allocation storage arrays algol
402 dynamic declarations
403 thunks compiling procedure statements comments procedure declarations
404 syntax directed compiler algol
405 algorithm coding efficient arithmetic operations existing formula translation schemes yield inefficient coding method reduces number store fetch operations evaluates constant subexpressions compilation recognizes equivalent subexpressions
406 threaded lists constructing combined algol machine assembly processor
407 madcap scientific compiler displayed formula textbook language
408 internal organization mad translator
409 cl environment compiler flexible large scale programming system facilitate solution information processing problems provide intercommunication programs programmers developed realized ibm computer system based master file concept provisions accepting storing retrieving descriptions instances large complex data sets algorithms defined data sets data algorithms expressed family command descriptive languages concept distinct data descriptions content descriptions discussed detail
410 clip translator
411 magnetic tape data storage oracle algol translator
412 recursive processes algol translation
413 basic compiler arithmetic expressions
414 ibm data processing system features units ibm data processing system announced recently international business machines corporation features disk storage drive interchangeable disk packs newly developed units
415 digital computers western germany
416 multiple shooting method point boundary problems
417 legal implications computer paper points variety ways computer systems business industry involved legal entanglements suggests computer specialists responsibility call assistance forestalling minimizing entanglements planning stage techniques suggested making legal clearance effective burden technology achieving favorable legal climate generally computer specialists alerted potential opportunities interpret lawyers technical aspects computer systems involved legal situations
418 random algorithm
419 magic square algorithm
420 perm algorithm
421 position point relative polygon algorithm
422 combination algorithm
423 matrix inversion algorithm
424 gamma function algorithm
425 complete elliptic integral algorithm
426 term magic square algorithm
427 psif algorithm
428 multiple integration algorithm
429 adaptive nimerical integration simpson rule algorithm
430 treesort algorithm
431 treesort algorithm
432 triangular regression algorithm
433 fixed world length arrays variable word length computers
434 character manipulation fortran ii
435 decision matrix basis simple data input routine great deal time effort spent development bigger compiler languages multiprogram executive systems implementation methods procedures instantaneous occurs evolutionary process concerned problem maintaining improving incorporating ideas existing systems neglected area author interested method employing decision matrix presented handling standard systems programming problem providing data input routine
436 evaluation polynomials computer
437 compiling matrix operations
438 mechanical pragmatics time motion study miniature mechanical linguistic system
439 line digital computer measurement neurological control system
440 record linkage special difficulties encountered devising reliable systems searching updating large files documents identified primarily basis names personal particulars underlying problem making maximum items identifying information individually unreliable collectively considerable discriminating power rules applied generally retrieval systems developed methodological study linkage vital health records family groupings demographic research purposes rules ways information utilization matching optimized discussed
441 topological sorting large networks topological sorting procedure required problems involving analysis networks problem pert present paper presents general method obtaining topological order permits treatment larger networks handled present procedures achieves greater efficiency procedure adapted machine discussed terms pert network activities ordered hour machine time method developed byproduct procedures needed westinghouse baltimore programmed present plans implement regard techniques westinghouse present anticipated completely served lockheed program current
442 crout equilibration iteration algorithm
443 complex number real power algorithm
444 evaluation jacobi symbol algorithm
445 combination algorithm
446 simpson integration algorithm
447 certification calculation easter
448 path matrix algorithm
449 matrix inversion algorithm
450 solution diophantine equation algorithm
451 nesting statement ii algorithm
452 nesting statement algorithm
453 enlargement group algorithm
454 crout equilibration iteration algorithm
455 exponentiation series algorithm
456 random algorithm
457 quantum mechanical integrals slater type integrals
458 coefficient determination algorithm
459 permute algorithm
460 minifun algorithm
461 coding medical case history data computer analysis
462 computer pattern recognition techniques electrocardiographic diagnosis programmed digital computers general pattern classification recognition devices phase current lively interest artificial intelligence important choose class signals present undergoing good deal visual inspection trained people purpose pattern recognition comparisons machine human performance obtained practical result serves additional motivation clinical electrocardiograms make class signals approach problem presented centers multiple adaptive matched filters classify normalized signals present report fives background application method
463 ambiguity phrase structure languages
464 syntactic analysis digital computer paper account shadow language describe syntax subroutine enables computer perform syntactic analysis input subroutine consists string analyzed description syntax syntax expressed shadow language output consists trace table expresses results syntactic analysis tabular form versions subroutine programs years present account language subroutine summary material previously unpublished reports additional discussion work relation general questions problem oriented languages string transformations
465 perm algorithm
466 general order arithmetic algorithm
467 permutation generator algorithm
468 incomplete elliptic integrals algorithm
469 critical path scheduling algorithm
470 summation fourier series algorithm
471 ortho algorithm
472 gauss method algorithm
473 weightcoeff algorithm
474 input data organization fortran
475 test matrix inversion procedures
476 remarks sampling tape file ii
477 remarks sampling tape file
478 implementing stack
479 dispersion pass algorithm polyphase merge paper presents manner dispersing strings polyphase merge number strings dispersed levels acceptable polyphase merge economical technique reaching level polyphase merge shown proved
480 quick calculation jacobian elliptic functions corrigendum
481 day computing
482 tall list processor philco computer
483 nonexistence phrase structure grammar algol algol defined partly formal mechanisms phrase structure grammar partly informally stated restrictions shown formal mechanisms type sufficient define algol
484 hankel function algorithm
485 real error function erf algorithm
486 tridiagonal matrix algorithm
487 normdev algorithm
488 heuristic page turning multiprogrammed computer
489 current status ipl philco computer june
490 programmed methods printer graphical output
491 multiprogramming design low cost digital computer
492 analysis file addressing method paper presents file addressing method based calculation address identification record large recirculating type files advantageous customary probability distribution displacement records calculated address number probes required address record computed basis markov chain model reader interested mathematics introduction summary sufficient
493 property classification method file design processing
494 finite sequentially compact process adjoints matrices arbitrary integral domains
495 procedure inverting large symmetric matrices squares method simultaneous adjustment parameters coefficients normal equations elements symmetric positive definite matrix order solve normal equations evaluate precision measures resulting parameters inversion matrix coefficients required procedures matrix inversion advantage symmetry programmed high speed computer elements stored manipulated independent order computer memory capacity handle larger matrix procedure inverting symmetric matrix devised
496 set matrices testing computer programs
497 remarks line segment curve fitting dynamic programming recent paper bellman showed dynamic programming determine solution problem previously considered stone problem comprises determination points subdivision interval line segments give squares fit function interval bellman confined primarily analytical derivation suggesting briefly solution equation derived point subdivision reduced discrete search paper computational procedure considered fully similarities stone equations shown equation involving minimization found addition shown bellman method applied curve fitting problem additional constraints added ends line segments curve
498 magic square algorithm
499 permutation generator algorithm
500 permute algorithm
501 jacobi algorithm
502 simpson integration algorithm
503 rational roots polynomials integer coefficients algorithm
504 factors algorithm
505 composition generator algorithm
506 permutation algorithm
507 partition quicksort find algorithm
508 matrix inversion algorithm
509 matrix inversion algorithm
510 ber bei function algorithm
511 set test matrices algorithm
512 telescope algorithm
513 sieve algorithm
514 binomial coefficients algorithm
515 rational interpolation continued fractions algorithm
516 matrix inversion ii algorithm
517 evaluation pert network algorithm
518 magic square odd order algorithm
519 magic square order algorithm
520 complex division algorithm
521 perm algorithm
522 generation partitions constraints algorithm
523 treesort algorithm
524 position point relative polygon algorithm
525 computer technique handling analysis variance
526 character manipulation fortran
527 description list concepts concept defined class objects members distinguished processing properties property defined partition set objects disjoint classes formal definition concept recursive nature concept list structure correspondence established recursive definition concept description list structure definition description list structure concept built elementary list structures recursive process list structures obtained compared description list structure discussed author previous publication
528 fortran business data processing
529 regression coded patterns data editing
530 computer method radiation treatment planning
531 person matching electronic methods record linkage updating files accomplished establishments preassigned number payroll number customer number social security number vital health records unique number generally preassigned individual purposes reporting services received health department order determine physician reports refer individual identification compared laborious operation subject errors misspellings marriage problems interested maintenance psychiatric case register maryland reports hundred psychiatric agencies refer patient records linked order provide unduplicated counts individuals care longitudinal records psychiatric history earlier paper describes general procedures register maintenance digital computer honeywell present detail initial procedures person matching process order elicit comments suggestions persons experience matching
532 computation rational approximations continuous functions
533 digital synthesis correlated stationary noise note propose method generating stationary noise prescribed auto covariance function digital methods technique arises testing performance data processing engineering systems inputs corrupted correlated noise form required technique simple produces strict sense stationary noise agrees approximately prescribed auto covariance function acf interval method consists approximating spectral density periodic process spectral lines synthesizing periodic noise random phases amplitudes order simplify discussion statistical properties noise generated technique presented terms exact harmonic analysis practice discrete harmonic analysis presented section
534 quick calculation jacobian elliptic functions
535 triangular walk pattern hill method solving transcendental equation
536 nonlinear regression solution simultaneous equations set observables zm bound relation parameters equation frequently problem determining set values ai minimizes sum squares differences observed calculated values distinguished observable zm solution equation zm zm rise function nonlinear ai rely version gaussian regression iteration scheme converges minimizing set values shown minimization technique solution simultaneous necessarily linear equations
537 machine program theorem proving program proof procedure discussed connection trial runs improvements
538 quantum mechanical integrals slater type orbitals algorithm
539 definite exponential integrals algorithm
540 definite exponential integrals algorithm
541 simpson integration algorithm
542 factors algorithm
543 interpolation aitken algorithm
544 ber bei function algorithm
545 adjust inverse matrix element perturbed algorithm
546 logarithm complex number algorithm
547 gamma function algorithm
548 molecular orbital calculation molecular interactions
549 quantum mechanical integrals slater type orbitals
550 definite exponential integrals algorithm
551 definite exponential integrals algorithm
552 gauss method algorithm
553 complex number real power algorithm
554 newton maehly algorithm
555 reduction jacobi algorithm
556 translation boolean expressions
557 simulation computer timing device
558 modified inversion procedure product form inverse linear programming codes paper describes algorithm selection pivot row matrix inversion product form inverse algorithm developed linear programming codes valuable inversion dense matrix procedures paper tested operation esso research engineering ibm computer months substantial computer cost savings realized procedure
559 solution eigenvalue problems approximately eigenvectors
560 communication independently translated blocks
561 analytic differentiation computer
562 avint algorithm
563 sorting procedures algorithm
564 cram algorithm
565 invrs algorithm
566 matrix inversion algorithm
567 logarithm complex number algorithm
568 exponential complex number algorithm
569 binomial coefficients algorithm
570 simpson rule integrator algorithm
571 permutation lexicographical order algorithm
572 add item chain linked list algorithm
573 remove item chain linked list algorithm
574 evaluation jacobi symbol algorithm
575 evaluation definite complex line integrals algorithm
576 shortest path algorithm
577 ancestor algorithm
578 generation partitions part count form algorithm
579 combination algorithm
580 general order arithmetic algorithm
581 note sampling tape file
582 lost bit
583 redundancy check algol programs
584 report algorithmic language fortran ii
585 initial experience operating multiprogramming system lewis research center forms degrees program simultaneity operation modified sperry rand univac scientific model computer years simultaneity evolved initial achievement searching input output automatic time sharing independently coded problems important machine program system modifications accomplish evolution additional modifications required added facilitate ease coding operation modifications proceed temperate pace insure basic data reduction work load computing center completed schedule educationally valuable mistakes made suggested cures pointed future improvements emphasized basic principles multiprogramming system material description evolution programming hardware system developed present multiprogramming system lewis research center
586 simultaneous system equations matrix inversion routine algorithm
587 romberg integration algorithm
588 chebyshev curve fit algorithm
589 evaluation fresnel cosine integral algorithm
590 evaluation fresnel sine integral algorithm
591 evaluation asymptotic expression fresnel sine cosine integrals algorithm
592 cobol batching problems
593 introduction machine independent data division
594 advanced input output system cobol compiler
595 guides teaching cobol teaching cobol divided main subject areas syntax cobol syntax solving problem programming concepts generally accepted knowledge hardware computer logic possessed programmer teaching problem arises determining student hardware logic computer write cobol programs historical data students programming proficiency existent difficult measure approach solving problem
596 floating point arithmetic cobol paper basic operations floating point arithmetic examined cobol procedures carrying specification working storage paper concludes procedures
597 modular data processing systems written cobol
598 cobol librarian key object program efficiency answers question cobol compiler forced generation efficient object program purpose article present answer creation full utilization constructed cobol library
599 report writer cobol
600 syntactical charts cobol
601 interim report bureau ships cobol evaluation program
602 cobol compatibility
603 basic elements cobol
604 cobol
605 computer simulation city traffic simulating traffic flow city streets national bureau standards data processing techniques tabulate make motion pictures vehicle movements model vehicle assigned digital identification giving points entry exit type vehicle desired speed actual speed proportions simulating field data model made observe consequences determine ability real street carry loads expected future
606 method eliminating ambiguity due signal coincidence digital design
607 calculation easter
608 permutation algorithm
609 permutation algorithm
610 sieve algorithm
611 permutation generator algorithm
612 permute algorithm
613 jacobi algorithm
614 simpson integration algorithm
615 addressing multidimensional arrays method representing function variables function assume values selected points dimensional space picture analyst elements dimensional array exist conventional storage linear array vector means performing transformation set indices locating array element space location address element storage vector subject paper noted index address transformation computationally identical conversion number fixed mixed radix number system ways implementing transformation
616 information algebra phase report language structure group codasyl development committee report represents results phase work language structure group goal work arrive proper structure machine independent problem defining language systems level data processing report based part mathematical model called information algebra developed primarily bosak hoped report read avid interest programming language designers implementors interested developing theoretical approach data processing interest understanding professional programmers systems analysts appreciation businessman analyst manager authors attempted exhaustive discourse report present philosophy professional people vitally concerned providing working language systems analyst trust ideas report stimulate similar lines questions comments welcomed addressed members language structure group robert bosak system development corporation richard clippinger honeywell edp division carey dobbs remington rand univac division roy goldfinger chairman ibm corporation renee jasper navy management office william keating national cash register george kendrick general electric company jean sammet ibm corporation
617 poseidon computer forms part control system completely automatic partly human work speed control system perform calculations data processing fast results required instants action control system working real time
618 computers key total systems control industrial viewpoint man man machine processes characterized main types markets type shown estimated
619 retrieval misspelled names airlines passenger record system paper discusses limited problem recognition retrieval misspelled roster hundred names reservation inventory flight large jet airliner program developed operated telefile stored program core drum memory solid state computer retrieve passengers records successfully significant misspellings original entry time retrieval time procedure involves automatic scoring technique matches names condensed form names closely resembling requested phone numbers annexed presented agents final manual selecton program successfully isolated retrieved names subjected number unusual usual misspellings
620 ratfact algorithm
621 romberg integration algorithm
622 optimal classification objects algorithm
623 economising sequence algorithm
624 economising sequence algorithm
625 reciprocal gamma function real argument algorithm
626 method representation storage retrieval random codes digit number random codes digit number
627 knotted list structures
628 floating point number representation algorithmic languages
629 wired binary decimal conversion scheme
630 evaluation autocode readability requirements autocode pair requirements easy read easy write compatible paper argues readability added automatically translation process programmer enjoy utmost economy expression management full valid cobol version printed give advantages readability compatibility
631 automatic programming language translation syntactical analysis
632 vectorcardiographic diagnosis aid algol
633 simulation analysis biochemical systems iii analysis pattern recognition
634 manipulation trees information retrieval
635 note multiplying boolean matrices
636 tape splitting iterative program
637 neliac generated compiler neliac systems machines generated original neliac system developed naval electronics laboratory san diego basic bootstrap process generate systems neliac language generated existing neliac compiler experience shown inherent difficulty building compilers compilers pointed advantages pol constructing programming systems report presents results project completed neliac system generate compiler ibm compiler runs produces programs neliac language generated neliac system reduction programming time improvement documentation system significant
638 surge recoding cobol merchandise control algorithm
639 difference expression coefficients algorithm
640 rational roots polynomials integer coefficients algorithm
641 interpolation differentiation integration algorithm
642 introduction algol
643 simulation analysis biochemcial systems ii solution differential equations
644 string language symbol manipulation based algol artificial computer programming language proposed describing manipulation strings characters symbols concept strings introduced algol report extended adding declaration strings substrings string arrays explicit lengths ability concatenate shift strings ranking symbols comparing stings boolean relations primer informal description language examples description experiments language ibm computer formal description algol report defines proposed string language
645 invrs algorithm
646 inverse finite segment hilbert matrix algorithm
647 numerical solution polynomial equation algorithm
648 sorting procedures algorithm
649 factors algorithm
650 curve fitting constraints algorithm
651 survey languages systems information retrieval
652 semantic structure information systems
653 translation retrieval requests couched semiformal english language
654 language problems posed heavily structured data
655 comit ir language features make comit good symbol manipulation language render suited types information retrieval programs presented general discussion unique programming language examination applications
656 information system ability extract intelligence data
657 information structures processing retrieving
658 discussion pros cons special ir language
659 reversion series algorithm
660 test matrices determinants inverses pracnique
661 indexing lambda notation methods indexing sequentially stored elements sparse multi dimensional arrays scheme notation
662 shuttle sort algorithm
663 determinant algorithm
664 assignment algorithm
665 gauss seidel algorithm
666 topological ordering pert networks algorithm
667 kutta merson algorithm
668 minimum excess cost curve algorithm
669 specification jovial
670 legal implications computers banking business introduction computers banking business wide variety legal implications merit careful attention early stage industry highly regulated government subject statutes regulations affected important common law rules established courts legal ramifications involve mechanization significant economically attractive phenomenon premises processing essential identify provide legal aspects systems practices crystallize order avoid impact unanticipated physical complications expense legal aspects computerization banking business diverse states basic question banks authorized law invest facilities directly cooperatives challenging questions relating premises processors respect obligation disclose information bank customers adequacy fidelity bond coverage extent liability improper refusal pay check susceptibility regulation government agencies pertinent propriety data processing banks nonbank entities rendering service charge bank depositors
671 telefile case study line savings bank application development line computer system savings bank institution traced early conceptual bank consummation design teleregister corporation bank equipment criteria led development telefile system teleregister corporation operation line line programs statistics cited reliability performance system benefits bank discussed banker point view indication future trends line savings bank field discussed
672 recent developments affecting adp tax administration
673 account classification automating banks
674 application ibm edp methods calculation formation constants complex irons
675 coding clinical laboratory data automatic storage retrieval series clinical laboratory codes developed accept store urin analysis blood chemistry hematology test results automatic data processing codes constructed part computerized hospital simulation handle results laboratory test encountered unique feature codes accept conventionally recorded qualitative quantitative test results clinical test results arbitrarily stratified standardized altered coded paper describes codes developed presents listing urin analysis codes criteria developing codes outlined problem multiple synonymous terminology discussed solution problem flexible computer produced composite laboratory reports discussed reproduction report paper concludes problems remain unsolved ten years witness emergence practical automated information system laboratory
676 computation type incompletebeta functions
677 length strings merge sort detailed statistics length maximal sorted strings result form internal sort phase merge sort tapes shown strings produced alternating method produces ascending descending strings alternately tend fourths long method produces ascending strings contrary statements appeared previously literature slight modification read backward polyphase merge algorithm suggested
678 optimizing bit time computer simulation major component bit time computer simulation program boolean compiler compiler accepts boolean functions representing simulated computer digital circuits generates sets machine instructions subsequently executed host computer techniques discussed increasing sophistication boolean compiler optimize bit time computer simulation techniques applicable general purpose computer
679 recent improvements madcap madcap programming language admitting subscripts superscripts forms displayed formulas basic implementation language previous paper madcap scientific compiler displayed formula textbook language comm acm jan paper discusses recent improvements language areas complex display logical control subprogramming area complex display prominent improvements notation integration binomial coefficients area logical control chief feature notation variably nested looping discussion subprogramming focused madcap notation procedures
680 error correcting parse algorithm
681 flexible abbreviation words computer language
682 recursive programming fortran ii
683 serial technique determine minimum paths
684 interpolation differentiation integration algorithm
685 euler summation algorithm
686 smooth algorithm
687 shanks algorithm
688 bessel functions algorithm
689 report visit discuss common programming languages czechoslovakia poland
690 usa participation international standard glossary information processing
691 description apt language apt automatically programmed tools language numerical control programming metalinguistic notation introduced algol report examples apt usage included presented historical summary development apt statement present status
692 inverse test matrix
693 extension fibonaccian search variables technique fibonaccian search concepts developed solve optimization problems involving unimodal functions variables technique proven optimal sense dimensional fibonaccian search valuable kinds calculations
694 comparison disks tapes principal characteristics current magnetic disks tape units summarized compared characteristics disk files illustrated sorting compared tapesort conclusion presented disk files competitive tapes important applications
695 disk file stretch paper begins briefly describing stretch ibm computer special emphasis organization operation input output equipment physical characteristics disk system bit words usec word transmission rate noted timing limitations due arm motion disk rotation discussed applications disk usage discussed separately problem programs systems programs compilers supervisory program approximately words disk storage reserved storage systems programs subroutine library problem programs filed disk programming techniques discussed transmitting words disk core storage minimum delaying interruption arithmetic unit dumps disk considered recovery computer malfunction mathematical physical developments calculation comments made reliability economics utility weaknesses limitations disk system future applications noted disk connotations
696 automatic data acquisition inquiry system disk files lockheed missiles space company installed large scale automatic data acquisition ada system ties company manufacturing facilities located van nuys sunnyvale california system includes remote input stations collect transmit company operating data central data processing center rca edp systems record control flow data transmitted data processing center large capacity rca data disc file store information required provide date information response inquiries received remotely located inquiry stations addition storage data disk files system automatically records incoming outgoing data magnetic tape input company conventional line business data processing applications
697 numerical method determination moving field isodose curves treatment planning radiotherapy
698 data dial communication computers ordinary dial telephones operating system users call remotely located computer ordinary dial telephones special hardware connections required users telephones input computer telephone dial output computer spoken form results test telephones boston area reported
699 contour map program ray crystallography fortran program ibm system plotter produce contour map matrix points evenly spaced dimension contoured scale factors axes axes perpendicular
700 hermite interpolation algorithm
701 shuttle sort algorithm
702 assign algorithm
703 assign algorithm
704 combinatorial things time time time algorithm
705 combinatorial things time algorithm
706 fourier series approximation algorithm
707 erf algorithm
708 evaluation fresnel integrals algorithm
709 assignment algorithm
710 fresnel integrals algorithm
711 frequency distribution algorithm
712 hermite interpolation algorithm
713 lagrangian interpolation algorithm
714 gauss algorithm
715 discrete convolution algorithm
716 stringsort algorithm
717 partitioning algorithms finite sets partitions set elements represented tuples positive integers algorithm generate repetitions tuples partitions set partitions set fewer sets partitions set sets
718 experiment automatic verification programs effective compiler replacing explicit verification cost technique
719 variable width stacks character addressable variable field computers permit ready establishment manipulation variable width stacks single machine commands push variable field items stacks pop availability variety field delimiters machine push pop variable width item command stacking operations made basis compiler decoding algorithms proper machines class compilation advantages machines fixed length words
720 format free input fortran
721 report proposed american standard flowchart symbols information processing paper presents essential contents proposed american standard flowchart symbols information processing proposed standard prepared subcommittee problem description analysis american standards association asa
722 alcor group representation algol symbols
723 ecma subset algol
724 profile programmer synopsis members acm participated study concerned primarily attitudes programmers careers jobs high percentage programmers apparently entered careers accident proven happy choice expect remain field years principal job satisfactions relate nature work mostfind jobs offer high level professional interest good working conditions salary advancement prospects satisfactory half report positive attitude programmers programming part organizations turnover attributed primarily poor management salary principal motivating factor turnover programmers nature work offered salary principal determinants accepting job programmers mobile expected programmers tend colleagues favorable light personalities vary function systems programmers differing applications programmers principal problems programming future listed participants languages personnel specific applications techniques building programming profession
725 group participation computer demonstration
726 general program analysis square rectangular lattice designs paper describes general purpose program handle incomplete block designs square rectangular lattices flow diagrams method calculation programmed digital computer
727 approximate solution delta dimensional dirichlet problems delta fu treated numerically exceptionally fast exceptionally accurate numerical method programming details numerous examples mathematical theory supplied extension method natural dimensional problems means dimensional
728 computer drawn flowcharts meet improved documentation written computer programs simple system effective communication presented shown great promise programmer describes program simple format computer prepares flow charts cross referenced listings input description date easily final output explains original program system proved valuable debugging coding aid
729 generalization algol
730 mirfag compiler based standard mathematical notation plain english pilot version compiler mirfag operation chief features system intended solution scientific problems presentation mathematical formulas standard textbook notation plain english organizational instructions automatic error diagnosis indicating actual location error uncompiled program attempt minimize fragmentation original problem statement normal feature programming systems
731 symmetric list processor list processing system list cell forward backward link datum system intended imbeding higher level languages capable calling functions subroutines coded machine language presentation form fortran programs depending limited set fortran programs depending limited set primitive machine language subroutines defined finally set field character manipulation primitives round system
732 monte carlo inverse algorithm
733 newton interpolation forward divided differences algorithm
734 newton interpolation backward divided differences algorithm
735 calculation confluent divided differences algorithm
736 modified hankel functions algorithm
737 exponentiation series algorithm
738 fourier series approximation algorithm
739 minifun algorithm
740 interest algorithm
741 evaluation determinant algorithm
742 evaluation determinant algorithm
743 arccosin algorithm
744 ative algorithm
745 steep algorithm
746 steep algorithm
747 generation permutations lexicographical order algorithm
748 semi iterative process evaluating arctangents
749 note onstochastic matrices
750 pei matrix eigenvectors
751 note set test matrices inversion
752 closing print tape
753 procedure converting logic table conditions efficient sequence test instructions
754 ye indiscreet monitor
755 exponential method numerical integration ordinary differential equations formula numerical integration prepared involves exponential term formula compared standard integration methods shown large class differential equations exponential formula superior stability properties large step sizes formula large step size decrease total computing time solution significantly engineering problems high accuracy needed
756 computer program editing news
757 simulation traffic network
758 skeletal structure pert cpa computer programs introduction mechanics pert cpa computer programs provided major components programs purposes interrelationships outlined
759 continued operation notation symbol manipulation array processing account notational device formal representation syntaxes string relationships string transformation procedures computing procedures deal arrays functions variables device consists continued operation collective symbols analogous summation symbol sigma continued multiplication symbol pi conventional mathematics
760 dialects fortran
761 note dangling algol revisions algol proposed eliminate ambiguous statements add convenience language discussion background problem sketch proof ambiguities removed included
762 remarks syntax symbolic programming languages
763 syntax controlled generator formal language processors
764 reduction matrix polynomial elements algorithm
765 orthogonal polynomial squares surface fit algorithm
766 xy move plotting algorithm
767 certification algorithm combinatorial things time time time wolfson wright comm acm apr
768 certification algorithm combinatorial things time wolfson wright comm acm apr
769 algebra sets algorithm
770 combination order algorithm
771 combination lexicographical order algorithm
772 gomory algorithm
773 matrix inversion algorithm
774 jacobi algorithm
775 interpolation differentiation integration algorithm
776 partition quicksort find algorithm
777 set test matrices algorithm
778 legendre functions kind real imaginary arguments algorithm
779 crout ii algorithm
780 algorithm invert alg gauss method alg inversion ii gjr
781 telescope algorithm
782 telescope algorithm
783 shellsort algorithm
784 normal random algorithm
785 conversions calendar date julian day number algorithm
786 adaptive integration multiple integration algorithm
787 matrix division algorithm
788 muller method finding roots arbitrary function algorithm
789 bandsolve algorithm
790 zersol algorithm
791 character manipulation fortran
792 multiple precision binary decimal integer conversion addition subtraction
793 mapped list structures
794 list type storage technique alphameric information method economic terms space time proposed storage manipulation character strings arbitrary length fixed word length computer method illustrated application algol type identifiers algol block structure
795 debugging systems source language level
796 sabrag time sharing low cost computer serial sabrac computer designed built scientific department israel defense ministry location magnetic drum main store avoid resort optimum programming techniques increase efficiency computer word ferrite core store program obeyed transfers core drum stores twin paper tape input output channels autonomously concurrently time shared multiplication division orders autonomous machine executing orders simultaneously functions naturally interlocked number advanced orders facilities incorporated execute order permits temporary jump orders modifier register permits double modification general relative addressing subroutines effective speed machine muchhigher basic specification lead expect design concepts time sharing incorporated low cost computers
797 american standard code information interchange
798 catalogue entry retrieval system
799 design separable transition diagram compiler cobol compiler design presented compact permit rapid pass compilation large subset cobol moderately large computer versions compiler smaller machines require working tapes compiler tape methods largely applicable construction algol compilers
800 linking segment subprogram language linking loader
801 squares solution constraints algorithm
802 syminv algorithm
803 syminv algorithm
804 exponentiation series algorithms
805 newton maehly algorithm
806 remark certification matrix inversion procedures
807 reversion series algorithm
808 confluent hypergeometric algorithm
809 hypergeometric algorithm
810 complex power algorithm
811 smoothing algorithm
812 smoothing algorithm
813 differences derivatives algorithm
814 complex arithmetic algorithm
815 normal probability curve fitting algorithm
816 erlang probability curve fitting algorithm
817 nexcom algorithm
818 realizing boolean connectives ibm
819 polynomial evaluation revised
820 checking loops networks
821 remarks sampling tape file iii
822 real time programming specifications problems implementation large real time applications treated suggested guidelines program file specifications developed problems delineated occur systems programming
823 syntactic description bc nelliac
824 descriptran automated descriptive geometry descriptive geometry consists procedures originally designed solve space geometry problems graphical constructions measurement computation addition unifies simplifies approach problems call subroutines compute coordinates correspond obtainable graphical constructions advantage approach descriptive geometry accuracy computation speed digital computer descriptran makes program problems space statements consists subroutines analogous procedures descriptive geometry
825 pip photo interpretive program analysis spark chamber data operating computer program processes photographically recorded data input program consists spark chamber photographs tracks high energy particles recorded program automatically scans measures performs preliminary interpretation photographs continuous operation processing rate photographic frames hour achieved
826 remarks fortran subroutines time series analysis
827 disk file sorting sorting techniques ibm random access storage device evaluated
828 incompressible flow network calculations general method calculation flows pressures fluid flow networks presented method applicable computer
829 external language klipa ural digital computer
830 corc cornell computing language
831 real error function erf algorithm
832 curve fitting constraints algorithm
833 reduction symmetric bandmatrix triple diagonal form
834 nonrecursive adaptive integration algorithm
835 complementary error function large algorithm
836 error function large algorithm
837 incomplete beta ratio algorithm
838 direct search algorithm
839 squares solution constraints algorithm
840 squares surface fit algorithm
841 shuttle sort algorithm
842 posteriori bounds polynomial algorithm
843 assign algorithm
844 fortran edit feature
845 test matrix determinants inverses
846 inverse conversion table
847 penny matching program logic penny matching program written csx
848 note range transformations square root logarithm germ idea previous papers picked years functions desirable transform argument short range symmetric give examples usage square root logarithm function binary decimal machines
849 tree structures processing files data processing problems files frequently searched altered binary search techniques efficient searching large files file organization readily adapted file alterations conversely chained file allocation permits efficient alteration searched efficiently file organized tree structure discussed shown file searched altered times proportional slog number file items parameter tree shown optimizing leads search time cent slower binary search tree organization employs data chains considered compromise organizations binary search chained file relation tree organization multidimensional indexing trie structure discussed
850 conversion reconversion comparison techniques variable length sorting logic converting highly variable input records format easily efficiently processed sorting program internal record formats discussed relation conversion input formats reconversion output formats comparison techniques internal formats
851 design characteristics variable length record sort fixed length record sorting techniques paper describes application techniques sorting fixed length records problems variable length record sorting techniques implemented sylvania computer system fixed length words memory specifically techniques sequence variable length records unrestricted size produce long initial strings data merge strings data power number work tapes system restrict volume input data
852 method comparing time requirements sorting methods
853 cobol sort verb
854 characteristics sorting computing systems random access storage devices substantial differences characteristics random access storage tape devices dictate concepts objectives computer program design considered viewpoint external file medium true case sorting tape oriented system major sorting problem minimizing merge time limited orders merge contrast sorting random access oriented system encourages selection optimum order merge orders problem discussed paper criteria developed determining optimum order merge properties random access storage devices attention problem key sorting versus record sorting possibly disadvantage key sorting random access system
855 organization structure dataon disk file memory systems efficient sorting data processing programs approach organization structure data bryant disc file memory systems sorting performing data processing functions presented areas covered characteristics bryant disc file systems bendix rca proposed chaining structures data functions disk file executive routine concepts sorting performing file maintenance processing proposed structure executive routine discussed additionally shown sorting accomplished disk storage work areas
856 sorting large volume random access drum storage approach sorting records random access drum memory sort program designed generalized generating sort applicable variety record statements description divided parts part presents operating environment defines general solution part describes internal sort merge technique
857 sorting nonredundant files techniques fact compiler typical file structures including called redundant examined methods fact sort files discussed
858 tape file merge pattern generator routine presented specifies sequence merge cycles effect merging sorted tape files routine designed minimize elapsed computer time varying power merge cycles tape drives characteristic assigning drive single reel file drives multiple reel file
859 computer planned collates
860 comparison polyphase oscillating sort techniques comparison oscillating polyphase sort techniques developed computer systems ten tape drives basis comparison total reading writing required number input strings tape drives techniques
861 read backward polyphase sorting read backward polyphase sorting efficient tapes sort sorting techniques backward polyphase produces continuous merging process tapes total number tapes sorting process presorting techniques conjunction polyphase merge sort provided presort capability producing ascending descending strings distributing strings tapes required polyphase merge
862 string distribution polyphase sort
863 multiphase sorting
864 empirical study minimal storage sorting
865 internal tape sorting replacement selection technique general technique sequencing unsorted records presented technique shown applicable stage generalized sort program formation initial strings sorting records memory storage internal sort shown records memory storage records sequenced log tests record initial string lengths average random input records reading writing processing accomplished simultaneously computer permits overlap
866 sorting computers
867 squares fitting planes surfaces dynamic programming dynamic programming recently stone bellman gluss determine closet fit broken line segments curve interval constraint number segments fixed present paper successive models developed extend method fitting broken plane segments surfaces defined types subareas space model considers rectangular area constraint plane segments defined grid space shown model incorporated algorithm successive approximations optimal fits type closed area finally applications briefly
868 suggested method making fuller strings algol
869 term magic square algorithm
870 term magic square algorithm
871 psif algorithm
872 adaptive numerical integration simpson rule algorithm
873 random algorithm
874 chebyshev curvefit algorithm
875 incomplete elliptic integrals algorithm
876 complete elliptic integral algorithm
877 complete elliptic integral kind algorithm
878 reduction matrix polynomial elements algorithm
879 newton interpolation forward divided differences algorithm
880 newton interpolation backward divided differences
881 calculation confluent divided differences algorithm
882 monte carlo algorithm
883 complete elliptic integrals algorithm
884 orthogonal polynomial squares surface fit algorithm
885 modified hankel function algorithm
886 xy move plotting algorithm
887 combinatorial things time time time algorithm
888 algorithm combinatorial things time
889 official actions responses algol programming language
890 selected definitions selection definitions prepared acm standards committee subcommittee programming terminology presented review acm membership
891 everyman information retrieval system information retrieval problem solution presented posed technical library limited bubget personnel solution general applicable types retrieval problems method solution makes groups previously dismissed information retrieval program expensive difficult programming stand point reconsider position present solution makes install information retrieval program months equipment
892 recol retrieval command language interrogation scheme retrieval manipulation data file records language interrogation scheme selecting file records logical condition statements defining record classes associating file records editing printed output summarizing results operations examples typical file application significant features machine implementation
893 significance arithmetic digital computer nyu modified include significance mode operation intended facilitate identification significant bits results floating point arithmetic operations manner floating point arithmetic handled mode discussed numerical experiments mode comparisons made ordinary normalized mode examples include power series evaluation linear equations solution determinant evaluation matrix inversion
894 iterative factorization technique polynomials iterative technique displayed factors arbitrary degree found polynomials variable convergence shown occur jacobian vanish initial approximation factor actual factor process simply programmed preliminary results adapted digital computers factors degree technique similar bairstow present method simpler
895 computational extension variate difference method presented computational extension variate difference method developed tintner
896 characteristic values vectors defective matrices
897 note proof existence phrase structure grammar algol
898 random algorithm
899 magic square algorithm
900 ancestor algorithm
901 difference expression coefficients algorithm
902 determinant algorithm
903 exponentiation series algorithm
904 fourier series approximation algorithm
905 algebra sets algorithm
906 combination order algorithm
907 combination lexicographical order algorithm
908 test matrix inversion
909 arithmetizing declarations corrigendum
910 selective instruction trap
911 variant method file searching
912 addressing array yi dimensions fortran analysis variance
913 neliac
914 jovial documentation
915 documentation ipl
916 fortran
917 comit
918 cobol
919 documentation problems algol
920 documentation programming languages
921 incomplete elliptic integrals algorithm
922 multint algorithm
923 gomory algorithm
924 nexcom algorithm
925 location vector lexicographically ordered listalgorithm
926 syminv algorithm
927 linear programming applied ultraviolet absorption spectroscopy
928 character manipulation fortran
929 glossary construction
930 decimal binary conversion short fields
931 systematic mistake analysis digital computer programs
932 matrix inversion gauss jordan inversion ii algorithm
933 magic squares algorithm
934 gauss method algorithm
935 calculating primes means gps algorithm
936 set test matrices algorithm
937 inverse finite segment hilbert matrix algorithm
938 invert algorithm
939 gamma function algorithm
940 generating discrete random variables computer note concerned details instruct computer choose things assigned probabilities method uniform variable direct computer memory location sequence appropriately chosen conditional probabilities efficient memory space fast programs result
941 recursive program general dimensional integral general program outlined dimensional integration variable limits program recursive nature simpson rule combined repeated bisection attain required accuracy developed ferranti mercury autocode scheme
942 fortran subroutines time series analysis authors recently concerned time series study constituted fairly typical piece applied statistical research involving extensive computations moderately large quantity data wehave found numerical processes required built completely small number basic operations set fortran subroutines written perform main purpose note describe subroutines question general statistical programs topical include general remarks
943 terms frequently combined problem description
944 storage search properties tree organized memory system memory list properties construct numeric alphabetic alphanumeric trees trees information storage retrieval properties applicable problems involving large quantities data problems quantity word length distribution stored information priori rapidly processing purpose paper examine storage search properties tree organized storage system assuming memory possessing list properties prime interest application symbol table dictionary similar file stored searched
945 arithmetizing declarations application cobol
946 suggestions algol rome issues report american standards association subcommittee
947 supplement algol report
948 note procedures
949 integer signed constants algol remarks relations syntax semantics programming languages aim point true grammar context free language conceived strings generating device method expressing meaning grammar algol open criticism
950 parallel methods integrating ordinary differential equations paper dedicated proposition order full advantage real time computations highly parallel computers expected future numerical analysis recast parallel form meant serial algorithms replaced algorithm consist subtasks computed knowledge results subtasks method proposed parallelizing numerical integration ordinary differential equation process standard methods serial
951 rational chebyshev approximations bessel function integrals kis remes algorithm approximate integrals kis rational functions related coefficients approximations ki ki ki precisions
952 fortran ii chaining
953 scanning text
954 note calculation probabilities distribution
955 class matrices test inversion procedures
956 family test matrices
957 method partial rewriting magnetic tape
958 case precision
959 mark sense port punch programming inputs
960 curve fitting format fortran
961 limited bit manipulation fortran ii techniques developed manipulating bits fortran ii techniques individual bits tested fields shifted numbers coded bcd converted binary
962 double precision squares root cdc january late hans maehly completed summary approximations elementary functions cdc computer approximations techniques suggested maehly equally applicable large computer cdc line unlike built double precision floating point arithmetic present work largely inspired successes maehly associates concerns extension maehly ideas double precision subroutine
963 relative effects central processor input output speeds throughput large computer presented paper technique determining relative effects internal speed computer speed input output units speed system equations derived permit determination effects hardware usage measurements
964 mechanization tedious algebra coefficients theoretical chemistry table formulas integrals involving legendre functions constructed mechanically program performed algebraic operations formulas rational algebraic expressions single variable constructed recurrence procedure interest molecular quantum chemistry trivial coding techniques write relevant programs fortran results photo composed photon system controlled tapes punched directly computer output avoiding manual keyboarding transcription errors keyboarded correction
965 greatest common divisor algorithm
966 evaluation determinant algorithm
967 complementary error function algorithm
968 radical inverse quasi random point sequence algorithm
969 graycode algorithm
970 treesort algorithm
971 time sharing traffic control program toronto traffic signal control system consists variety logically distinct computer programs competing machine time satisfy demands time sharing program written purpose execute order predefined priority subprograms real time system paper interesting aspects time sharing program outlined
972 executive system implemented finite state automaton command control system air force permits operators access large data files computer man machine interface satisfied communication consoles operators enter queries view replies data link permits remote stations send messages status reports inventories directly computer information received line data link update data files stored disk programming system divided executive control program components processing priorities priorities permit system sensitive console inputs permit operators consoles time share central processor executive control program orderly transitions control programming system components major emphasis paper technique definition finite state automaton organizing executive control program
973 estimation heart parameters skin potential measurements fundamental problem vector cardiography estimation state heart basis skin potential measurements mathematical model relating ventricular dipoles surface potentials sketched shown inverse problem determining electrical heart parameters basis skin potential measurements viewed nonlinear multipoint boundary problem feasible solution employing quasilinearization high speed digital computers
974 technique reading gapless tapes makes electrocardiograph analysis feasible ibm study arrhythmias higher frequency components electrocardiogram long series patient heart cycles examined valid comparison heart beats made technique presented automatic analysis long series heart cycles digital computer
975 program work international standard vocabulary computers information processing
976 fresnel integrals algorithm
977 conversions calendar date julian day number algorithm
978 fresnel integrals algorithm
979 logarithm complex number algorithm
980 multiple precision arithmetic exact calculation symbols paper system general purpose multiple precision fixed point routines subroutines calculate quantum mechanical symbols large arguments
981 rounding problems commercial data processing common requirement commercial data processing sum set numbers rounded generally understood manner equal sum numbers rounded individually rounding procedures accomplish procedure depends numbers accumulated vary sign sum vary sign number summed recognized prior rounding
982 inductive approach language translation possibility natural language translation means fixed operations translations considered conception sentence translation motivates work informally presented measurement physical similarity pairs strings discussed notion plays central role proposed type translator experimental evidence presented support premise conception based
983 reels inch perforated tape information interchange proposed american standard
984 report input output procedures algol ifip
985 report subset algol ifip
986 proposed amendment proposed american standard specification general purpose paper cards information processing
987 fortran basic fortran programming language information processing automatic data processing systems
988 history summary fortran standardization development asa
989 method syntax specification
990 constraint type statements programming languages proposal made including programming language statements imply relations variables explicit assignment statements compiler sets newtonian iteration making purpose routine formal differentiation
991 gamma function controller accuracy algorithm
992 gamma function algorithm
993 kutta merson algorithm
994 stringsort algorithm
995 steep algorithm
996 permutations set repetitions algorithm
997 patent protection computer programs
998 computer programs patentable
999 joint inventorship computers
1000 computer patent disclosures
1001 copyright aspects computer usage paper concerned question constitutes infringement copyright book nondramatic literary work work fed computer indexed analyzed partially reprinted utilized computer produce eye readable output question copyrightability programs infringement copyrights programs discussed paper directed primarily discussion present law aspects proposed copyright law included general recommendations made respect proposed revision copyright law
1002 rapid method digital filtering computer time spent time series analysis multiplications minimum multiplication method devised digital filtering expectation line real time analysis biological data filters constructed succession readily analyzable components manner facilitates cascading repertoire frequency response curves includes good low pass band pass designs programs implementing synthesis filters application computers assemblers definition recursive macros
1003 computer analysis method thermal diffusion biochemical systems thermal detection rapid biochemical reactions correct temperature data transient heat conduction losses cylindrical calorimeter handle complexities arising varying thermal relaxation times concentric insulating layers computer program developed temperature distribution system function radius time distribution corrected step subroutine calculates instantaneous chemical state action heat produced reaction program based direct statement fourier law heat conduction chemical rate equation provide bookkeeping law follow reactants flow heat packets computer continually stores heat distribution computer analysis method regarded physical laws process explicitly program results passing mathematical procedures conventionally program tested exact solutions heat equation gave identical results compared experimental data biochemical reaction construction computer programs based direct statement physical laws principle general applicability applied physical phenomena
1004 arctangent algorithm
1005 coordinates ellipsoid algorithm
1006 storage allocation reference structure method proposed discussed subscripted variable capability fortran sense added autocoder type assembly systems
1007 extension existing compilers sophisticated macros description presented application macros string concatenation employed add facility belfap
1008 scheduling meetings computer computer scheduling papers developed meeting federation american societies experimental biology faseb faseb meeting largest scientific meeting held united states year technique developed faseb applied schedule meeting parallel sessions
1009 solution combinatorial problems generating functions variable field computer utility generating functions solving combinatorial problems discussed implementation results presented evaluated
1010 multiuser computation facility education research present day computing facilities limited scientific research inability interact strongly users full power research computing instrument terminals give user ability generate correct operate procedure wishes simple complex implementation small scale multiuser computer system permits users work independently machine obtain satisfactory response typewriter communication
1011 logarithm complex number algorithm
1012 formal parsing systems automatic syntactic analysis recently important natural language data processing syntax directed compilers formal parsing system consists finite disjoint vocabularies map recursive set strings called syntactic sentence classes program automatic syntactic analysis determines formal parsing system directed production analyzer nondeterministic pushdown store machine internal vocabulary input vocabulary productions form ay ym yi elements set element set context free language analyzed directed production analyzer kuno oettinger multiple path syntactic analyzer english concrete directed production analyzer working parsing algorithm connection structures assigned analyzer conventional phrase structure grammar examined paper
1013 final examination scheduling method scheduling final examinations yield minimal number student conflicts minimization achieved repetitively evaluating nonlinear set equations imbeded process random monte carlo selection assignments heuristic techniques solution optimum solutions found yield locally minimal results computer programs empirical results
1014 machine controls analysis variance major problem analysis variance number factors increases exponential rise number interactions experimenter interested interactions impossible ignore experimental designs problem error terms natural computer handle bulk work involved computing interactions program device computer
1015 minimax polynomial approximations partitioning intervals method minimax polynomial approximation product method formula estimate maximum error degree approximation formula partitioning algorithm obtained dividing basic interval subintervals approximations equal degree give equal maximum error
1016 interchangcable perforated tape variable block formats positioning straight cut rs contouring contouring positioning rs numerically controlled machine tools proposed american standards
1017 comments bit sequencing ascii serial bit data transmission
1018 gauss algorithm
1019 xy move plotting algorithm
1020 free field read algorithm
1021 conjugate gradient method algorithm
1022 greatest common divisor algorithm
1023 bessel functions kind algorithm
1024 note formation free list
1025 method syntax checking algol syntax checker designed based syntax algol algol report communications acm definition elements language recursive desirable design syntax checker set mutually recursive processors tied subroutines perform bookkeeping functions recursive nature language syntax checker problem recovery error required attention method devised permits programs checked completely errors
1026 divide correct methods multiple precision division division problem defined notation relate problem multiple precision operation digital computer introduced basic divide correct method multiple precision division formulated properties briefly reviewed interest fact method produces step set precisely estimates desired result exact
1027 alternate checksum method
1028 investigation analytical method numerical derivative evaluation recently proposed analytical approach numerical derivative evaluation discussed technique shown accurate easy apply modifications required greatly facilitate writing debugging programs requiring derivatives highly complex functions
1029 simple automatic derivative evaluation program procedure automatic evaluation total partial derivatives arbitrary algebraic functions presented technique permits computation numerical values derivatives developing analytical expressions derivatives key method decomposition function introduction intermediate variables series elementary functional steps library elementary function subroutines provided automatic evaluation differentiation variables final step process produces desired function derivative main feature approach simplicity quick reaction tool derivation analytical derivatives laborious debugging tool programs derivatives
1030 techniques simulation computer logic simulation digital computer integral part computer design automation systems evaluation boolean functions characterize computer simulated constitutes major portion simulation system general procedural classes evaluating functions defined greatly increased efficiency simulation system methods presented simultaneously evaluating functions set values variables evaluating simultaneously function sets values variables
1031 note starting newton raphson method determination suitable initial estimate root equation means computing roots sequence related equations
1032 theoretical considerations information retrieval systems information storage retrieval systems composed major components identification information tagging effective retrieval searching strategy enter file circumvent scanning nonrelevant material file organization make access information efficient identification information paper suggests metalanguage recently discussed paper goffman verhoeff belzer object language searching strategy linear model evaluation function relevancy developed rewards system retrieving relevant documents retrieving nonrelevant penalizes system escaped relevant documents false drops inadequacies linear model approaches file organization discussed organization file based history past performance generating subset file high probability relevant
1033 experimental personalized array translator system system designed intimate man machine interaction general purpose problem solving environment experimentally operational system utilizers array oriented symbolic source language powerful statement types include numeric boolean relational selection operators operands entire arrays system permits simple specification test argument arrays single statements completely symbolic operating system includes display entry program data sequence control aided interrupt switch user interact program execution addition normal stored program sequencing system trace options ability enter statement execution present implementation system interpretive translator ibm computer
1034 autosate automated data system analysis technique technique designed alleviate principal problems beset current analysis large data workloads long span time project inception system operational date lack explicit directions conducting data system analysis results lack technique control data system lifetime analysis geared determining workload relationships storage characteristics documents information network automatically
1035 characteristics fortran cep language fortran cep languages differs fortran ii extends variety modes real quantities suitable mixtures input output list expression quantities occur modes makes address greater number input output equipment removes restrictions complexity list quantities transmitted magnetic core memory drum magnetic tape units
1036 remark generalization algol
1037 reduction matrix polynomial elements algorithm
1038 crout equilibration iteration algorithm
1039 summation fourier series algorithm
1040 romberg integration algorithm
1041 random permutation algorithm
1042 poisson charlier polynomials algorithm
1043 talk high level source language debugging technique real time data extraction talk meaning debugging technique aids substantially debugging complex real time programming systems interrupting users program desired points extract previously data extracted data edited listing data high level source language identification
1044 automatic loader subroutine nests method automatic loading library subroutines adapted operate conjunction conventional pass assembler method specifically designed cope nested library structure
1045 programming analysis variance sequences operators isomorphic mappings special operator calculus developed hartley mapping scheme found efficient programming analysis variance multifactor experiments operator calculus mapping scheme detail
1046 compiler building system developed brooker morris number articles published past years brooker morris joined rohl recent paper presented interesting programming system developed ferranti atlas computer present paper describes major features system expands points original authors cover briefly treats lightly topics devote considerable space purpose paper purely expository small details comments intentionally depart add material published listed references
1047 generation test matrices similarity transformations method obtaining test matrices prescribed distribution characteristic roots process consists simple similarity transformations generate full matrices canonical forms matrices generated characteristic vectors inverses determinants
1048 approximate solution axially symmetric problems variety physical problems diverse fields electrostatic field theory heat ideal fluid flow stress concentration theory reduce assumption axial symmetry study elliptic partial differential equation dirichlet type problems equation studied regions boundaries include nondegenerate portion axis exceedingly accurate numerical methods approximating solutions
1049 numerical solution nonlinear point boundary problems finite difference methods solution nonlinear point boundary problems extremely difficult task questions reality uniqueness established numerical technique problem present shooting techniques easiest method attacking problems fail difficult method finite differences obtain solution paper examples discusses finite difference method linear point boundary problems
1050 parts breakdown technique list structures list structured parts breakdown proposed discussed implementation facts presented operating program techniques
1051 multiword list items list concept originally proposed newell simon shaw single computer words elements list report describes consecutive words element results considerable saving space required hold amount data execution time required perform process data description standard list structures single word items multiword items introduced variable length items space utilization problems finally examples illustrate multiword lists paper attempts draw recent papers applied concepts ways relate general problems
1052 reducing truncation errors programming accumulating sum numerical integration large number intervals sum larger individual addends produce accurate sum number intervals increased separate variables established accumulators hold partial sums distinct intervals extensive successive truncations eliminated
1053 design implementation general purpose input routine general purpose input routine discussed advocated fortran philosophy programs examined exemplified
1054 gauss seidel algorithm
1055 bessel functions algorithm
1056 shellsort algorithm
1057 critical path scheduling algorithm
1058 simpson rule multiple integration algorithm
1059 heapsort algorithm
1060 matrix inversion algorithm
1061 matrix permutation algorithm
1062 symbol manipulation fortran sasp subroutines set subroutines fortran purpose synthesize output strings input strings analyzed shadow general syntactic analysis subroutine reported earlier ii packed bcd strings formed function type subroutines included intermediate manipulations performed strings stored abbreviated internal representation automatic internal representation newly created substring stored sequentially block common storage manner storage block dynamically allocated purpose discussed
1063 inch perforated paper tape information interchange proposed american standard
1064 perforated tape code information interchange proposed american standard
1065 bit sequencing american standard code information interchange ascii serial bit data transmission proposed american standard
1066 growing applications linear programming linear programming models grown extensively recent years concept organizing computer code undergone radical change longer adequate reduce mathematical algorithm simplex method computer code advanced code cope variety situations respective computer subprograms organized integrated system emphasis paper devoted underlying principles future linear programming systems based viewpoints influenced demands applications petroleum industry placing systems components system translation problem statement terms basic data linear programming matrix coefficients data transmission direct computer entry data file computer center data processing editing prior solving simplex algorithm efficient reliable code solving mentioned algorithm flexible means summarizing results
1067 picture generation standard line printer method producing gray toned pictures line printer utilizing degrees blackness standard print characters gray scales levels devised scanned images blood cells display technique
1068 fortran ii load time saver
1069 method comparing internal operating speeds computers
1070 expand system input card replication
1071 computer usage accounting generalized time sharing systems current development general time sharing systems requires revision accounting procedures computer usage time sharing system users operate concurrently precise amount computer time storage space user utilizes cost factors considered computer usage accounting generalized time sharing systems discussed
1072 improved equivalence algorithm algorithm assigning storage basis equivalence dimension common declarations presented algorithm based tree structure reduced computation time percent previously published algorithm identifying equivalence classes scan equivalence declarations method applicable problem identify equivalence classes element pairs defining equivalence relation
1073 fast procedure generating exponential random variables fast method generating exponential random variables digital computer outlined
1074 shanks algorithm
1075 shuttlesort algorithm
1076 multiple integration algorithm
1077 chebyshev curve fit algorithm
1078 elementary functions continued fractions algorithm
1079 bessel functions algorithm
1080 chebyshev polynomial coefficients algorithm
1081 normal distribution function algorithm
1082 gamma function controlled accuracy algorithm
1083 experiment user oriented computer system version software hardware system purpose facilitating programming analysis formulated problems modified flexowriter generate computer acceptable input equations computable requests typed manner conventional mathematical texts typing language rules flexible unrestrictive compiler part efficient system broader aspects tool study problem solving teaching systems
1084 declaring arbitrarily coded alphabets inability existing programming languages handle character strings alphabets mentioned scheme declaring additional alphabets proposed scheme encodings left justification collating sequences numeric sequence variations character size number bits alphabet alphabet arbitrary source language character representation
1085 specification general purpose paper cards information processing proposed american standard
1086 proposal input output conventions algol report subcommittee algol acm programming language committee
1087 problems automatic abstracting variety problems design operation automatic abstracting system discussed purpose general view major problem areas attempt made discuss details preferences alternative solutions
1088 menu planning computer computer code developed plans menus finding minimum cost combinations menu items daily dietary gastronomic production requirements satisfied sequence days fast special integer programming algorithm approximates theoretical solution problem menu changed line post optimized percent saving food cost fortran program ibm request considerable amount data processing precede implementation system
1089 designing computer center
1090 incomplete beta function ratios algorithm
1091 hypergeometric confluent hypergeometric algorithm
1092 nonrecursive adaptive integration algorithm
1093 evaluation determinant algorithm
1094 prime twins algorithm
1095 decimal tables binary coded tables
1096 avoiding matrix reversals fortran ii fortran iv
1097 algorithm converting integers base base simple algorithm integer conversion number systems presented proved
1098 comparison list processing computer languages including detailed comparison comit ipl lisp slip detailed comparison presented comit ipl lisp slip computer programming languages exhibit principal characteristics existing list processing languages important common features list processing languages reviewed forms data structures manipulated necessity dynamic allocation storage pushdown stores recursive operations principal differences languages consideration detailed representations data programmer machine methods storage allocation programming formalisms special processes including arithmetic facilities usability terms availability documentation learning aids debugging facilities rough comparison shows languages discussed approximately speed finally authors give heuristics aid selection languages problem applications concluding languages considered distinctly superior list processing applications
1099 professional computer work blind developments computer technology opened professional opportunities intelligent blind occupations blind participate disadvantage opportunities offered gain entrance occupations computer including programmer important future rehabilitation planning interest fact blind suited programming work intense training constant experience locating objects unseen environment superbly trained memory blind brings work programming skills sighted acquire qualifications result fewer debugging problems make blind valuable addition systems group blind professional number aids techniques developed mediate machines programmer paper describes techniques aids designed staff medical computing center university cincinnati college medicine
1100 status computer sciences curricula colleges universities
1101 place logical design switching theory computer curriculum
1102 mechanical languages specification
1103 logic computer sciences
1104 undergraduate curriculum numerical analysis
1105 introducing digital computing
1106 programming digital computers
1107 computers education
1108 digital data processor tracking partially illuminated moon study lunar tracking techniques fabrication breadboard assess feasibility technique selected conducted define tracking system observation sight line center partially illuminated moon data processing portion system presented detail general operation tracker head assembly data readout operation entire system effect data processing considerations design tracker system system basically consists optical sensor digital computer tracker drive mechanism system units connected cascade comprise control loop application optical telescope radial mechanical scanning mechanism read lunar sight line measurement information information sequentially read special purpose digital computer extracts measurements computes error signals drive tracker attitude
1109 conversion power series chebyshev polynomials slowly convergent power series rearranged series chebyshev polynomials sequence transformations evaluating coefficients method illustrated computing coefficients expansion logarithm dilogarithm
1110 fourier series method numerical solution class parabolic partial differential equations fourier series method applied class parabolic partial differential equations reduces problem system ordinary differential equations application method shows considerable advantage conventional finite difference methods
1111 class iterative techniques factorization polynomials method iteration developed terms function arbitrary character sufficient conditions convergence process yielding factors arbitrary degree polynomials variable lin method newton method occur special cases
1112 technique computer detection correction spelling errors method assumes word found dictionary error wrong missing extra letter single transposition unidentified input word compared dictionary testing time words match assuming errors occurred test run garbled text correct identifications made percent error types
1113 computer made perspective movies scientific communication tool easy program basic transformation required perspective drawing fact advent high speed microfilm printers general dynamics electronics makes perspective movies direct output computer programming movie briefly studying angular motions satellite attitude control system movie domino shaped box represents satellite sphere circles latitude longitude represents earth cost approximately minutes ibm time minute movie
1114 generating canonical prefix encoding computer programs generating minimum redundancy exhaustive prefix encoding program generates huffman frequency tree determines structure functions encoding program assigns codes
1115 randomized binary searching tree structure efficient method tree structures proposed utilizers minus branches search path significant gains result search key includes alphabetic characters
1116 tests computer method constructing school timetables previously proposed computer method constructing timetables based iteration involving boolean matrices limited tests method successfully produced timetables trial references relate timetable problem theorems matrices zeros theorems bipartite graphs problems applying method constructing timetables real situations noted
1117 polyphase sorting overlapped rewind variation polyphase merge technique sorting permits tape time rewound merge continued remaining tapes result overlapping major portion rewind time technique considered sort written operate tapes read backwards savings overlap method increase number tapes increased
1118 fortran subroutines time series data reduction
1119 open letter fortran standards american association
1120 alcor group representations algol symbols comm acm corrigenda
1121 comments continued operation notation note intended clarify correct points recent paper describing notations symbol manipulation barnett comm acm august
1122 note compiling algorithms compiling generators arithmetic expressions discussed presently experimental compiler improvement suggested speierman burroughs
1123 gauss algorithm
1124 matrix division algorithm
1125 syminv algorithm
1126 erf algorithm
1127 tridiagonal matrix algorithm
1128 evaluation determinant algorithm
1129 incomplete beta function ratios algorithm
1130 gamma function althm
1131 context ambiguity parsing
1132 extension algol manipulating formulae
1133 programming package general modes arithmetic
1134 effects computer language structures problem compiling efficient codes prompted development intermediate language reflecting structure machine easily manipulated improving object program efficiency subject paper intermediate language methods manipulating compilations series arithmetic statements discussed assumed functions exponentials removed statements replaced simple variables purposes simplicity treatment subscripts simplified structure presented illustrate compiling method assumptions made purposes simplification cases assumptions violated actual machine
1135 general business oriented language based decision expressions structure digital compute programming language covers wide class business file processing applications presented structure based identifying incorporating compiler aspects common processes class permits writing extremely compact programs comparatively complex applications terms tables control expressions express information characteristic application local process affecting output files involved effected local modifications program modification entry tables structure inexpensive preparation loading speed compilers translate source programs efficient machine codes approach adopted departs conventional mechanical language design philosophies stresses structural analysis class processes represented languages opposed emphasizing formal contents independent syntactical definitions relies exclusively nonprocedural representation process sets tables relations data results control statements procedure descriptions translations flowcharts invariant pattern procedure identified characteristic class batch file processes philosophy potential overcome deficiencies business oriented languages fully meets requirements set codasyl languages including machine independence
1136 beginnings theory information handling
1137 format language
1138 formalism programming languages
1139 fortran iv syntax language
1140 structural connections formal language
1141 bounded context syntactic analysis
1142 extension algol languages
1143 analysis decay type data comparative study made variety numerical techniques fitting experimental data decay type forms involving sums exponentials statistical errors fitted parameters calculated methods applied artificially generated sets data results experiments radioactive tracers human animal subjects results show values fitted parameters sensitive variations fitting procedure great care sensitive variations fitting procedure great care exercised identifying values physical constants values functions derived fitted parameters physical entities generally stable variations fitting techniques error bounds large great confidence select uniform technique running experiments analyzing data significant relative results subject
1144 digital computer determination alpha source activity technique determining activity homogeneity alpha source believed technique digital computer applications field nuclear physics technique involves computer manipulation digital image nuclear source experimental details
1145 git heuristic program testing pairs directed line graphs isomorphism pair directed line graphs problem ascertaining isomorphic efficient algorithmic solution straightforward enumerative algorithm require years running time high speed computer order compare node graphs sophisticated approach called situation similar prevailing areas game playing theorem proving practical algorithms unknown interesting cases practical partially successful techniques git graph isomorphism tester incorporates variety processes attempt narrow search isomorphism demonstrate exists scheme relied exclusively solution program designed avoid excessive computation fruitless lines git written comit language successfully tested ibm
1146 efficient composite formula multidimensional quadrature point degree quadrature formula integration dimensional hyper rectangle presented points lie surface weights opposite sign attached points opposite faces large volume subdivided congruent rectangular subdivisions point required interior subdivision achieve degree accuracy
1147 numerical solution boundary problems linear ordinary differential equations numerical method presented solution boundary problems involving linear ordinary differential equations method noniterative makes step numerical integration scheme reduce problem boundary values initial values comments made numerical results applying method specific problem addition extension algorithm general problems discussed
1148 significant digit arithmetic methods handling summing process geometric series shown give results indicating widely differing significances carried machine incorporating significant digit arithmetic
1149 gargoyle language compiler writing
1150 fortran post mortem procedure
1151 note multiplying boolean matrices ii
1152 floating point arithmetic bit numbers classic straightforward technique presented limited size type number representation multiple precision arithmetic
1153 fast procedure generating normal random variables technique generating distributed random numbers faster general readily applicable binary decimal computers
1154 multi tape infinite state automata survey survey machines powerful finite automata powerful general turing machines presented felt machines category closely related digital computers finite automata unrestricted turing machines intermediate machines created adjoining infinite state memory finite state machine performing restrict manner unbounded portion memory accessed bound number steps allowed computation increasing recursive function length input restrict total amount memory manner examples classes properties discussed
1155 experiments deductive question answering program investigation artificial intelligence computer experiments deductive question answering run lisp program called deducom acronym deductive communicator facts deducom answered questions answerable facts fact tells deducom specific information method answering general kind question conclusions drawn article deducom answer wide variety questions human increase deductive power deducom telling facts deducom write simple programs hoped ability forerunner ability program learn deducom search procedure present bad defects questions answerable facts answered answerable questions answered relevant facts order present deducom method making logical deductions predicate calculus bad defects facts changed logically equivalent deducom redundant facts deducom
1156 hankel function algorithm
1157 procedure normal distribution functions algorithm
1158 program structures parallel processing constructs organizing explicating parallel program segments discussed extensions algol constructs serve meta commands motivated equipment multiprocessing capability
1159 machine independence technology economics survey offered techniques transferring programs compilers computer methods examined bootstrap technique singled detailed discussion emphasis economics considerations determine applicability bootstrapping specific case discussed attempt made assign qualitative weights finally reasons believing machine independence problem substantially diminished current trends computer design process convergence hardware design foreseeable software developments lead satisfactory resolution
1160 cat computer aided translation semi automatic translation system implemented converts fap language programs assembly language input system fap program deck specially prepared translation user output consists translated compass language program comprehensive diagnostic listing user analyze order verify questionable areas translation translation processor consists distinct phases assembly fap program comprehensive analysis assembled code regard actions instructions instructions data finally output pass generates compass program form macro instructions
1161 compatibility feature ibm system model generation stored program computers ibm series part brought edp mass market time large scale era unfolded rapid technology led rapid obsolescence data processing equipment program written system required tedious conversion incompatible machines ibm system designed conversion problem specifically mind conversion aids model compatibility feature feature conjunction aids permits smooth inexpensive transition optimum system
1162 assembly language reprogramming complete reprogramming compiler language programs seldom assembly language programs present greatest difficulty assembly languages generally provide translation symbolic numeric version program assembly language machine language meta language presented mapping language conforms canonical list form arbitrary stream bits bit stream treated machine language program character stream user desire meta language map assembly language assembly language machine machine language
1163 philco ibm translation problem oriented symbolic binary levels translation system developed eliminate effort required reprogram philco series codes ibm operation experience system limited highly successful encouraging application techniques source object languages
1164 emulation large systems conversion problem technique called emulation discussed technique emulation developed includes sections central processing unit cpu input output unit general treatment sections describe greater detail implementation compatibility features emulation techniques ibm systems ibm system
1165 spectra emulator rca rca emulator system supplied spectra reprogramming aid rca object program run spectra necessitating rca object code execution rates considerably traditional simulation emulator increase throughput capacity user spectra emulator makes hardware micro program routines software routines accomplish function
1166 macros translation symbolic assembly language computer set macro operations prepared assist translating ibm symbolic assembly language programs ibm machine language programs set inserted beginning symbolic deck treats incompatible instruction mnemonics macro instructions produce equivalent instruction sets incompatible instructions categorized basic operational classes expressed single basic skeleton levels macro calls required supply arguments basic skeleton instruction modification execution time address tag incompatible instruction requires incorporation address tag equivalent handled generating calls simulation subroutines
1167 translation machine language programs automatic translation machine language programs highly desirable goal advent large scale computers pitfalls make difficult achieve completely automatic translations analyzed shown primarily semantic nature semi automatic procedure resolving semantic problems suggested
1168 machine lines cobol production large file maintenance retrieval program system written cobol cobol language specifically enable system operate ibm computers
1169 algorithm minimizing backboard wiring functions partially exhaustive algorithm presented solving problem arising automatic layout computer ordered set en computer components permutation elements en attached integer function algorithm finds local minimum evaluating set delta increments set exchanges elements exchange negative increment delta performed process iterated stopped set increments positive empty set proved corresponds minimum procedure similar downhill method finding minimum real function applied placement problems experimental results presented backboards formed elements initial placements
1170 analyzing english syntax pattern learning parser dependency analysis system based pattern recognition learning logic developed infer word classes rules syntactic combination experience text analyzed characteristics form word classes depth dependency tree word direction governor features neighbors syntactic rules combination show relation word governor depth pattern sentence system tested elementary basic english sentences including earlier knowlton learning parser sentences experience sentences generalize percent accuracy accumulative learning trials sentences averaged probability accurately parsing sentence encountered concluded system adequate learning parse bulk basic english development required conclusions application ordinary english stored system operational arpa sdc time shared computing system
1171 comparison primal simplex primal dual algorithms linear programming statistical comparison primal dual commonly primal simplex algorithm solving linear programming problems made assumption starting full artificial basis conditions primal dual method shows statistically significant superiority randomly generated problems found regression analysis relevant parameters determining difference number iterations algorithms number constraints number variables ratio
1172 conversion limited entry decision tables computer programs decision tables describing set complex decision rules based sets conditions algorithms efficiently convert tables computer programs extend usefulness decision tables computer users algorithms based work montalbano extended handle dashes decision rules algorithm minimizes computer storage space required resultant program minimizes computer running time conversion process pinpoint contradictions redundancies rules table
1173 performance system automatic segmentation programs algol compiler gier algol gier algol compiler makes automatic system handling transfers program segments drum store core store program execution time logic system performance system discussed primarily basis execution times related specific programs discussion concludes assessment potential gains ways improving system
1174 inverse permutation algorithm
1175 quickersort algorithm
1176 finding eigenvectors gaussian elimination algorithm
1177 determinant evaluation algorithm
1178 algol reference language editor algorithm
1179 pufft purdue university fast fortran translator core resident compile system designed ibm computer half word core memory pufft monitor job sequencing translator full fortran iv language fortran subroutine library input output system compile time execute time elaborate diagnostic message writing routine batches small medium sized fortran iv source language programs processed high speeds language compatibility maintained programs debugged pufft system recompiled run ibjob ibftc system supplied manufacturer
1180 axle axiomatic language string transformations axle language designed data manipulation data arranged linear form workspace transformed table axioms called imperatives transformation consists matching procedure decides imperative applicable replacement procedure modifies part workspace imperatives applied accordance definitions symbolic terms presented systematically assertion table process definition includes special case recursive assertions complete programs imperatives show applications language
1181 simple data transmission system office telephone method evolved transmitting data type originating laboratory situation direct central computer method requires specialized equipment ordinary telephone callup basis present applications include cardiac output calculations radio activity tracer studies neurophysiology time sequence studies nerve impulses
1182 contextual correlates synonymy experimental corroboration obtained hypothesis proportion words common contexts word contexts word function degree similar meaning shapes functions similarity context reliable criterion detecting pairs words similar meaning
1183 note digital computer tedious algebra programming special purpose compiler written fortran ii language made writing long programs computer procedure based straight forward format statements generating machine written programs
1184 fast storage allocator fast storage bookkeeping method list structure operations situations involving sizes blocks fixed size location scheme llllll bell telephone laboratories low level list language makes blocks computer registers sizes smaller blocks obtained successively splitting larger half larger blocks reconstituted parts simultaneously free
1185 program solve pentomino problem recursive macros coding technique macro instructions lists arguments recursively discussion covers primarily technique solve pentomino problem problem fitting pentominos overlapping plane area formed elemental squares
1186 recursive solution class combinatorial problems combinatorial problems requiring selection elements set elements solved recursion process analogous computing binomial coefficients specific problems analyzed general technique exposed algol program developed problems
1187 note ascii octal code table standards
1188 algol computer design language idea constructing computer design language making algol programming language presented computer designer benefit design language higher level computer user benefit higher level programming language purposes requirements design language enumerated achieve purposes translator required translate design computer logic set boolean equations design language presented terms vocabulary statements sequences microprogram included examples identifiers expressions unary binary operators declaration statements transfer statements terminal statements exchange statements statements statements statements sequences microprogram
1189 random normal deviate algorithm
1190 pseudo random numbers algorithm
1191 find precedence functions algorithm
1192 interpolation table algorithm
1193 gomory algorithm
1194 establishment acm repository principles ir system applied operation history establishment acm repository moore school university pennsylvania reviewed briefly principles presented paramount provision information services easy accessibility information files users unfamiliar file organization service exceeding user costs principles serve guides mechanizing acm repository main features information system direct user access line teletypewriter console direct user access details system organization unrestricted expandable search vocabulary user access facets document indexing stochastic search linked index terms file relationships contribution acm repository consisted documents relating primarily early research compilers documents cataloged indexed catalog scheduled computing reviews indexing system detail main catalog describe documents inverted lists provided repository system retrieval concept coordination
1195 uplifts university pittsburgh linear file tandem system series computer programs developed operational processing national aeronautics space administration linear file system ibm combined data processing system program note worthy create fixed length logical records fixed length blocks variable length source data format output optimization processing ibm system programs completely checking test validity accuracy input materials provided national aeronautics space administration
1196 applications differential equations general problem solving large class problems leading digital computer processing formulated terms numerical solution systems ordinary differential equations powerful methods existence solution systems good general purpose routine solution systems furnishes powerful tool processing problems true point view ease programming ease debugging minimization computer time number examples discussed detail
1197 finding zeros polynomial algorithm method finds simultaneously zeros polynomial developed rutishauser tested number polynomials real coefficients slowly converging method quotient difference algorithm starting values newton bairstow algorithm rapid convergence sufficient conditions existence scheme completely failure occur zeros equal equal magnitudes success achieved cases failures traceable equal magnitude difficulty cases computer roundoff result errors spoil scheme algorithm give zeros find majority
1198 solution problem concurrent programming control number independent sequential cyclic processes restricted means communication made moment engaged critical section cycle
1199 computer center simulation project today computation centers based rapidly changing technologies hardware software systems difficult base decisions experience instances benefits comparable experience problem situation paper mathematical model lockheed central computer center formulated describes operation computation center terms information nets decision processes control functions experiments performed model results experiments application results discussed
1200 reversible subroutines computers run backwards computer design describe permits subroutines executed backward forward instructions unchanged replaced conjugate instructions shown concept number subroutine types developed unusual properties properties analogous matrix operations parallel nomenclature suggested classification
1201 generation permutations lexico graphical order algorithm
1202 normal random algorithm
1203 normdey algorithm
1204 character structure character parity sense serial bit data communication american standard code information interchange proposed american standard
1205 undergraduate program computer science preliminary recommendations
1206 judgment method curve fitting computer oriented method processing communicating numerical data instrument reliability factors irf define limits reliability measured item information compute maximum permitted error mpe values ordinate judgment principle sjp discard wrong information compute values parameters mpe terms irf data compatibility tests number equations made quickly intractable problems easily solved design experiments greatly simplified computational mathematical techniques reduce bias sjp discussed inadequacies statistical graphical methods curve fitting noted
1207 remarks simulation boolean functions
1208 simulation computer logic fortran arithmetic
1209 negative subscripts fortran ii programming ibm
1210 file handling fortran note describes fortran subroutines facilitate handling tape files symbolic naming information files violating casual scientific programmer idea simplicity comments years subroutines
1211 note storage strings method storing strings blocks indefinite size completely dynamic relation similar schemes discussed
1212 linear extrapolation point boundary problems suggested convergence properties usual picard successive approximation scheme improved linrar extrapolation techniques numerical provided
1213 dynamic format specifications implementation fortran format conversions discussed format types give fortran programmer control input output specifications execution time
1214 experiments algebraic manipulation computer set subroutines algebraic manipulations ibm computer written list processor slip series problems increasing difficulty solved routines
1215 techniques alcor illinois algol compiler written alcor group ibm significant techniques compiler writing organizational details compiler timing estimates indication compiler requirements
1216 symbolic derivatives list processing subroutines recursion routine developed computes prints symbolic derivative absolutely continuous elementary function variables made list processing languages chain rule applied result edited produce results elegant efficient obtained hand computation subset imbeded formula translator introduce differentiation operator algebraic programming language
1217 map partitions integers algorithm
1218 partition generator algorithm
1219 number restricted partitions algorithm
1220 symbols algorithm
1221 symbols algorithm
1222 legendre functions arguments larger algorithm
1223 high speed compilation efficient object code pass compiler properties briefly passes scan intermediate language produced preceding pass essentially reverse order generated pass hasto read bulky problem oriented input double scan direction performed passes compiler remove locally constant expressions recursively calculable expressions loops important part common subexpression recognition optimization effective index registers important discussed object code efficient highly machine dependent discussion terms fortran language technique applicable algebraic languages
1224 determining computing center environment investigation generally unavailable parameters descriptive computing center environment obtained actual data collection reduction results month collection tabulated summarized
1225 predictive analyzer path elimination technique characteristic features predictive analyzer system syntactic analysis operational harvard ibm delineated advantages disadvantages system discussed comparison constituent analyzer developed rand corporation robinson english grammar addition technique repetitive path elimination predictive analyzer claim efficiency processing time core storage requirement
1226 organization structured files data file integral part data processing system systems selection organization data file critical system operating efficiency paper systems designer information source describes ten techniques employed organizing structured data characteristics organizations application independent providing designer reference limit number file organizations system
1227 transport algorithm
1228 treesort algorithm
1229 random permutation algorithm
1230 method hyphenating end printed line description method hyphenation presented result application general rules character sets considered routine method briefly outlined
1231 peephole optimization redundant instructions discarded final stage compilation simple optimizing technique called peephole optimization method examplesare
1232 representation standard ecma bit code punched cards ecma standard
1233 conventions symbols preparation flowcharts information processing systems standard working paper paper intended outline conventions considered flowcharts information processing systems conventions applied symbols appearing proposed american standard flowchart symbols symbols se
1234 structure algol compiler high speed top method syntax analysis completely eliminates back source string implemented convenient macro language technique simulation compile time conventional run time stack enables generation code expressions minimizes stores fetches stack pointer motion run time properly trating recursion side effects procedures block structure recursion handled interpretive methods run times context problem transmission recursive procedures parameters called solved manner permits handling common cases simple expressions array identifiers efficiency
1235 stochastic approach grammatical coding english computer program assign word english text form class part speech program operates high speed limited storage space half word events corpus identified small dictionary function words frequently occurring lexical words suffix tests logical decision rules employed code additional words finally remaining words assigned class basis probable form classes occur identified contexts conditional probabilities basis coding empirically derived separate hand coded corpus preliminary trials accuracy coder obvious ways improving algorithm suggested analysis results
1236 smart automatic document retrieval system illustration fully automatic document retrieval system operating ibm system characterized fact hundred methods analyze documents search requests feature retrieval process leaving exact sequence operations initially unspecified adapting search strategy individual users system simulate actual operating environment test effectiveness processing methods results obtained combination analysis procedures general relied retrieve wanted information typical search request present report illustrate systems operations evaluation procedures
1237 conversion decision tables computer programs translation procedures conversion decision tables programs presented evaluated terms storage requirements execution time compile time procedures valuable hand coding guides algorithms compiler limited entry extended entry tables analyzed addition table analysis nature table oriented programming languages features discussed presumed reader familiar nature decision tables conventional definitions
1238 technique integrated reports multi run system requirements requisition accounting system san francisco overseas supply agency osa included exception reporting osa simultaneous satisfaction reporting requirement accounting requirements posed definite problems system design handling reporting function practical satisfactory solution developed expanding basic system tailored service runs report production runs permitted final system easier debug easy maintain efficient production responsive changing requirements osa
1239 graycode algorithm
1240 transport algorithm
1241 havie integrator algorithm
1242 modified graeffe method algorithm
1243 testing understanding difference call call algol
1244 bit manipulation fortran language
1245 fortran ary counter
1246 deeply nested iterations
1247 operating environment dynamic recursive computer programming systems presented paper nontechnical introduction oedipus computer programming system serve operating environment dynamic recursive programs programming systems services include dynamic allocation storage contiguous blocks arbitrary size input output hierarchy data types public pushdown list automatic recursive programming rudimentary compiler subroutine communication bookkeeping debugging aids
1248 automatic simplification computer programs presented paper problem writing program examine program perform simplifications detected argument program form knowledge supposed
1249 recorded magnetic tape information interchange cpi nrzi revised proposed american standard
1250 graphic symbols problem definition analysis standards working paper
1251 american standard ifip icc vocabularies compared proposed american standard vocabulary information processing ifip icc vocabulary terms information processing analyzed compared
1252 symbolic notations statistical tables approach automatic system design preparation statistical tables important function data processing systems organizations symbolic notation description tables shown aid documentation notation step making automatic tedious time consuming part system design programming computer applications notation suggestions made implementation larger goal
1253 quikscript simscript language quikscript simulation language based simscript programmed algebraic language gate quikscript language internal implementation major differences quikscript simscript presented paper programming guide language attempt present flavor description simscript included sufficient description gate render material understandable reader familiar algebraic languages
1254 iteration element recent addition mad language made iteration structure mad statement algol statement fortran statement expressions
1255 method data list processing application eeg analysis set subroutines discussed designed aid programming computations indexed lists numbers machine language symbolic assembly system commonly performed list operations outlined logically arranged groups computation power spectral density autocovariance function discussed class eeg signals
1256 dynamic variable formatting
1257 debug extension current line debugging techniques method linr assembly language debugging greatly simplifies bookkeeping tasks characteristically process developed implemented program univac computer air force cambridge research laboratories program online user insert delete symbolic assembly language number lines point previously assembled program core remainder program relocated appropriately
1258 extended arithmetic package fields algebraic number theory arithmetic carried degree precision exceeds normal hardware capacity machines cases extended arithmetic package comprehensive easy performing arithmetic package coded ibm discussing general problems design extended arithmetic package specific reference made program
1259 applications binary numbers computer routines binary number thought alternate form expression set letters decimal number equivalent expressions easily translatable characteristics examples form expression changed equivalent expression save space gain power
1260 squares analysis resonance spectra small computers problem analyzing data mossbauer effect experiment discussed cut step procedure convergence imposing physical constraints functional form calculation make analysis small computer analysis carried ibm computer bcd core memory
1261 modeling simulation digital networks simulation digital networks digital computer engineer effective means analyzing time quantized logical behavior digital network modeled set time dependent time independent boolean transformations transformation describing input output relationship model element comprising network mode simplicity utilizing fortran iv programming system digital network simulator discussed illustrated simplicity derived common modeling technique applicable combinational sequential digital networks systematic programming approach
1262 procedure oriented language statements facilitate parallel processing statements suggested programmer writing procedure oriented language sections program executed parallel statements hold serve partly brackets establishing range parallel operation partly define parallel path range togethers nested statements effective computing devices capable attaining degree compute compute overlap
1263 metalanguage syntax specification metalanguages sufficient table specification algol syntax additional metaoperators adequate formal table description basic fortran
1264 blnsys operating system braille capabilities blnsys operating system designed common optional features attached tape drives printed output system executing programs english braille system written small machine minimal peripheral equipment jobs batched card handling lost processing time minimum system perform users functions assemble sps source decks post list produce condensed uncondensed object decks execute user program list card input program list punched output provide storage dump execute program submitted execution uncondensed object deck debugging trace control card braille conversion brailled listings ibsys batch output update duplicate system tape input ouput subroutines included system
1265 relative efficiencies context free grammar recognizers number diverse recognition procedures proposed parsing sentences respect context free grammar paper means common device procedure defined giving algorithm obtaining nondeterministic turing machine recognizer equivalent context free grammar formalization turing machine chosen make simple description parsing procedures considered attempt made compare recognition efficiencies procedures defined simple grammars sentences formal comparison made empirical comparison recognition realistic programming languages lisp algol made means program simulates turing machine univac computer algorithms producing grammars equivalent context free grammar considered increase recognition efficiency afford empirically investigated
1266 considerations relating purpose fortran standardization appendixes asa fortran standard
1267 performance systems data transmission transfer rate information bits asa tutorial standard information thruput characteristic systems performance discussed discussion includes pertinent aspects information transfer determination transfer rate information bits trib residual errors standard measurement conditions paper presents orderly arrangement characteristics parameters affect information thruput examples procedures determining thruput rate terms trib concludes performance characteristic involving information rate expressed trib conjunction residual error rate
1268 logarithm complex number algorithm
1269 computation fourier coefficients algorithm
1270 algol education automatic grading programs algol grader programs presented computer evaluation student algol programs beginner program furnishes random data checks answers searching test reliability efficiency integration procedure statement essential properties computer system order grader programs effectively
1271 secondary key retrieval ibm system secondary key retrieval method involves preparation secondary storage lists primary data records search requests satisfied logical operations lists producing complete set addresses primary records relevant request experimental results presented comparative analysis
1272 expanding editing function language data processing automatic abstracting citation indexing mechanical translation procedures editing required automatic method leaves desired paper discusses economy editing function amount condensation text language processing operations contends editing regarded opportunity unwelcome necessity heavy editing mere correction improvement computer output exemplified concordance preparing survey article lecture opportunities heavy editing chief interpretation expansion computer output processes factor analysis applications processes factor analysis applications quick unbiased evaluation large volume incoming mail telegrams yielding summary reports humans computers produce
1273 remark romberg quadrature modified form romberg quadrature sensitive accumulation rounding errors customary
1274 numerical solution point boundary problem linear ordinary differential equations method numerical solution point boundary problem homogeneous linear ordinary differential equations developed method requires runge kutta integrations interval consideration solution linear system equations unknowns
1275 code structures protection manipulation variable length items corrigendum
1276 fortran ii chaining
1277 cobol subroutines fortran main programs
1278 wengert numerical method partial derivatives orbit determination quasilinearization recent article communications acm wengert suggested technique machine evaluation partial derivatives function analytical form solving linear boundary problems quasilinearization partial derivatives formed analytically evaluated numerically wengert method appears attractive programming viewpoint equations undertaken
1279 conditional base number system encoding sequences correlated characters procedure efficient encoding sequences characters predecessor successor selection rules procedure shown assign unique integer sequence generate compact set values
1280 numerical integration differential difference equation decreasing time lag systems variable time lags present common occurrence biology variable flow rates common variable lags present extensive body knowledge exists effects variable lags shown method reducing differential difference equations ordinary differential equations studied numerically ease subsequent study deal situations multiple lags lags dependent solution present
1281 data input question answer data input scheme time sharing computer paper format statements determine input computer asks user required values time computer converses user input process checks errors standard data editing values input
1282 fortran subroutines cobol main programs proper cobol coding techniques accounting differences storage allocation library routines languages write fortran iv subroutines called cobol main programs technique enables programmer advantage properties language minimizing respective disadvantages
1283 matrix inversion algorithm
1284 bessel function set integer orders
1285 eigenvalues eigenvectors real symmetric matrix qr method algorithm
1286 eigenvalues real symmetric matrix qr method algorithm
1287 vector coupling clebsch gordan coefficients algorithm
1288 clp cornell list processor presented paper highlights clp teaching language employed cornell university constructed serve means introducing simulation list processing concepts advantages clp discussed examples
1289 proposed revised american standard code information interchange
1290 transparent mode control procedures data communication american standard code information interchange tutorial paper considerations task group area transparent mode data communication control philosophy appearance paper forecast underthe level control earlier tutorial paper control procedures data communications task group document dated present paper elaborates solutions problems transparency basic ascii communication control characters outlined previous paper mentioned cover additional control problems handling material line encrypted data ascii codes means systems providing complete character transparency cover concepts transparency normal character structure modulation rate system abandoned conjunction earlier tutorial paper paper expected lead proposal stand ardizationof data communication control procedures american stand ard code information interchange
1291 tabular input data
1292 divide correct method variable precision division paper divide correct method variable precision division digital computers unlike earlier methods stein pope present method suitably rounded form normalized divisor estimate quotient characters results correction minus estimate obtain exact quotient character believed method widely applicable division operations variable word length character oriented machines
1293 method randomness nonrandom properties commonly random number generator analyzed
1294 note triple precision floating point arithmetic bit numbers recent paper gregory raney technique double precision floating point arithmetic similar technique developed triple precision floating point arithmetic purpose note describe technique multiplication division algorithms addition subtraction algorithm obtained trivial modification algorithm gregory raney paper
1295 pert time calculations topological ordering simplified technique presented pert time calculations topological ordering event assigned unique memory location activity represented link link defined memory location address memory location time information activity carried link typical net majority activities bit cell remainder bit cells links unidirectional forward calculation expected completion time activity backward calculation time latest allowable completion activity calculations progress net topologically net represented topologically core
1296 ative algorithm
1297 steep algorithm
1298 adaptive numerical integration simpson rule algorithm
1299 solutions diophantine equation algorithm
1300 function minimization algorithm
1301 algol conventions
1302 parallel signaling speeds data transmission proposed american stand ard
1303 correspondence algol church lambda notation part ii
1304 rapid turnaround multi programming system paper basic features system characteristics control algorithm multi programming system rapid turnaround time
1305 internal structure fortran cep translator fortran cep translator converts source program written fortran cep language object program written language cep computer paper outline cep computer internal structure translator emphasis compilation expressions input output lists subscripted variables
1306 class unambiguous computer languages discussed paper concept fully nested computer language means designing computer languages completely free ambiguities suggestions redefinition algol fully nested language
1307 lightpen controlled program line data analysis paper describes technique designed ease data processing system person scientist intimately primarily concerned interpreting significance data handled system person unable spend time master programming language essential aided composing commands computer system user required learn remember vocabulary language vocabulary displayed menus means computer drive scope selects vocabulary elements required pointing light pen small unordered set rewriting rules applied result light pen selections user generates syntactically correct commands system learn remember grammar program restricts user severely language method communicating program makes restrictions natural unconstraining program successfully ten months
1308 mathematical model mechanical part description flexibility mathematical model takes advantage common information requirements computer aided engineering drawing numerical control tape generation physical characteristic computation judicious control man machine communication requirements improved results conventional engineering design processes english input language tailored draftsmen designers describe part output desired approach mathematical model consists group surface defining quadric equations created system modular subprogram subprograms convert mathematical model instructions driving automatic drafting machines numerical controlled machine tools physical part characteristics center gravity computed subprograms dynamic analysis work proposed system presented experiments demonstrations discussed
1309 computer user oriented system computer language system developed makes fast preparation management reports computational complexity format variety costs sufficiently low individually tailored reports prepared manager system requires initial preparation large data banks data elementary form special languages extract matran permits selective extraction data subset efficient processing computational sequence flexible presentation results tabular graphical form matrix algebra fundamental vehicle accomplishing manipulation computation
1310 rapid braille transliteration technique ibm machines
1311 efficient autocorrelation
1312 recursion iteration
1313 construction nonlinear programming test problems
1314 organization symbol tables efficient symbol table organization important feature design compiler construction virginia algol compiler burroughs primary consideration symbol table design recognition identifiers reserved words rapid general features technique
1315 automation radioisotope accountability system radioisotope service veterans administration hospital omaha nebraska manual system radioisotope accountability years procedure satisfactory time consuming converted manual fully automated computer system january program purchased radioisotopes written format fortran ibm computer program maintaining accountability reactor created radioisotopes written forcom programming language minimum amount bookkeeping required reactor operating staff united states atomic energy commission regulations records system detailed records container radioactive material purchased created triga reactor indicating amounts received transferred health physicist disposal consolidated records total amounts received disposed period time purchased radioisotopes reported millicuries reactor created radioisotopes microcuries
1316 bessel functions kind algorithm
1317 poisson charlier polynomials algorithm
1318 arccossin algorithm
1319 crout equilibration iteration algorithm
1320 inverse permutation algorithm
1321 outreal algorithm
1322 netflow algorithm
1323 correspondence algol church lambda notation part paper describes semantics algol formalized establishing correspondence expressions algol expressions modified form church notation model computer languages compute behavior based notions functional application functional abstraction analogues imperative language features model abstract object language algol mapped algol features emerge arrangements small number structural rules suggesting classifications generalizations correspondence informally illustrations part paper formal description abstract compiler abstract objct language presented purely functional notation application abstraction
1324 answering english questions computer survey fifteen experimental english language question answering systems programmed operating reviewed systems range conversation machine programs make sentences pictures systems translate english logical calculi systems classified list structured data based graphic data based text based inferential principles methods operations detailed discussed concluded data base question answer passed initial research early developmental phase difficult important research questions advancement general purpose language processors concerned measuring dealing ambiguities translating formal languages searching large tree structures
1325 remote line real time computer diagnosis clinical electrocardiogram presented paper report hardware software system configuration function system remote online real time digital computer diagnosis clinical electrocardiograms efforts sort lead satisfactory solution problem automatic diagnosis electrocardiograms current attempts authors extend diagnostic capabilities present system concerned increasing fidelity adaptive matched filters development dimensional pattern analysis analysis parallel electrocardiographer computer diagnostic interaction study possibility introducing major tree branching decisions early diagnostic process
1326 boundary networks feasible computer procedure determining total partial inclusion arbitrarily points lines respect set general polygonal domains partition plane bounded region scheme computer representation boundaries domains algorithm based scheme evaluating inclusion relations detail method employs levels selection criteria purpose reducing number accesses auxiliary storage devices amount boundary data processing required
1327 decision tables computer programming decision table tabular form displaying decision logic decision tables inherent advantages technique illustrated puts advantages enables program directly decision table technique based creation binary image limited entry decision table computer memory binary image set input conditions created data image scan decision table image arrive proper action advantages gained programming point view amount computer memory drastically reduced programming simplified documentation clear
1328 remarks reducing truncation errors
1329 simulation boolean functions decimal computer
1330 automated plotting flow charts small computer
1331 code structures protection manipulation variable length items items made variable number characters number bits control information partition symbols inserted mark separations errors identification control characters lead trouble methods protecting symbols bit code assignment alphanumeric characters fixed word length computers suitability error detection variable length item manipulation shown flexibility arithmetic operations
1332 subroutine assembly description assembly system requires pass maintain table information subroutine library
1333 reducing truncation errors cascading accumulators accumulating large number quantities numerical integration sum larger individual addends results truncation error error eliminated cascading accumulators noted recent article wolfe simpler slightly flexible algorithm presented deals case negative addends
1334 mechanization tedious algebra newcomb operators planetary theory computer program written generate tables formulas newcomb operators planetary theory newcomb operators expressed polynomials variables stands simple differential operator arbitrary integer polynomials generated recurrence scheme program coded fortran simple array manipulation techniques perform algebraic operations formulas newcomb operators produced program typeset photographically photon system
1335 character set optical character recognition proposed american stand ard
1336 npl highlights programming language
1337 euler generalization algol formal definition
1338 additional comments problem concurrent progamming control
1339 contribution development algol
1340 multiplexing slow peripherals philosophy monitor slow output devices multiplexed presented
1341 levels computer systems building current computer systems tend break levels control command communication system break problems correspondingly continued structure raises questions effects usefulness future systems regard trends time sharing parallel programming eventually systems learn essay questions posed general attitude pursuing problem discussed
1342 transportation problem algorithms
1343 havie integrator algorithm
1344 statistical computations based algebraically models based machine readable statistical model related symbolic specifications efficient method performing calculations statistical models balanced complete nature presented fixes mixed random analysis variance models considered procedure obtaining variance components calculated statistics model terms included
1345 tensor calculations computer formac program written capable calculating quantities interest tensor calculus code christoffel symbols calculated basic orthogonal coordinate systems
1346 application process equalization maxima obtain rational approximation modified bessel functions remes algorithm originally established polynomials converge approximating functions rational results domain show efficient algorithm obtain approximations small error polynomial case approximation approached directly series development aim paper investigate limitations applicability extensions algorithm case approximations rational present numerical results
1347 general time varying systems error sensitivities program evaluation propagation variance technique sensitivity time varying systems initial condition parameter errors involves determination system dependent partial derivative matrices requirement led separate programs system investigation program utilization wengert differentiation technique automatically determines required matrices specific system equations supplied subroutine form execution time eliminating individualized programs presaging development extremely general computer programs
1348 flowtrace computer program flowcharting programs flowtrace system produces flowcharts programs written programming language describe syntax control statements language purpose metalanguage resultant object deck flowchart programs language examples fap snobol flowcharts confine scope existing languages define language structured manner feature desirable chart comments program approach permits documentation descriptive remarks avoids inclusion coding details
1349 computing capabilities western european universities report author trip universities western europe summer descriptions computing activities institution visited present equipment capabilities vary moderate large scale institutions plan acquire complex time shared systems future author opinion state art lags continent lag attributed principal factors handicapping organization academic procedures university government financial relationship subordinated organization computing facility paucity professional interchange knowledge effects constraints explicated
1350 augmented predictive analyzer context free languages relative efficiency proven greibach context free grammar standard form grammar gs constructed generates languages generated rules form cy intermediate symbols terminal symbol predictive analyzer harvard standard form grammar accept language context free grammar equivalent standard form grammar gs structural descriptions sd gs assigned sentence predictive analyzer structural descriptions sd assigned sentence original context free grammar gs derived section algorithm originally due abbott standard form grammar rules standard form supplemented additional information describing derivation original context free grammar technique performing sd gs sd transformation effectively section augmented predictive analyzer parsing algorithm arbitrary context free languages compared parsing algorithms selective top bottom algorithm similar irons error correcting parse algorithm constituent analyzer extension sakai cocke algorithm normal grammars comparison based criteria efficiency covering core storage requirements complexities programs processing time
1351 automatic error bounds real zeros rational functions procedure implementing interval arithmetic version newton raphson method proposed procedure require starting interval zeros rational function located method automatically bounds roundoff error
1352 automatic integration function parameter efficient methods automatic numerical integration romberg integration adaptive simpson integration integrands form parameter shown romberg method efficient fortran program shows achieve greater efficiency
1353 techniques automatic tolerance control linear programming technical note numerical steps simplex method linear programming reviewed tolerances needed numerical procedure defined objective criteria accomplishing numerical steps method calculation tolerances
1354 conversion decision tables computer programs rule mark techniques rule mask technique method converting limited entry decision tables computer programs recent discussion suggest circumstances preferred technique constructing networks trees drawback technique hitherto presented liability produce object programs longer run time paper modification technique discussed takes account rule frequencies relative times evaluating conditions materially improve object program run time
1355 regular coulomb wave functions algorithm
1356 havie integrator algorithm
1357 examination scheduling algorithm
1358 syntax macros extended translation translation approach extended syntax semantics high level base language formalism called syntax macro syntax macros define string transformations based syntactic elements base language types macros discussed examples conditional generation macros based options alternatives recognized scan
1359 data filtering applied information storage retrieval applications manipulation data strings complex processing function information storage retrieval applications data string manipulation discussed context interpretive processing environment controlled procedural directives sequence procedural directives derived job assumed expressed user oriented source language data string structured data environment data bank explicitly implicitly related format declaration residing format library processing mechanics data string manipulation developed accordance generalized data filtering concept results implementation part data filter module satisfies internal processing functions filtering data strings format declarations input output ports
1360 description systems data transmission asa tutorial
1361 rectangular holes twelve row punched cards proposed american standard
1362 code extension ascii asa tutorial american standard code information interchange ascii number control characters principle code extension representation information directly represented means characters code manner characters previously completely paper presents set mutually consistent philosophies code extension applications suggests corollary set doctrines application code extension characters distinctions drawn code extension concepts graphic substitution syntactic representation meet similar requirements covered topics concerned code extension linked discussion code applications material paper equally applicable principle proposed iso international bit code information interchange
1363 general method systematic interval computation numerical integration initial problems procedure continuously computing monitoring step size starting order numerical integration method solve initial problem procedure estimate truncation error calculate step size
1364 mathematical experimentation time lag modulation equations form du dt arise number scientific contexts authors point interesting properties solution sin wt sin properties obtained means numerical solution
1365 eliminating monotonous mathematics formac formac formula manipulation compiler programming system powerful tool performing mathematical analysis extension fortran iv permits computer perform tedious algebraic computations arise fields areas successfully differentiation complicated expressions expansion truncated power series solution simultaneous equations literal coefficients nonlinear maximum likelihood estimation tensor analysis generation coefficients equations keplerian motion types analysis arose solution specific practical problems physics engineering astronomy statistics astronautics discussed paper addition usage specific problem solutions formac automate analysis phase production programming applications presented
1366 computer simulation discussion technique comparison languages purpose paper present comparison computer simulation languages involved comparing software packages digital computers discussed part issue obvious users digital computers choose languages write substantial costs occur training implementation computer time inappropriate language chosen computer simulation languages developed comparisons evaluations existing languages designers implementers users part devoted computer simulation simulation languages computational characteristics simulation discussed special attention paid distinction continuous discrete change models part iii presents detailed comparison simulation languages packages simscript clp csl gasp cpss sol characteristics summarized series tables implications analysis designers languages users implementers developed conclusion paper packages computer simulation offer features general purpose packages analysis strengths weaknesses suggests ways current future simulation languages packages improved
1367 character structure character parity sense parallel bit data communication ascii proposed american standard
1368 systematic generation hamiltonian circuits combinatorial matrix directed nondirected arcs paper describes computer program generates systematically exhaustively hamiltonian circuits specific application made traveling salesman problem
1369 half rotations dimensional euclidean space iterative procedure determining half rotations dimensional euclidean space method variant cyclic jacobi procedure utilizers elementary plane rotations obtain half rotation matrix numerical examples
1370 linear equations exact solutions algorithm
1371 logarithm gamma function algorithm
1372 direct search algorithm
1373 gamma function gamma function range reciprocal gamma function real argument gamma function logarithm gamma function algorithms
1374 evaluation determinant determinant evaluation algorithms
1375 function minimization algorithm
1376 modified graeffee method algorithm
1377 pseudo random numbers algorithm
1378 pseudo random numbers algorithm
1379 final solution dangling algol related languages dangling problem consists class potential ambiguities algol conditional statements basic form boolean expressions basic statements difficulty lies attach existing solutions problem ambiguous unnecessarily restrictive sand statements define closed statement open statement unconditional statement closed statement open closed conditional statements defined syntax equations preserve openness closure case preceded closed statement shown syntax equations unambiguous change statement types required syntax equations lead ambiguity unnecessary restriction
1380 simula algol based simulation language paper introduction simula programming language designed provide systems analyst unified concepts facilitate concise description discrete event systems system description serves source language simulation program simula extension algol important concepts quasi parallel processing
1381 impact computers undergraduate mathematics curriculum computers permit widespread application mathematical ideas requiring computation science technology extremely significant understanding current society student interest development intense properly utilized yield understanding mathematical concepts ideas programming logical structure introduced fields computers present paper suggests portion undergraduate mathematical curriculum preparation mathematics persons professional mathematicians modified include extensions clarifications computers early introduction programming desirable permit continuing automatic computation illustrate clarify mathematical concepts calculus equation stage intensive introduction numerical analysis added current curriculum addition providing competence computing techniques permit sophisticated utilization advanced mathematical ideas complex variables transform theories
1382 desired computer impact undergraduate mathematics matters relating theme symposium discussed author examines projections supply demand mathematicians united states mid comments briefly factors influence professional activities applied mathematicians years discusses broad terms information relate undergraduate training mathematicians
1383 implications digital computer education mathematical sciences digital computer profoundly altered definition interesting mathematics importance applied logic human affairs changed existence logical engine result longer terms single discipline mathematics terms complex mathematical sciences
1384 mathematics undergraduate computer scientists mathematical requirements undergraduate program computer science subject debate association computing machinery curriculum committee believes requirements essentially mathematical content physical sciences undergraduate programs committee believes requirements assure student broad mathematical background enable wide variety courses scientific disciplines committee concern develop solid scientific approach computer science
1385 computer technology communist china based information translations communist chinese news items periodical literature period computer technology china reviewed headings initial planning organization educational aspects computer technology automation machine development progress major specific machines soviet aid vacuum due withdrawal soviet aid chinese made machines present computer applications trend automation control production processes data processing yun ch ou hsueh science operation programming campaign attempt made bring concepts linear programming ordinary chinese workers peasants communist china adjudged marginal computer capability machines binary nature turning point reached mid
1386 symbolic factoring polynomials variables algorithm finding symbolic factors multi variate polynomial integer coefficients presented algorithm extension technique kronecker proof prime factoring polynomial found finite number steps algorithm consists factoring single variable instances polynomial kronecker method introducing remaining variables interpolation techniques implementing algorithm examples discussed algorithm promises sufficient power efficiently online system symbolic mathematics
1387 solution systems polynomial equations elimination elimination procedure williams coded lisp formac solving systems polynomial equations found method effective case small systems yields solutions initial estimates method appears solution large systems equation due explosive growth intermediate equations hazards arise coefficients truncated comparison made difficulties found problems numerical mathematics symbolic integration simplification
1388 automast automatic mathematical analysis symbolic translation procedure numerically solving systems ordinary differential equation shown generate symbolic solutions procedure based finite taylor series expansion includes estimate error final result computer program reads system equations generates expansions dependent variables expansions determined symbolically numeric parameters original equations carried automatically final expansions exact influence parameters problem solution easily displayed
1389 programmer description bell telephone laboratories low linked list language pronounced programming language list structure manipulations facilities underlie list processors ipl lisp comit ad snobol permits user closer machine code order write faster running programs storage efficiently build wider variety linked data structures
1390 convert programming language applicable problems conveniently transformation rules meant patterns prescribed skeleton series pairs searched pattern found matches expression transformed conditions match governed code subexpressions identified eventually substituted skeleton primitive patterns primitive skeletons principle elaboration complicated patterns skeletons advantages language apply transformation rules lists arrays easily strings patterns skeletons defined recursively consequence programs stated concisely
1391 computer experiments finite algebra medium scale programming system written mad fap ibm manipulate objects modern algebra finite groups maps sets maps subsets sets subsets constant integers truth values designed operate time sharing environment system serve teacher aid undergraduate student modern algebra working scientist engineer wishing familiarize subset
1392 experience formac algorithm design facets design implementation mathematical expression manipulation algorithms discussed concrete examples provided formac expand differentiation algorithms basic formac utility routine experiment extraction skeletal structure expression recurrent theme avoid excessive intermediate expression swell order minimize core storage requirements details formac implementation presented attempt made stress principles ideas general relevance design algorithms manipulating mathematical expressions
1393 pm system polynomial manipulation pm ibm program system formal manipulation polynomials number variables integral coefficients unrestricted size formal operations performed system sums differences products quotients derivatives substitutions greater common divisors pm based refco iii list processing system compared lisp slip systems pm subroutines arithmetic large integers constituting independently subsystem pm compared alpak system respects including choice canonical forms polynomials algorithm polynomial greatest common divisor calculation mentioned exaples included illustrate superiority
1394 computation algebraic properties elementary particle reactions digital computer large number calculations high energy elementary particle physics involve manipulation complicated algebraic expressions tensor noncommutative matrix quantities calculations months complete operations involved follow straightforward rules paper program developed lisp solving problems manner problems encountered outlined representation computer discussed present months human work takes fifteen minutes ibm limitations present system future plans outlined
1395 implementation ambit language symbol manipulation description implementation technique replacement rule ambit programming language algorithm ambit scan application algorithm applicable members family string transformation languages ambit member rationale design ambit language
1396 survey formula manipulation field formula manipulation surveyed attention specific capabilities differentiation integration supporting capabilities simplification displays input output editing precision arithmetic general systems batch online finally programs solve specific applications discussed
1397 proceedings acm symposium symbolic algebraic manipulation acm symposium symbolic algebraic manipulation brought hundred people interested programming languages designed manipulation algebraic formulas symbol strings applications algorithms implementation twenty papers presented lively panel discussion future directions evening meetings arranged interest groups conference sponsored acm special interest committee symbolic algebraic manipulation program committee consisted chairman jean sammet paul abrahams thomas cheatham max goldstein douglas mcllroy conference arrangements made lewis clapp daniel bobrow james griesmer robert floyd editor
1398 robot data screening solution multivariate type problems biological social sciences approach outlined solution type multivariate problem found biological social sciences medicine approach logical statistical criterion variables grouped deterministic model algorithm developed variables analysis eliminated criteria acceptance variable termination searching process derived information theory
1399 top bottom recognition left recursion procedure obtaining structural descriptions context free grammar performing recognition strongly equivalent left recursion freegrammar effect allowing null strings rewriting rules discussed
1400 free text inputs utility routines simple techniques frequently produce program accept free text inputs techniques discussed related general tape manipulation routine
1401 quasilinearization calculation eigenvalues eigenvalue problems systems ordinary differential equations considered resolved computationally quasilinerization technique quadratically convergent successive approximation scheme related newton raphson kantorovich method
1402 partial step integration partial step integration equation derived adams adams bashforth method integration differential equations method obtaining functional values points intermediate integration points yields accuracy comparable integration require storing additional information interpolation methods
1403 method finding smallest values monotonic function defined ordered sets positive integers minimum monotonic increasing function defined partially ordered set assumed set minimal points observation devise efficient method finding smallest functional values monotonic functions defined ordered pairs positive integers method easily extended include monotonic functions defined ordered tuples included fortran program written implement procedure important case
1404 computational aspects multiple covariance analysis multifactor structure computational procedure analysis multiple covariance statistics discussed reference analysis variance special operator calculus developed hartly programming analysis variance multifactor experiments extended cover analysis covariance extension accomplished utilizing connection analysis covariance analysis variance introducing operator results illustrated numerical analysis covariance basic computations shown carried analysis variance program
1405 matrix triangulation integer arithmetic algorithm
1406 solution simultaneous linear diophantine equations algorithm
1407 confidence interval ratio algorithm
1408 eschenbach drum scheme prime function drum operating real time perform accesses quickly usual means increasing capacity incorporate engineering hardware improvements paper problem attacked changing drum modifying manner operates outset drum functional definition simple design scheme eschenbach introduced enormously increases rate accessing drums defined shown enable system perform job employing fewer expensive drums suggested design scheme specific method underlying general applicability question efficacy drum scheme raised deal standard efficiency developed light realistic real time circumstances drum scheme modelled manner permits analyzed problem queueing theory enabled ascertain drum scheme efficient application analysis drum scheme specific methods underlying general applicability
1409 nebula digital computer mc glass delay line memory oregon state university designed constructed medium speed serial digital computer glass delay lines circulating mc memory design objectives originally conceived special seminar research project computer design usable educational machine easily modifiable hardware basic research computer systems design unusual arrangement information mc memory simple interface kc arithmetic unit results effective latency time possibilities associative memory arithmetic unit command structure similar large parallel machines flip flop arithmetic control registers hardware development aimed concept easy modification elaborate console controls effective man machine interaction low cost
1410 interarrival statistics time sharing systems optimization time shared system performance requires description stochastic processes governing user inputs program activity paper statistical description user input process sdc arpa general purpose time sharing system tss input process assumed stationary defined interarrival time distribution data obtained justify satisfactorily common assumption interarrival times serially independent data justify rough approximation usual assumption exponential distribution interarrival time satisfactory approximation data obtained biphase triphase hyperexponential distribution
1411 comparison algorithms computation means standard deviations correlation coefficients algorithms computation basic statistics compared performance systematically generated test data statistics calculated standard deviation correlation coefficient statistic algorithm included usual computing formulas correction due accumulated error term recursive computation current statistic usual computing formulas evaluated double precision large errors noted calculation usual computing formulas reliable technique correction initial estimate accumulated error term eliminate making passes data suggested initial estimate obtained subset data
1412 banking information system concept large commercial banks progressed point major accounting applications automated sophisticated usage data processing equipment sought coupled availability equipment suited real time direct access processing led development banks central file data base approach banking information system banking information system serves fold purpose providing real time responses inquires individual account stasus providing complex combinations information management kinds processing draw common store data contained direct access central file data base includes indexes facilitate cross referencing account information relationships bank customer discerned introducing banking information system concept gradual approach account cross referencing file conversion prudent generally system interface computer applications existing bank
1413 vision technology education educational technology fashionable branches aspects technology generation ideas discoveries inventions unknown potential actual time scale ignorance stems largely ignorance social response potential technological change object paper present vision potential educational technology raise questions modes social response adaptation evoked vision
1414 twelve row punched card code information interchange proposed american standard
1415 automatic derivation microsentences decomposition long complex english sentences shorter kernel constituent sentences microsentences suggested avenue conducting automatic retrieval natural language messages explore prospects step authors attempted prepare general program deriving microsentences longer sentences syntactically analyzed harvard multipath analysis program basic idea extract subject verb object clause reassemble materials grammatical microsentence program paper designed operate tree structure output analyzer microsentences produced exhibited authors conclude microsentences quality achieved open prospects improving performance automatic message retrieval systems practical man machine systems human monitors select preferred syntactic interpretation sentence
1416 fortran technique simplifying input report generators typical report generators production standard forms tabulating magnetic tape file extraction nonstandard sets information suitable annotation involves troublesome forms design method information extraction involving calculation suitable fortran format statements combats problem
1417 economies scale ibm system cost functions system models analyzed examinations instruction times program kernels typical instruction mix comparisons made data developed grosch law applicable data sizable economies scale unquestionably present computing equipment
1418 examination scheduling algorithm zh
1419 chebyshev quadrature algorithm
1420 uniform pseudorandom number generator multiplicative congruential pseudorandom number generator discussed modulus largest prime accumulator capacity multiplier primitive root prime generator passes usual statistical tests addition significant bits random significant bits property generators modulus possess
1421 contribution development algol programming language similar respects algol incorporating large number improvements based years experience language detail part consists introduction language summary made algol discussion motives visions part ii rigorous definition proposed language part iii describes set proposed standard procedures language including facilities input output
1422 eleven sixteenths inch perforated paper tape proposed american standard
1423 simple algorithm computing generalized inverse matrix generalized inverse matrix important analysis extension concept inverse applies matrices applications numerical analysis widely existing algorithms fairly complicated require considerable storage space simple extension found conventional orthogonalization method inverting singular matrices generalized inverse extra effort additional storage requirements algorithm generalized inverse matrix including special case singular case rank case algorithm ordinary inverse case algorithm yields ordinary squares transformation matrix inv advantage avoiding loss significance results forming product explicitly
1424 automatic analysis electronic digital circuits list processing mapping black diagrams digital circuits list structures list processing program written control data mapping automatically carry circuit analysis
1425 flow diagrams turing machines languages formation rules part paper flow diagrams introduced represent inter al mappings set diagram decomposable finite number base diagrams true semantical level due suitable extension set basic mappings defined normalization methods flow diagrams base diagrams part paper method applied theory turing machines turing machine provided half tape similar machine essentially job working tape obtained interspersing alternate blank squares machine belongs family introduced generated composition iteration machines family proper subfamily family turing machines
1426 simulation hospital admission policy study simulates admission policies large specialized hospital objective determine policies stabilization admission census rates maintaining full hospital types policies examined admission based percentages discharge rates discharge rates minus constant fixed authorizations independent discharge rates type policy produced stable simulated results put practice improvements realized
1427 simulation radioisotope scans computer radioisotope scanning field assuming increasing importance medical diagnosis scan dimensional pattern made dots areas increased source activity represented scan areas increased dot density study output scanners characteristics program simulates radioisotope scans written pdp computer auxiliary disk storage cathode ray tube display past present research output simulator shown flexibility system important structure program simulation output quantum limited system
1428 shock iii computer system aid management critically iii patients shock iii online digital computer system assist physician nurse paramedical personnel monitoring reporting critically ill patients
1429 matrix reduction hungarian method generation school timetables application kuhn hungarian method problem matrix reduction needed gotlieb method timetable generation method suited hand computer calculation devices improve efficiency basic algorithm discussed
1430 multiple precision floating point conversion decimal binary vice versa decimal binary binary decimal floating point conversion performed table powers ia positive integer converting base base table coefficient polynomial approximation converting base base tables occupy large storage region case nonsingle precision conversion paper shows single small table suffices floating point conversion decimal binary vice versa precision
1431 storage mapping function data structures basic facts data structures reviewed efficient algorithm presented constructing storage mapping function structure structure definition
1432 incorporation nonstandard input output devices fortran systems fortran system readily modified handle input output nonstandard media basis handles standard media providing character handling subroutine suited nonstandard medium arranged called unused output statement type unit number method control output alphanumeric information digital graph plotter
1433 note linear programming algorithm design combinatorial problem linear programming models grow bigger bigger size actual data memorized put magnetic tape disk improportionality fast rise consumption computer time cut expense increasing effort made design efficient algorithms paper meant support effort attempted find characteristics pivot column found number repetitions transfer data tape core memory considered simplification problem restated general generating function probability distribution moment generating function number repetitions found asymptotic formulas moments result paper narumi results applied write efficient routines search extreme table formulas provide means calculating computer timings case
1434 monte carlo algorithm assigning students classes technique random choice illustrated application problem assigning students fixed schedule courses technique reduce eliminate difficulties result popular section filled closed students requesting requiring scheduled effectiveness automatic scheduling retained loss students privilege picking favorite instructors
1435 design computer simulation experiments industrial systems aim paper provide background information existing literature experimental design techniques applicable design computer simulation experiments industrial systems major emphasis analysis variance techniques techniques data analysis considered multiple ranking procedures sequential sampling spectral analysis paper treats specific experimental design problems techniques solving experimental design problems problem stochastic convergence problem factor selection problem motive response problem
1436 interchange blocks data algorithm
1437 mutual primal dual method algorithm
1438 method locating zeros complex functions method computing index winding number developed applied problem finding zeros functions plane plane
1439 mechanization curve fitting process datan process fitting curve approximate data problem creates engineer programmer defined approach defined system written sru mechanize major portion process techniques developed accomplish mechanization largely empirical dependent information actual data points
1440 starting approximations square root calculation ibm system starting approximations square root calculation newton method presented form facilitate ibm system square root routines approximations include range interval primary interest ibm system
1441 methods numerical integration applied system trivial function evaluations study made determine methods numerical integration require computation time amount truncation error applied system ordinary differential equations function evaluations trivial recent methods due butcher gear compared classic runge kutta kutta nystrom adams methods newer step methods due butcher found slightly superior method found great advantage application problem
1442 recorded magnetic tape information interchange cpi nrzi proposed american standard
1443 method finding squares estimate intersection point helices space helical trajectories charged particles moving common point magnetic field reconstructed measurements tracks reconstructed tracks perturbed measurement errors general intersect method adjusting reconstructed tracks squares manner intersect
1444 algorithm generating projective reduction formulas matrix elements electron wavefunctions algol procedure automatically generating formulas matrix elements arising variational solution schrodinger equation electron systems
1445 computer teach introductory statistics obvious aid calculation offered computer forces change curricula mathematics statistics physics engineering courses obvious pedagogic aids computer offer teaching subject matter possibilities giving student technical conceptual understanding statistics explored number years college medicine university cincinnati reported
1446 chebyshev quadrature algorithm
1447 abscissas weights gregory quadrature
1448 abscissas weights romberg quadrature algorithm
1449 derivatives algorithm
1450 simultaneous displacement polynomial roots real simple algorithm
1451 runge kutta integration algorithm
1452 kutta merson algorithm
1453 nonrecursive method syntax specification kleene regular expression notation describing algebraic language syntax algol paper fortran ii computer program carrying elimination algorithm gorn similar gaussian elimination linear systems algebraic equations applied numerous smaller languages including sublanguage algol hand calculation result application algorithm algol expressing revised algol syntax completely nonrecursive terms context free portion concerned description ways intuitively understood previous recursive description suggested paper includes results machine program include simplification algorithm
1454 simple user oriented compiler source language programming automatic test equipment nonprogrammer difficulty language increases rapidly number nonproblem oriented conventions simple language inelegant considers user background part problem effective source language subtle powerful capabilities language paper write computer programs test electronic equipment testing process complex ideas elegance redundancy highly syntax oriented language simple direct language suffice problem eventual users language military depot personnel expected computer programming skill significant programming training nonprogramming oriented user essential create language familiar engineering statements programming oriented conventions unnecessarily complicated task
1455 trac procedure describing language reactive typewriter description trac text reckoning compiling language processing algorithm trac language developed basis software package reactive typewriter trac language write procedures accepting naming storing character string typewriter modifying string treating string time executable procedure text printing string trac language based extension generalization character strings programming concept macro ability trac accept store definitions procedures capabilities language indefinitely extended deal character strings integers boolean vector variables
1456 storage retrieval aspects meaning directed graph structures experimental system lisp make conceptual dictionary dictionary associates english word syntactic information definitional material references contexts define words relations class inclusion possession active passive actions definitional material resulting structure serves powerful vehicle research logic question answering examples methods inputting information answering simple english questions important conclusion lisp list processing languages ideally suited producing complex associative structures inadequate vehicles language processing large scale east auxiliary memory continuous extension core memory
1457 data manipulation programming problems automatic information retrieval automatic information retrieval programs require manipulation variety data structures including linear text sparse matrices tree list structures main data manipulations performed automatic information systems briefly reviewed variety data representations describe structured information examined characteristics processing languages outlined light procedures requiring implementation advantages programming languages retrieval application examined suggestions made design programming facilities aid information retrieval
1458 online programming transition made line online programming number working conditions noted environment make processes related producing checking programs main programming language changed provide facility online user system surrounding programming language paper online environment effect programming discussed
1459 requirements real time languages real time languages requirements programming languages special nature applications environment object programs executed environment compiled language extensions ultimately advance developments field progress made attacking special compiling executing system problems solved
1460 evolution meta assembly program generalized assembler called meta assembler meta assembler defined factors contributed evolution presented meta assembler made function assembly program finally implication meta assemblers compiler design discussed
1461 discussion summary operating systems
1462 multilevel operating systems basic software newer computers built established standard operating systems implies applications matter large complex time consuming operate precisely top standard system large applications require supervisory monitors handle problems similar operating systems level fourth level required desirable leads naturally concept multilevel systems similar vertically horizontally proper division responsibility levels leads greater efficiency logical complexity enhancing capability
1463 extensible machines salient characteristics extensible machines em facility providing system control program program program data linkage address connection intent paper expand clarify remarks program program program data linkage embodied authors previous paper em concepts finally trace employment linkage mechanisms levels programming languages
1464 algol compiler construction relation elaborate operating system algol translator prepared integrated ibsys operating system assembly features ibsys permit execution optional listings decks debugging information chain feature ibsys links written map fortran algol called algol main program addition procedures coded map included algol program assembly loading time exceeds compilation time total time satisfactory user ease facility fully compensating
1465 program translation viewed general data processing problem efficiency dictates effectiveness compiler increased means compiler substantial life clear logical structure reliability sound data processing techniques compiler based fixed conventions preserve efficiency reliability empty options default conventions violate dictum structure associate parts program economy features promote clarity reliability
1466 discussion summary graphical languages
1467 graphical servicesystem variable syntax man machine interaction fields endeavor greatly facilitated future interactive graphical languages provide variety display scope communication procedures graphic service system functions generalized graphical language translator developed aid definition graphical languages
1468 syntax directed interpretation classes pictures descriptive scheme classes pictures based labeling techniques parallel processing algorithms proposed author years ago work applying bubble chamber pictures parallel processing simulator originally written ibm system rewritten cdc system paper descriptive models specific application bubble chamber pictures description generated phase embedded larger conversation program explained means specific worked partial generative grammar handwritten english letters computer generated outputs grammar parallel processing simulator mentioned earlier
1469 programming languages family unimplemented computing languages intended span differences application area unified framework framework dictates rules user coined names conventions characterizing functional relationships framework design specific language splits independent parts choice written appearances programs generally physical representation choice abstract entities numbers character strings lists functional relations referred language system biased expressions statements includes nonprocedural purely functional subsystem aims expand class users met single print instruction sacrificing important properties make conventional hand side expressions easy construct understand
1470 structure programming languages identified major components programming language elementary program statement mechanisms linking elementary statements means program obtain data inputs alternative forms components compared evaluated examples frequently list processing languages illustrate forms elementary program statements form commands requirements implicit specifications command imperative statement commands action requirement describes effect achieved actions implicit specification similar requirement programmer understand actions achieve desired effect subroutines entered explicitly execute call function composition explicitly called subroutines generally require special linkage conventions execute subroutine call syntactically indistinguishable basic instruction programming language function composition convenient alternative explicit call principal ways inputs routines referring data referring data referring implicitly means variables functions names entry points permanent data structures error causing distractions contexts author discusses advantages disadvantages factors influencing choice form component language concludes suggesting evolution programming languages permit convenient ways structuring programs organizing systems referencing data
1471 programming semantics multiprogrammed computations semantics defined number meta instructions perform operation essential writing programs multiprogrammed computer systems meta instructions relate parallel processing protection separate computations program debugging sharing users memory segments computing objects names hierarchically structured language sophistication contemplated midway assembly language advanced algebraic language
1472 description high capacity fast turnaround university computing center operating system univac case institute reviewed system interest low turnaround times achieved high throughput achieved lack operating staff turnaround times minutes job volume quarter year reported
1473 stability fourth order runge kutta method solution systems differential equations problem region stability fourth order runge kutta method solution systems differential equations studied region characterized means linear transformation closed form paper region determined electronic digital computer
1474 tests probabilistic models propagation roundoff errors prolonged computation generally assumed accumulated effect roundoff errors sense statistical purpose paper give precise descriptions probabilistic models roundoff error describe series experiments testing validity models concluded models general good discrepancies rare mild test techniques experiment types special arithmetic
1475 dribble posting master file business applications employ sequential magnetic tape random access storage techniques process small number transactions voluminous master file situations prove economical avoid creating master file updating run producing dribble ledger master file accounts experienced activity
1476 control procedures data communication asa progress report sectional committee american standards association charged task groups responsibility define functional control requirements characteristics governing operation digital data generating receiving systems interconnected communication system effort primarily directed systems employing american standard code information interchange ascii paper represents progress report work group proposal national international standardization field control procedures describes work task group work presented detail work presented earlier papers control procedures data communication task group document transparent mode control procedures data communication task group document december comm acm apr control procedures data communications task group document march retained summary form concepts principles submitted international organization standardization earlier papers embodied working papers organization
1477 euler generalization algol formal definition part ii
1478 exponential curve fit algorithm
1479 constrained exponential curve fit algorithm
1480 computation chebyshev series coefficients algorithm
1481 graph plotter algorithm
1482 bugsys programming system picture processing debugging bugsys picture processing measuring system depends pictorial input computer memory bugsys types applications authors system analysis linear graphs main concept system collection programmable pointers visualized family bugs
1483 comparison fortran language implementation computers feature feature comparison made implementations fortran iv representing manufacturers table constructed showing feature implementation items added fortran ii shown
1484 language describing functions synchronous systems design system started exact function desired suggested computer oriented language purpose inadequacies standard programming languages description systems discussed dialect algol suitable describing synchronous systems introduced descriptions simulation automatic design system addition communicating system specifications
1485 structure programming languages paper major components programming language identified elementary program statement mechanisms linking elementary statements means program obtain data inputs alternative forms components compared evaluated examples frequently list processing languages illustrate forms advantages disadvantages factors influencing choice form component language discussed paper concludes suggestion programming languages evolve permit convenient ways structuring programs organizing systems referencing data
1486 reprogramming machine paper description model programming system directed programming language library storing user items rules transforming programs written language rearranging items library share common parts speculations made mechanical detection common parts patterns library items user solve problems relationships behavior reprogramming machine human intelligent behavior
1487 eliza computer program study ofnatural language communication man machine eliza program operating mac time sharing system mit makes kinds natural language conversation man computer input sentences analyzed basis decomposition rules triggered key words appearing input text responses generated reassembly rules selected decomposition rules fundamental technical problems eliza concerned identification key words discovery minimal context choice transformations generation responses absence key words provision editing capability eliza scripts discussion psychological issues relevant eliza approach future developments concludes paper
1488 programming decision tables fortran cobol algol simple broad based approach programming decision tables fortran cobol developed presented inputs standard form defined paper programming decision table fortran statements cobol statements compute verb cobol processor shown method applicable mutually exclusive states table conditions shown multi state conditions decision tables simplify programming method outlined advantage combinations conditions considered shown suggested procedure easily implemented algol
1489 data documentation decision tables business data processing systems define document data files programs decision rules adequately represents changing information content continuous interaction tabular description makes notably objective economical cost time systems analyzed programs prepared modified show quickly tabular techniques make unfamiliar system manageable detailed test provided
1490 inch perforated paper tape information interchange proposed american standard
1491 euler generalization algol formal definition part method defining programming languages developed introduces rigorous relationship structure meaning structure language defined phrase structure syntax meaning terms effects execution sequence interpretation rules exerts fixed set variables called environment exists correspondence syntactic rules interpretation rules determined sequence syntactic reductions constitute parse individual interpretation rules explained terms elementary obvious algorithmic notation constructive method evaluating text provided decidable classes languages unambiguity proved generalization algol full detail demonstrate concepts block structure procedures parameters defined adequately precisely method
1492 serrev algorithm
1493 generation hilbert derived test matrix algorithm
1494 complete elliptic integral kind algorithm
1495 solution transcendental equations series reversion algorithm developed expressing solution equation power series power series root algorithm illustrated equation ln ln
1496 formal semantics computer languages application compiler compiler semantic meta language developed representing meanings statements large class computer languages meta language basis construction efficient functioning compiler compiler informal discussion meta language based complete translator small language presented
1497 normalization requirement divisor divide correct methods paper presents analysis normalization requirement divisor divide correct method analysis made subject condition correction required obtain true quotient character trial estimate division precision segment partial remainder suitably rounded single precision divisor segmented division denoted precision basic division found normalization requirement narrowed smaller range divisors provided magnitude character leading character divisor normalization eliminated choose proper higher precision segments operands basic division considered possibility eliminating normalization increase number corrections quotient estimate precision basic division shown scheme economical small radices
1498 alcor illinois post mortem dump dump technique programs written algol technique intelligible analysis unsuccessful computation process terms original source program
1499 chebyschev curve fit revised algorithm
1500 chebyschev curve fit algorithm
1501 eigenvectors matrix eigenvalues matrix obtained smaller matrices order easily constructed algorithm obtain eigenvectors matrix eigenvectors smaller matrices
1502 online editor online interactive system test editing detail remarks theoretical experimental justification form emphasis system providing maximum convenience power user notable features ability handle piece text content searching facility character character editing operations editor programmed limited extent
1503 simscript fortran case study programs vehicle dispatching model written simscript fortran iv compared comparison made terms basic program design decisions storage requirements computer time ease making simscript program primary design considerations center choice model variables model changing events model testing fortran program basic design problems relate representation passage time allocation storage organization input data comparison differently designed programs shows simscript program computer storage computer time requires fewer program introduce model revisions
1504 algorithms finding fundamental set cycles undirected linear graph adjacency matrix graph algorithm presented paper finds spanning tree constructs set fundamental cycles algorithm slower algorithm presented welch ratio number nodes requires storage graphs large number nodes edges storage limited algorithm superior welch graphs small machine storage large welch algorithm superior timing estimates storage requirements methods presented
1505 system organization resource allocation paper introduces system resource management concepts process facility event processor attempt made give suggestions policy resource allocation basic framework provided system analyst express solutions resource management problems paper divided tutorial presentation description system primitives small collection examples primitives
1506 laconiq monitor time sharing online dialogues laconiq laboratory computer online inquiry monitor developed primarily support numerical applications retrieval large files means dialogue system user retrieval application monitor designed work small computer ibm system techniques resource allocation important reason core storage computational facilities input output scheduled unusual feature system event driven clock driven program segments called execution remote crt consoles invariably run completion rolled brought back time
1507 multiprogramming environment online data acquis ition analysis experimental system acquis ition analysis large bodies data derived scientific experiments architecture implementation largely based objectives characteristics general data analysis scheme early applications oriented investigation data obtained biological research problems encountered chosen approach discussed
1508 magnetic tape labels information interchange proposed usa standard
1509 recorded magnetic tape information interchange cpi nrzi proposed usa standard
1510 finding solution functional equations unknown algorithm
1511 damped taylor series method minimizing sum squares solving systems nonlinear equations
1512 solution simultaneous linear equations algorithm
1513 permutation algorithm
1514 expected gain adjust ing matched term retrieval systems file adjustment procedure based maximizing bayes expected gain proposed matched term retrieval systems expected gain probability distribution derived function prior proportion omitted terms coefficient separation distributions values adjustment statistic evaluates gain parameters typical information retrieval system
1515 computer system inference execution data retrieval paper presents rand project concerned computers assistants logical analysis large collections factual data system called relational data file developed purpose relational data file briefly detailed problems arising implementation discussed
1516 automatic data compression information explosion noted recent years makes essential storage requirements information minimum fully automatic rapid part compressor body information greatly reduce slow external storage requirements increase rate information transmission computer paper system automatically decode compressed information item item basis required component compressors separately accomplish specific tasks discussed nupak automatic compression numerical data anpak automatic compression information iopak compression information stored tape cards
1517 methods analyzing data computer simulation experiments paper addresses problem analyzing data generated computer simulations economic systems turn hypothetical firm operation represented single channel multistation queueing model firm seeks maximize total expected profit coming period selecting operating plans plan incorporates marketing strategy allocation productive inputs total cost results simulated activity plan subjected test multiple comparison methods multiple ranking method illustrate compare evaluate techniques paper adopts position technique analysis possibly chosen experimenter expression experimental objective test tests homogeneity plans multiple comparison methods quantify differences multiple ranking methods directly identify plan plans
1518 experimental model system problem predicting performance modern computer systems formidable general technique ease problem macroscopic simulation paper reports applicability technique system paper describes experimental model system hardware software environment measures system performance produced model consist statistics relating turnaround time throughput hardware utilization software utilization queueing processes model mechanized simscript consists statements auxiliary programs job generator creates automatically properties system jobs simulated
1519 george general purpose time sharing operating system operating system run wide variety configurations handle large number online console users time running line background jobs system oriented mode batch processing system atlas supervisor ibsys gecos multiaccess system resembling user ctss multics simultaneously depending installation adjust schedulers online users line jobs common command language system includes multilevel device independent file store
1520 absolute square root complex number algorithm
1521 multi dimensional partition generator algorithm
1522 chebyschev quadrature algorithm
1523 sharer time sharing system cdc time sharing system embedded standard batch processing system cdc system general purpose file based providing facilities file input manipulation editing compilation conversational execution simple scheme system extension machine relocation memory bound register attempt made reentrant code simulate segmentation paging implementation time approximately man years majority code written fortran
1524 stopping criterion polynomial root finding searching root polynomial generally difficult accept number adequate approximation root paper algorithm presented terminate iteration process basis calculated bounds roundoff error occurs evaluating polynomial stopping criterion tested numerous examples found serve satisfactory means accepting complex number real polynomial
1525 computing fast fourier transform cooley tukey proposed fast algorithm computing complex fourier transform shown major time savings compute large transforms digital computer power computing time algorithm proportional log major improvement methods computing time proportional paper fast fourier transform algorithm briefly reviewed fast difference equation methods accurately computing needed trigonometric function values problem computing large fourier transform system virtual memory considered solution proposed method compute complex fourier transforms size computer words core storage exceeds factor maximum radix transform size fixed allocation amount core storage method compute large mixed radix transforms scaling plan computing fast fourier transform fixed point arithmetic
1526 multiprogramming page demand strategy model multiprogramming computer system page demand strategy developed analysis model predict performance measured average usage cpu user programs typical arising interactive time sharing environment effect hardware modifications analyzed parameter readily calculated hardware characteristics program statistics proposed gauging effect multiprogramming
1527 grammar base question answering procedure subject paper procedure automatic retrieval segments stored information explicitly implicitly represented questions posed natural language sentences procedure makes sentence recognition device class grammars correctly decide grammatical ungrammatical sentences natural language make recognition device sort reason data fully expressible set sentences natural language set exhaustively exclusively generated grammar based rules grammar sentence recognizer evaluate sentences questions normal situation recognition function succeeds case posed question drawn set sentences expressing data correctly grammatical terms grammar set sentences sentence recognition procedure retrieving information recognition function succeeds represents requested information
1528 fonts computer drawn letters detailed descriptions fonts letters letter shapes numbers basic vectors general form fonts easily drawn variety computers cathode ray tubes fonts include upper lower case roman letters mathematical signs upper lower case greek letters design fonts principal contribution paper concerns fonts
1529 decomposition programming analysis matrix substructure petroleum blending problem analyzed order compare primal primal dual decomposition algorithms analysis substructure discovered relevance relative performance algorithms absolute performance compared standard primal simplex solution decomposition
1530 ml macro processor general purpose macro processor called ml ml implemented pdp atlas computers intended tool users extend existing programming language incorporating statements syntactic forms choosing notation complete user oriented language built relative ease
1531 remaining trouble spots algol paper lists ambiguities remaining language algol noticed publication revised algol report
1532 hardware software complementarity
1533 marovian model university michigan executive system mathematical model computer executive system postulated parameters estimated aid extensive data system operation simplifying assumptions made results predicted model agree reasonable actual results model study effects executive system compilers applications model discussed
1534 dad operating system design implementation operating system dad detail system designed control data large drum backing store intended integration remote console display subsystem conventional job stack environment drums buffering input output slow peripherals execution normal job stack work display subsystem integrates rest system techniques found development dad assessment made validity design decisions performance figures based months operation tabulated
1535 comment index register allocation technique presented reduce enumeration required procedure optimal index register allocation straight line programs technique based construction link diagram shows step future occurrences indexes loaded index registers diagram determines advance required register configuration steps program program subdivided separate portions allocation procedure applied independently
1536 dynamic computation derivatives shown wengert procedure computation derivatives implemented conveniently compiler generated complex addition subtraction linkage complex arithmetic subroutines evaluation function derivative proceed parallel wengert procedure imaginary parts variables declared complex bearing values derivatives real parts technique simple compute derivatives function deriving programming evaluation explicit formulas derivatives
1537 prime number generator algorithm
1538 prime number generator algorithm
1539 prime number generator prime number generator algorithm algorithm algorithm
1540 algorithm class scheduling section preference algorithm assignment students classes fixed time schedule students give preference sections courses consistent objective balanced sections preferences honored algorithm stochastic monte carlo nature results compare nonpreference assignment algorithm
1541 language modeling simulating dynamic systems general objective language facilitate modeling experimental aspects simulation studies ability represent systems highly interactive processes essential feature nature language role process concept presented means extended
1542 microprogrammed implementation euler ibm system model experimental processing system algorithmic language euler implemented microprogramming ibm system model read storage unit system consists microprogrammed compiler microprogrammed string language interpreter control program written machine language system results terms microprogram main storage space required compiler interpreter performance obtained role microprogramming stressed opens dimension processing interpretive code structure content higher level language matched interpretive language executed efficiently microprograms existing computer hardware
1543 computer formulation equations motion tensor notation means extending area application digital computers numerical data processing stage reducing human participation formulation types computer problems tensor calculus computer language designed facilitate symbolic mathematical computation method devised digital computer numeric work symbolic algebraic manipulation differentiation illustrate techniques involved digital computer derive equations motion point mass general orthogonal curvilinear coordinate system operation involves formulation terms order differential coefficients good demonstration computer capability numeric work assist formulation process precedes numerical data processing stage problem serves illustrate advantages mathematical techniques employed program prepared purpose computer derive equations motion coordinate system requested user results presented coordinate systems cylindrical polar spherical polar prolate spheroidal
1544 tele cupl telephone time sharing system general purpose remote access computing system employs twelve key keyboard telephones terminals audio output provided directly telephone terminals system conjunction remotely located high speed printing devices system compatible extension existing batch processing system significant element system scheme transmitting alphanumeric information single strokes numeric keyboard programmed scanner context eliminate ambiguity transmission
1545 legal safeguards insure privacy computer society
1546 standards handwritten
1547 gamma function arbitrary precision algorithm
1548 parsing decision tables reduction size decision tables accomplished techniques techniques considered paper parsing decision tables regard horizontal vertical data structures job identity hardware job priorities context relationships parsing rests conventions linkage decision tables
1549 efficient machine independent procedure garbage collection list structures method returning registers free list essential part list processing system paper past solutions recovery problem reviewed compared algorithm presented offers significant advantages speed storage utilization routine implementing algorithm written list language insuring degree machine independence finally application algorithm number list structures appearing literature
1550 comparison batch processing instant turnaround study programming efforts students introductory programming presented effects instant turnaround minutes opposed conventional batch processing turnaround times hours examined items compared number computer runs trip computation center program preparation time keypunching time debugging time number runs elapsed time run run problem results influenced fact bonus points completion programming problem number runs evidence support instant batch
1551 compiling algorithms arithmetic expressions paper deals algorithms arithmetic expressions fortran iv compiler hitac computer accumulators algorithms generate object code minimizes frequency storing recovering partial results arithmetic expressions cases accumulators
1552 aed free storage package fundamental underlying problem sophisticated software systems involving elaborate changing data structure dynamic storage allocation flexible problem modeling free storage package aed compiler systems blocks storage obtained returned reuse total space partitioned hierarchy free storage zones characteristics blocks size special provisions efficient handling selected sizes control shattering garbage collection sharing physical space zones routines package perform high level functions automatically access control fine internal details
1553 contextual understanding computers development computer program eliza capable conversing natural language discussed importance context human machine understanding stressed argued adequacy level understanding achieved conversation depends purpose conversation absolute understanding part humans machines impossible
1554 computer technique displaying dimensional hyperobjects digital computer automatic plotter generate dimensional stereoscopic movies dimensional parallel perspective projections dimensional hyperobjects rotating dimensional space observed projections motions direct extension dimensional experience profound feeling insight fourth spatial dimension obtained technique generalized dimensions applied dimensional hyperobject hypersurface
1555 symmetric polynomials algorithm
1556 permutations repetitions algorithm
1557 symmetric group characters algorithm
1558 generation permutations pseudo lexicographic order algorithm
1559 permutation generator permutation lexicographical order permute generation permutations lexicographical order algorithm algorithm algorithm algorithm
1560 transport transportation problem algorithm algorithm
1561 mutual primal dual method algorithm
1562 airy function algorithm
1563 method finding hamilton paths knight tours warnsdorff rule finding knight tour generalized applied problem finding hamilton path graph graph theoretic justification method
1564 description basic algorithm detab preprocessor basic algorithm conversion decision tables cobol code contained generator portion detab preprocessor generator analyzes decision table produces simple cobol conditional statements core storage saved queueing techniques extensive indexing outputting code generated line time optimization attempted elimination unnecessary tests conditions decision table preprocessor language developed cobol users preprocessor written modular form required cobol
1565 language independent macro processor macro processor source language features macro facility ability make arbitrary transformations argument strings program basser computing department university sydney sydney australia process text compilers
1566 optimal starting values newton raphson calculation sqrt problem obtaining starting values newton raphson calculation sqrt digital computer considered shown conventionally uniform approximations sqrt provide optimal starting values problem obtaining optimal starting values problem obtaining optimal starting values stated basic results proved table optimal polynomial starting values
1567 representation symmetric polynomials relations symmetric polynomials light theory symmetric group approach unifies earlier work lends insight previously published work aaron booker generalization graeffe root squaring technique determination roots polynomial suggested
1568 plotting function independent variables method developed constructing approximate plot function independent variables plot similar conventional contour map scales represent independent variables scale values independent variables added vectorially function read values nearby contours
1569 implementing phrase structure productions pl method implementing productions context free phrase structure grammar pl procedure structure statements parallel structure notation grammar
1570 string processing techniques internal organization string processing systems discussed techniques data structures presented evaluated basis creation strings examination strings alteration strings speed operation storage requirements effect paging programmer convenience considered techniques single word linked blocks demonstrating implementation snobol string processing language ibm system
1571 user oriented time shared online system existing system planned additions data processing laboratory brain research institute ucla system represents attempt provide research workers institute ability interact directly highly sophisticated digital computing complex direct simple fashion anticipated accumulation experience present system significant advances system design determination interface parameters biological scientist digital computer
1572 simulation time sharing systems development large scale time sharing systems raised number problems computation center management develop hardware configuration systems software adjustments made systems respond manner intuition suggest guides assist analysis performance characteristics development comprehensive simulation model assist investigation questions paper resulting model general purpose design study variety time sharing systems assist design development time sharing algorithms techniques sake efficiency greater applicability model implemented limited fortran subset compatible fortran iv compilers simulation demonstrated study ibm time sharing system
1573 adaptive quadrature procedure random panel sizes algorithm
1574 normal curve integral algorithm
1575 incomplete beta ratio algorithm
1576 eigenvalues real symmetric matrix qr method algorithm
1577 eigenvalues eigenvectors real symmetric matrix qr method algorithm
1578 generalized squares fit orthogonal polynomials algorithm
1579 real error function erf algorithm
1580 error function large algorithm
1581 complementary error function large algorithm
1582 gauss algorithm
1583 normal distribution function algorithm
1584 procedure normal distribution functions algorithm
1585 normal curve integral algorithm
1586 generalized bairstow algorithm bairstow algorithm generalized case polynomial linear combination polynomials satisfying term recursion convergence properties method derived
1587 storage allocation iterative process method core storage allocation iterative process estimates machine time required method applicable iterative processes input data items chosen needed method input data continuously relocated space made apportioned output tables overflow occurs important special cases considered considerable simplification occurs
1588 pl list processing concepts list processing introduced pl language facilities write pl procedures operate simple complex data list organizations list processing languages suffered inability deal directly complex data structures inability perform complete range programming language operations data list structures problems eliminated list processing facilities pl basic concepts list processing philosophy pl language extensions discussed addition detailed list processing examples provided
1589 dialog conversational programming system graphical orientation dialog algebraic language online graphical input output console device computational aid casual user basic facilities graphical numeric input display online line program preparation storage hard copy presentation results system requires minimum experience instruction growth overlaying system control language prevented processor oriented statements variable type dimension declarations online situation processor interacts graphical keyboard character character basis restrict programmer choice input symbols syntactically correct dialog daily operation iit research institute february
1590 pitch period determination speech sounds computer procedure determines pitch periods recognition peak structure speech waveform speech sounds sampled microphone analog digital converter attached interconnected ibm pdp system utterances recorded normal noise level computer room band compressed phase distorted manner sequence operations defined speech wave selects list points waveform candidates pitch markers markers validated error detection correction procedure percent pitch periods recognized correctly times real time ibm
1591 model multifunctional teaching system teaching system model incorporated operating system large computer model transferred control operating system execute functions teaching recovered control order resume teaching teaching system abac ii written run operating system ibsys ibm graphic system teaching system automatically terminated rescheduled student studying presented cathode ray display terminal switch readily student mode programmer mode full resources operating system language processors compilers library user programs disposal write assemble debug execute terminal program written language processed operating system include text material interleaved programming problems student solve leaving terminal exercises simulation gaming provided implications teaching system degree flexibility industrial executive training academic education discussed addition advantages type system computer programming operation considered
1592 string similarity misspellings problem programming computer determine string characters misspelling word considered numberof algorithms evaluated proposed writers author techniques tested collection misspellings made students grade levels methods unsatisfactory gave percent incorrect determinations
1593 simple technique digital division simple economical method digital division method suitable divisors leading character radix unity character equal method direct half number arithmetic operations needed variant harvard iterative method gilman suitable similar divisors
1594 algorithm generating permutations algorithm repeated application generates permutations elements previously generated permutation constant temporary index needed starting ordering elements abcd repeated application algorithm generate additional permutations successive rotations initial circular ordering objects circular ordering obtained rotating lowest elements circular ordering obtained rotating lowest elements continuing manner applications algorithm generate circular orderings circular ordering yields permutations algorithm generates permutations
1595 computer enumeration finite topologies problem enumerating number topologies formed finite point set considered theoretically computationally fundamental results established leading algorithm enumerating finite topologies computed results interesting side result computational work unearthing theoretical error induced literature computer combinatorics represents chronologically early application side result underscores continuing usefulness area
1596 airy function algorithm
1597 transpose vector stored array algorithm
1598 squares fit orthogonal polynomials algorithm
1599 numerical solution polynomial equation algorithm
1600 chebyshev quadrature algorithm
1601 parallel numerical methods solution equations classical iterative procedures numerical solution equations provide stage single approximation root question technique development numerical procedures provide stage approximations solution equation everal approximations obtained iteration computationally independent making methods interest parallel processing environment convergence insured extracting information iteration families numerical procedures technique procedures parallel processing environment developed measurements statistics reported measurements interpreted parallel processing environment environment procedures obtained superior standard algorithms
1602 pose language posing problems computer language pose drastic departure fortran algol type utilize fortran formula logic representations fortran vi subset language user describe problem equation form method solution automatically provided conjunction translation equation form computer instruction pose language user solve difficult computational problems solution differential equation requiring knowledge numerical methods intricacies computer subroutine logic essentially clerical operations required fortran programming automated pose programmer concerned details
1603 multiprogramming monitor small machines int combination hardware software monitor designed control wide variety real time input output devices simple hardware additions provide uniform device machine interface elements keyboards graphic input devices interval timers software relieves user program details input output timing buffering task scheduling parallel processing capability user programs communicate monitor small set meta instruction consists machine language subroutine calls
1604 analysis computing center environment empirical distributions program lengths execution times processing times loading times jobs serviced university computing center environment presented data subdivided characteristics users jobs obtain selected empirical conditional distributions time properties statistical measures interesting properties results interpreted terms properties system studied
1605 experimental comparison time sharing batch processing effectiveness program development mit compatible time sharing system ctss compared ibm ibsys batch processing system means statistically designed experiment identical set programming problems assigned group programming subjects influences external systems sequence problem solution programmer problem characteristics design factors experiment data obtained variables programmer time computer time elapsed time considered definitive system effectiveness analysis variance techniques employed estimate system differences variables differences due design factors eliminated statistical analysis experimental results provided strong evidence important system differences critique experimental design implications experimentation
1606 chi squared integral algorithm
1607 coulomb wave functions algorithm
1608 numerical integration function pole common integrate numerically functions diverge range integration divergence occurs integration formulas simpson depend fitting polynomial inaccurate pole bad method formulas integrate functions kind accurately orders positions poles explicit formulas easy automatic computer shown singularities poles integral converges integration carried singularity accuracy integration pole order discussed formula compared simpson formulas pole pole advantage overwhelming
1609 scheduling university examinations computer approach problem scheduling examinations presented principle examination schedule requires minimum number examination periods satisfies constraint student required examinations simultaneously found steps examinations scheduled period grouped ways minimum number groups included selected removing multiple occurrences courses scheduling group period minimal schedule obtained algorithms carrying procedures prohibitively expensive approximations ideal procedure outlined yield nonminimal feasible schedules small expenditure time results experiments techniques encouraging experimentation worthwhile
1610 method solution transportation problems tall matrices method presented solution transportation problem cost matrix columns computer implementation method shows fast efficient application indicted personnel classification problem classical transportation problem worked detail
1611 scheduling project networks basic concepts terminology project networking developed critical path algorithm incorporated proprietary scheduling system ramps resource allocation multi project scheduling error detection network analysis features algorithm
1612 top bottom parsing rehabilitated note concerned efficiency top bottom parsing algorithm connection programming language grammars shown instance retracing unprofitable paths eliminated suitable rearrangement productions defining grammar essential weakness method dealing complicated syntactic structures practice sparsely occupied arithmetic expressions
1613 pass compilation arithmetic expressions parallel processor assumption processor multiplicity arithmetic units compiler processor produce object code advantage parallelism operation presently compilation techniques inadequate processor produce expression structures evaluated serially technique presented compiling arithmetic expressions structures evaluated high degree parallelism algorithm variant called top analysis technique requires pass input text
1614 proposal definitions algol extension algol proposed adding data types operators language definitions occur block heading terminate block integral part program fixed language behavior existing operators redefined processing text defined contexts features replacement rule eliminates unnecessary iterations temporary storage examples definition sets real complex matrices complex numbers file processing list manipulation
1615 algorithm generating root locus diagrams technique digital computer draw ordinary time lag root locus diagrams ordinary diagrams drawn faster accurately time lag diagrams impossible obtain drawn speed accuracy ordinary diagrams
1616 tensor calculations computer appendix main text paper comm acm dec formac program discussed capable calculating quantities interest tensor calculus appendix intended program output chrisoffel symbols calculated basic orthogonal coordinate systems listed
1617 eigenvalues eigenvectors symmetric system algorithm
1618 determination square root positive definite matrix algorithm
1619 error free methods statistical computations neely discussed computational error generated algorithms compute statistics present paper methods error free simple concept costly machine time mentioned neely
1620 methods evaluating polynomial approximations function evaluation routines method nested multiplication commonly function evaluation routines evaluate approximation polynomials polynomial evaluation methods developed recent years require fewer multiplications nested multiplication preferable function evaluation routines methods practically rounding error difficulties methods evaluating low degree polynomials found satisfactory methods illustrated
1621 computer typesetting algol application computer aided typesetting introduced working method publishing algol computerized translation hardware reference representation computerized planning typographical lay computerized control typesetting machine point made experts science technology programming guaranteed correct algol documentation spending valuable time power typographic considerations proofreading
1622 efficient procedure generation closed subsets efficient algorithm generating subsets set satisfy constraints form member subset member subset algorithm programmed wisp language successfully run ibm connection routine detect feedback multidimensional iterative networks
1623 application formac nonlinear circuit analysis problem stated solved formac solution problem formac notable methods failed problem straightforward untenable hand involved elaborate formac language program fairly large utilized practically command made extensive part command tricks order circumvent shortcomings formac system paper concerned programming techniques formac actual engineering problem readers interested problem stated general mathematical sense interest areas circuit analysis
1624 automatic dimensioning examples algorithm accomplish automatic storage reservation explicit array declarations
1625 automatic simplification source language programs methods simplification applied automatically programs written algol language discussed simplifications based form program knowledge obtained processor understanding program supposed methods implemented processor called accepts program written jovial outputs equivalent jovial program shorter executed faster original problems encountered automatic improvement source language level discussed types automatic program improvement suggested
1626 structure lisp system level storage ideal list processing system core memory data programs paper number techniques build lisp system utilizing drum principal storage medium surprisingly low time penalty slow storage device techniques include careful segmentation system programs allocation virtual memory address arithmetic type determination special algorithm building linearized lists scheme binding variables good environment complete compatibility compiled interpreted programs special declarations
1627 application level changing multilevel storage organization technique organizing devices computer storage system technique called multilevel store means economically satisfying requirements large storage capacities data management information retrieval systems concept level changing introduced application multilevel store discussed means physically organizing information efficient multilevel store presented
1628 emergence profession computer programming deals enormous variety activities carried people great variety backgrounds clear part activity evolving distinct professional field scope emerging profession economic social educational characteristics means defined paper issues examined opinions expressed
1629 stat pack biostatistical programming package package fortran statistical programs small medium size characters words fortran ii compiler exists availability announced major design criteria ease ease modification flexibility input detail output
1630 computer representation planar regions skeletons region regarded union maximal neighborhoods points centers radii neighborhoods set sort skeleton region storage required represent region comparable required represented encoding boundary skeleton representation advantages determine repeatedly points inside region perform set theoretic operations regions
1631 testing random number generator numbers produced random number generator general purpose systems simulator gpss subjected statistical tests tests results tests presented tests numbers satisfactory recommended suitable tests applied random numbers computer simulations
1632 programming tabular method analysis variance factorial experiments ease programming tabular method analysis variance complete factorial experiments fortran language demonstrated method total sum squares partitioned orthogonal single degree freedom sums squares main effect interaction sums squares obtained pooling single degree freedom sums squares program segments accomplish procedure presented modifications handle hierarchical designs replicated experiments mentioned fortran ii program ibm briefly
1633 modified newton method polynomials modified newton method polynomials discussed assumed approximations roots polynomial variations roots simple shown conditions variations cubically convergent
1634 bits digit accuracy inequality conclude represent digit decimal floating point numbers accurately bit floating point numbers significant bits represent digit numbers accurately general show significant bits digit decimal accuracy finally define compact bit floating point representation give significant bits numbers practical importance
1635 parameters pseudo runge kutta methods object note present choice free parameters fourth order pseudo runge kutta methods involving points choice parameters bound principal part truncation error term minimum fourth order method minimum order method
1636 invariant imbeding numerical integration boundary problems unstable linear systems ordinary differential equations diverse areas radiative transfer planetary atmospheres optimal guidance control point boundary problems unstable systems arise greatly complicating numerical solution invariant imbeding technique presented overcoming frequently encountered instabilities results numerical experiments
1637 problems statistical analysis simulation experiments comparison means length sample records research continued statistical analysis simulation experiments autocorrelated time series shown estimate lengths sample records needed large sample results measuring stability analogies autocorrelated data independent observations test difference experiments suggested shown variance sample relates spectrum generating process estimation quantities interest results expand possibilities statistical spectral analysis applied simulation experiments
1638 sorting replacement selecting sorting replacement selecting expected length sequence beginning element proved accordance conjecture friend number memory cells expected length sequence determined times degree polynomial polynomial approaches approaches infinity recursive formulas obtained standard deviation length sequence mathematical proofs results based assumption number items sorted infinite shown error due finiteness approaches rapidly increases
1639 exponential curve fit algorithm
1640 generalized squared fit orthogonal polynomials algorithm
1641 fast slow memories list processing languages scheme permitting substantial increase memory space utilized store list structured data consists reducing level nonhomogeneous store composed fast core slow disk drum memories space slow memory divided pages number machine words reduction level memory performed program leaves called pages fast memory page slow store requested page core longest period inactivity transferred back slow store complete scheme implemented connection lisp embedding algol ibm core memory disks gains memory space fold programming applications price additional space computer time disks access time times slower core tests actual slow varied depending number pages fast store
1642 time sharing computer small memory techniques make time sharing attractive computer small central memory presented small user program monitor fit memory time techniques depend levels secondary storage level times larger main memory fast level times larger slower level
1643 improvement iterative methods polynomial factorization methods polynomial factorization find zeros time require division polynomial accepted factor shown accuracy division increased dividing order ascending descending powers variable choosing crossover point minimizes simply calculated error criterion
1644 computation squares polynomials rounding error accumulated digital computation squares polynomial makes computed polynomial approximation true square polynomial simple method adjust ing constant term computed polynomial approximation true squares polynomial
1645 note computing approximations exponential function methods discussed result minimax rational approximations exponential function time retain desirable property approximation negative values argument reciprocal approximation positive values methods lead approximations superior commonly convergents gaussian continued fraction exponential coefficients errors intervals ln ln ln ln
1646 ditran compiler emphasizing diagnostics ditran diagnostic fortran implementation asa basic fortran extensive error checking capabilities compilation time execution program improved diagnostic capabilities objectives met compiler discussed attention design implementation ditran techniques employed provide diagnostic features handling error messages general macro approach special features provide teaching aids instructors noted
1647 watfor university waterloo fortran iv compiler watfor core load compiler implemented ibm operating system fortran iv selected source language order achieve maximum language compatibility compiling systems ibm fortran iv system principal advantage watfor compiler translates fortran iv programs speeds statements compiler resides core virtually system overhead large batches student programs processed efficiently compiler extensive error diagnostics compilation execution phases program run feature makes system attractive learners learned users alike
1648 uniform random algorithm
1649 data directed input output fortran statement similar namelist statement fortran iv incorporated fortran compiler fortran implementation greater flexibility simplicity fortran iv feature hollerith names location mode dimensions variable discovered means standard fortran statements methods information illustrated relation general purpose data directed input output routines matrix manipulation discussed
1650 unifying computational method analysis complete factorial experiments computational method calculation sums squares analysis variance complete factorial experiments computation main effect interaction means method elucidated unifying method variety purposes previously requiring methods programming advantages method obvious variants discussed standard analysis variance analyses omitting levels factors separate analyses levels factor combinations levels factor performed simultaneously calculation main effect interaction means expects data standard order leaves data order analyses data performed rearrangement total sum squares excluding replication sum squares partitioned polynomial partitions interactions degree freedom factors unequally spaced factor levels
1651 interpretive input routine linear programming descriptive article input code presented greatly simplifies data input linear programming solution routine subsequent pedagogical device solving small lp problems limited derives inherent limitations code efficiency evaluation large lp problems doubtless benefit input system suited bulk data handling input code user standpoint input appears textbook presentation lp problem limited keypunch inability write subscripts input interpreter scans column wise fixed format data preparation required user general requirements liberally editorial comments input deck aid identification row constraints article includes examples input output solution routine presently skeleton flowchart input interpreter
1652 code numeric information processing applications online systems code specifically designed simplify internal information processing operations online computer system respect numeric applications maximize transfer rate information channel linking system system user code direct application problems area information retrieval document classification computer aided teaching text editing code called ipc information processing code bit code set constructed bit subsets easily derived basic set code set organized simple binary operations distinguish numeric alphabetic special symbol control character codes number usable characters basic set size expanded escape codes included set suitable interpretation unassigned codes basis requirements local environments
1653 system performance evaluation survey appraisal state art system performance evaluation reviewed evaluation goals problems examined throughput turnaround availability defined fundamental measures performance overhead cpu speed perspective appropriateness instruction mixes kernels simulators tools discussed pitfalls encountered analysis simulation synthesis presented levels approach evaluation requiring successively greater amounts information central role measurement performance evaluation development evaluation methods explored
1654 university educational program computer science review power contemporary computers computer science defined ways objectives computer science education stated asserted north american university achieved computer science department program stanford university reviewed appendices include syllabic ph qualifying examinations stanford computer science department
1655 code extension procedures information interchange proposed usa standard standard code code information interchange characters shift shift escape data link escape control functions standard procedures code extension code table bit pattern
1656 procedures standardization process proposed usa standard standardization procedures criteria
1657 implementation sharer time sharing system simple mechanism execution part program memory protection program act suboperating system improved version sharer time sharing system feature operating system memory protection time sharing multiprogramming monitor submonitor suboperating system
1658 analysis algorithms programming problem paper concerned review examination existing algorithms programming problem computational experience summarized machine time storage requirements algorithms compared test problems small intermediate size computer experiments provide hope solving problems variables reasonable amount machine time operations research optimization theory integer programming variables algorithms
1659 computational linguistics ph computer science program report recommendations curriculum computational linguistics ph computer science program classification subject areas contained computational linguistics presented ten courses areas basic bibliography computational linguistics appended computational linguistics mathematical linguistics language computer language data processing computational linguistics curriculum computational linguistics graduate program computational linguistics bibliography computer science curriculum
1660 index subject algorithms
1661 multint algorithm numerical integration multidimensional integration gaussian integration
1662 eigenvalues eigenvectors real general matrix eigenvalues eigenvectors latent roots latent vectors householder method qr algorithm inverse iteration
1663 generator random numbers satisfying poisson distribution poisson distribution random number generator monte carlo
1664 algorithm deriving equations mathematical physics symbolic manipulation method digital computer derive equations mathematical physics curvilinear coordinate system requested user effectiveness technique demonstrated derive navier stokes equations fluid motion continuity equation derive equations method user coordinate transformation equations relating curvilinear coordinates interest orthogonal cartesian triad program coordinate transformation equations supplied input computer derive navier stokes equations continuity equation equations obtained relative curvilinear coordinate system transformation equations input paper emphasis theoretical considerations methodology programming details results presented cylindrical polar spherical polar coordinate systems formac navier strokes equations continuity equation tensor tensor equation curvilinear coordinate systems fortran symbolic manipulation
1665 automatic generation efficient lexical processors finite state techniques practical application theory finite state automata automatically generate lexical processors dealt tutorial article aed rword system developed part aed system system accepts input description multicharacter items words allowable language terms subset regular expressions output system lexical processor reads string characters combines items defined regular expressions output item identified code number pointer block storage characters character count item processors produced system based finite state machines state machine corresponds unique condition lexical processing character string state character read machine state transition actions based character read system operation processors generated compared favorably speed carefully hand coded programs accomplish task lexical processors aed mad produced techniques employed independent nature items evaluated word events substituted character string processors generalized decision making mechanisms based ordered sequence events system range applications area lexical processing convenient advantages speed important consideration designing system automatic generation lexical processor goal processor completely eliminated backup rereading fast hand coded processors analyze language detect errors convenient easy character string compiler finite state automata finite state machine lexical processor nondeterministic machine parsing plex structure regular expressions sequential machine syntactic analysis
1666 solution linear programs variables implicit enumeration algorithm linear programming variables partial enumeration
1667 roots polynomials root squaring resultant routine algorithm root finders roots polynomial equations polynomial zeros root squaring operations graeffe method resultant procedure subresultant procedure testing roots acceptance criteria
1668 algol procedure fast fourier transform arbitrary factors algorithm fast fourier transform multivariate fourier transform fourier series harmonic analysis spectral analysis orthogonal polynomials orthogonal transformation virtual core memory permutation
1669 algol procedures fast fourier transform algorithm fast fourier transform complex fourier transform multivariate fourier transform fourier series harmonic analysis spectral analysis orthogonal polynomials orthogonal transformation virtual core memory permutation
1670 correspondences bit hollerith codes computer environments usasi tutorial standard usa standard card code punched card punched card code hole patterns hole patterns assignment punched card systems
1671 phonological rule tester design implementation system alleviate problem rule evaluation linguist area phonology presented permits user define line sets rules statable framework presented sound patterns english chomsky halle define phonemes bundles distinctive features define data strings phonemes grammatical structure test effect applying rules data store definitions results rule application facility detail implemented translating linguistic rules rules flip format directed list processor embedded lisp made system construction easy providing sophisticated capabilities linguist system written bbn lisp scientific data system computer designed line interactive fashion control returned user command executed phonology rule tester linguistics transformational grammar lisp format directed list processing line systems
1672 practical error coefficients integration periodic analytic functions trapezoidal rule theoretical practical values error coefficients bounding error integrating periodic analytic functions trapezoidal rule tabulated ranges parameters theoretical error coefficients practical error coefficients numerical integration periodic analytic functions trapezoidal rule roundoff error truncation error integration algorithm
1673 approximate solution initial boundary wave equation problems boundary techniques boundary technique proposed treatment initial boundary problems linear mildly nonlinear wave equations illustrative examples offered demonstrate ease method applied initial boundary problem wave equation boundary technique
1674 line random number generators combinations line random number generators generators requiring single fortran instruction discussed short fortran programs mix generators aim provide methods incorporating random number generators directly fortran programs means line instructions advantages speed avoiding linkage subroutine convenience versatility wishing experiment generators congruential generators mixing generators provide composite potentially statistical properties library generators simple fortran program discussed random number generation monte carlo simulation
1675 note relevance estimate improvement paper effect iterating improvement procedure examined shown applications improvement factor time ineffectual factor scale factor information retrieval relevance indexing classification
1676 lrltran compiler extensive software problems confront organization possesses number computers frequently acquires maintain cohesion system developed written high level language minimizes machine dependencies isolates language compiler language discussed language called lrltran heavily augmented fortran tree pass compiler makes internally postfix polish notation pass pass ii tree representation referred composite blocking table pass pass iii machine independent optimization occurs pass ii loop machine dependent optimization pass iii compiler compiler compiler machine independence scatter storage technique polish processor common subsegments tree representation optimization
1677 storage organization programming systems system program data representation rice university computer years logical entity storage occupies block consecutive memory locations block labeled codeword program data vector codewords turn label blocks form arrays storage arrangement discussed realized advantages programming systems simplicity programmed addressing flexibility data structures efficiency memory utilization variability system composition execution means linkage programs programs data basis storage protection application labeled blocks extended areas time sharing multimedia storage control basis experience rice ideas extensions presented storage allocation storage organization storage control codewords data representation program representation data structures storage protection addressing mechanisms paging segmentation file handling
1678 automata formal languages abstract switching computability ph computer science program number courses listed area describe automata formal languages abstract switching computability ph student computer science catalog description applied role courses graduate program discussed ph computer science curriculum ph computer science program automata formal languages switching theory theory computability
1679 fast fourier transform algorithm real valued series procedure presented calculating complex discrete fourier transform real valued time series procedure number points series integral power algorithm preserves order symmetry cooley turkey fast fourier transform algorithm effecting reduction computation storage achieved series real discussed hardware software implementations algorithm perform log complex multiply add operations require real storage locations analyzing point record fast fourier transform time series analysis digital filtering spectral analysis real time spectrum analyzers fourier analysis discrete fourier transform digital spectrum analysis fourier analysis algorithm fourier synthesis algorithm
1680 general purpose display processing tutorial system adept display expedited processing tutorial system system designed improve man computer communications employing display unit interleave tutoring computer operations simulation programming information retrieval written fortran iv ibm system model ibm display unit operating system adept cataloged program controls standard operating system terminating rescheduling automatically relinquishing computer resources allocated surrendering control operating system perform jobs expands power flexibility computer assisted instruction making immediately students teachers users full resources system cataloged programs operating system language processors compilers simulation models mathematical solution techniques stored data library user programs incorporated instructional material reprogramming illustrations applications presented implications discussed computer assisted instruction tutorial systems programming simulation modeling information retrieval operating systems graphics displays man machine interface line computing graphic programming
1681 easy english language information retrieval remote typewriter console easy english natural command language designed simplify communication man machine remote typewriter console developed retrieval documents computerized data base moore school information systems laboratory files requests formulated standardized syntactical form examples presented form transformed equivalent query expressed retrieval system original symbolic command language briefly operation easy english detailed illustration transformations performed sample request point request string system macro flowchart easy english included appendix printout retrieval demonstration natural language communication line searching remote console communication information retrieval man machine communication remote terminal communication translator document retrieval conversational mode information retrieval language symbolic command language
1682 implementation basic system multiprogramming environment implementation remote terminal basic system context existing multiprogramming computer system burroughs implementation combines unique mixture machine language interpretive techniques incremental compiler multiprogramming incremental compilation compilers interpreters
1683 boolean matrix methods detection simple precedence grammars mechanical procedure derived determining context free phrase structure grammar simple precedence grammar procedure consists elementary operations suitably defined boolean matrices application procedure operator grammars syntax analysis precedence analysis simple precedence grammar simple precedence language operator grammar operator precedence compilers bounded context syntactic analysis boolean matrices relations
1684 ambiguity limited entry decision tables decision tables tool systems analysis program specification accepted rules redundancy contradiction completeness limited entry tables published checking preceded conversion extended limited entry form processors automatically translate tables conventional program base diagnostic facilities rules paper suggested rules unsatisfactory important aspect checking eliminate ambiguity tables ambiguity defined discussed procedure producing checked decision tables proposed theoretical basis algorithm established importance designed diagnostic facilities decision table processors emphasized decision tables detab systems analysis
1685 gan system generating analyzing activity networks gan system generating activity networks designed save time preparation activity networks deal conveniently network programs defining description programming language designed generating activity network set standard networks presented general idea language performing calculations activity networks scheduling activity networks activity network management project standard network network generator network assembler activity network analysis network calculation network program
1686 computer synthesis holograms display optical digital holography reviewed mathematical model computational techniques authors digital holographic process discussed applications computer holography suggested computer holograms made dimensional objects give faithful reconstructions white light approach based point apertures image discussed photographs images reconstructed digital holograms presented holography optics fourier transforms computer applications display device photography physics mathematics image processing
1687 netflow algorithm capacitated network linear programming minimum cost flow network flow kilter
1688 netflow algorithm capacitated network linear programming minimum cost flow network flow kilter
1689 calculation polynomial derivative values horner scheme algorithm function evaluation polynomial evaluation algol procedure horner scheme
1690 netflow algorithm capacitated network linear programming minimum cost flow network flow kilter
1691 comparison correlational behavior random number generators ibm hutchinson states prime modulo multiplicative congruential pseudorandom generator attributed lehmer passed usual statistical tests random number generators empirically shown generators type produce sequences autocorrelation functions lag exhibit evidence nonrandomness multiplicative constants alternative generator proposed tausworthe irreducible polynomials field characteristic shown free defect applicability generators ibm discussed computer word size affect generator statistical behavior older mixed simple congruential generators extensively tested computers bits word optimum generators ibm random numbers pseudorandom number generators autocorrelation function serial correlation digital shift register generators linear recurrence modulo irreducible polynomials primitive trinomials modulo congruential generators prime numbers statistical tests randomness ibm bit versus bit word size
1692 numerical solution thin plate heat transfer problem numerical solution system linear equations resulting discrete approximation thin plate heat transfer problem considered slow convergence point iterative methods analyzed shown caused boundary conditions difficulty removed standard line iterative technique heat transfer problem poisson equation boundary problem thin domain successive overrelaxation sor block sor
1693 gpl general purpose language general purpose programming language gpl facilities constructing language data types facilities operations performed basic language minimal sense basic element derived high efficiency object programs constructs algol statements statements basic special types procedures symbols underlined words algol implicitly defined usage declarations part words definable packed words handled easily full words address variables pointers included full generality programming language general purpose extending macro algol
1694 algorithm probability union large number events algorithm presented efficiently evaluates probability union independent mutually exclusive events problem evaluating sums products combinations variables minimum time storage space algorithm probability optimum storage time compromise set union mutually exclusive events
1695 plexus line system modeling neural networks description presented plexus system enables user construct neural network analyze output data produced network store retrieve networks data library system operated digital display unit interacts directly user permits easy rapid transitions phases modeling process plexus designed complement neurophysiological research systematic development neural models coordinated experimental work plexus networks built components representing individual neurons external stimuli interconnecting fibers component detailed nature provision made experimental data input network convenient means specification modification network extensive error checking capabilities provided data resulting simulation network analyzed variety techniques ranging examinations gross characteristics data determination detailed statistical properties biological modeling data analysis discrete system simulation library systems modeling network simulation neural networks neurophysiological models line simulation simulation
1696 algorithm identifying ergodic subchains transient states stochastic matrix algorithm identifying ergodic subchains transient states stochastic matrix presented applications markov renewal programming construction variable length codes reviewed updating procedure dealing sequences stochastic matrices discussed computation times investigated experimentally compared recently propose method stochastic matrix ergodic chain identification
1697 graphical input output nonstandard characters system developed harvard graphically inputting outputting nonstandard characters computer printed principle system deal orthography present limited chinese characters mathematical symbols characters added repertoire system graphical input display scope text inputting accomplished display scope rand tablet organization operation current system discussion relative merits system illustrations computer input output chinese characters included chinese characters input output orthography rand tablet pdp automatic typesetting man machine communication computer graphics graphical input line editing
1698 statistical model console behavior multiuser computers ability computer system communicate world efficiently important ability perform computations efficiently difficult characterize user easy characterize entire user community based properties community postulated hypothetical virtual console claim made virtual console behaves actual console entire collection virtual consoles models collection actual consoles model answer questions processes suspended waiting console input maximum rate process execute bounds set buffer requirements answers similar questions needed aspects operating system design statistical models input output operating system design input output design
1699 experimental evaluation information retrieval teletypewriter experiments designed evaluate capabilities mechanized information retrieval systems emphasis interactive man machine language mechanical psychological limitations design conducted moore school information systems laboratory basic assumption research information retrieval system man machine dialogue remote inquiry terminal provide searcher tools performing search library repository documents factors involved evaluation system include ease learning time effectiveness actual retrieval experiments conclusions resulting detailed information retrieval testing information system evaluation experimental document retrieval document retrieval document perusal man machine communication remote console communication teletypewriter communication remote terminal communication retrieval command language symbolic command language interactive systems user learning factors line searching
1700 peekabit computer offspring punched card peekaboo natural language searching peekaboo idea punched card information retrieval methods mated idea superimposed punching produce programming technique cuts computer run time half test search subject index entries search program device operational late item entered store byte mask created item meaningful words inclusive operation search time logical product operation mask similarly constructed question mask equal question mask question words present store item equality conclusive words store item unpacked compared question words present store made subject index entries estimated average characters longer texts abstracts handled multiple masks peekaboo superimposed coding natural language searching text searching information compaction computer search technique
1701 synchronous signaling rates data transmission proposed usa standard
1702 commentary mr mooers paper
1703 accommodating standards identification programming languages user public standardization reliable identification programming languages related services achieving goals illustrated methods adopted trac interactive language related family languages oppressive rigidity standardization avoided accommodation technique accessible user local variations language explicit standardization language undertaken organizational source language organizational trademark trac published standards services relying reliable public identification methods usefully applied programming languages computer services standardization programming languages trac language tranemark public identification programming languages standards accommodate
1704 minimum excess cost curve algorithm critical path scheduling pert cost time tradeoffs network flows
1705 set basic input output procedures algorithm means primitives symbol outsymbol length requested journal algorithms policy comm acm nov basic set input output procedures defined aiming quality flexibility outreal instance written derived procedure outputs fixed point floating point representation rounds properly variants easily written explicit call procedures decompose integer decompose real highly recommended practice echoing input made easy subset derived procedures ioi ior iob ioa documentation output form equivalent algol statements provided made subset oti otr otb ota berkeley style providing information form output prior calls procedures real format defined parameter outchannel provide information simultaneous output channels suggested interrelationship declared procedures furnished tabular form input output transput input output procedures input echo quality output decompose integer decompose real style berkeley style procedures relationship output documentation equivalent algol statements algol algol integer format real format integer read real input output boolean input output array fixed point representation floating point representation output channel interpretation
1706 champ character manipulation procedures programming language facility symbol manipulation string procedures declared called standard algol context algol procedures turn called string procedures numeric symbolic processes conveniently programmed concatenation variant snobol pattern matching make set primitive commands assembled conditional expressions provide alternative computational patterns arrays strings processed quantifiers class things assigned identifier restricted procedure expressed notation language facilities implemented algol compiler burroughs symbol manipulation string handling character manipulation conditional expressions procedures structure matching recursive programming quantifiers
1707 generation positive test matrices positive spectra sufficient conditions real matrix similar positive matrix result construct similarity transformation applied upper triangular matrix yields positive matrix preassigned positive spectrum test matrices positive matrices similarity transformation positive eigenvalues
1708 note efficiency lisp computation paged machine problem levels storage programs explored context lisp system core memory buffer large virtual memory stored drum details timing problem storage management list processor implementation lisp paging secondary storage utilization efficiency paged computation
1709 modification efroymson technique stepwise regression analysis computational technique conventionally stepwise multiple linear regression requires storage matrix data number variables large requirement taxes storage capacity presently machinery symmetry matrices involved permits modification requiring half storage computations conventional algorithm additional storage analysis problems variables alternatively permits analysis problems number variables computations performed double precision multiple linear regression statistical recurrence formulas correlation linear statistical models statistical computer programs curve fitting
1710 asp ring implemented associative structure package asp general purpose associative data structure package arbitrary number data items arbitrary number relationships data items represented special picture language proved drawing asp structures paper asp structures built manipulated means series macro calls outlined appendix emphasis philosophy system implementation sufficient information included enable reader produce implementation asp associative data structure ring structure lists list structure set languages modeling graphics
1711 computer lawyer liability negligence torts slander credit liability theories express implied warranty guarantees discussed legal complications explained users operators owners leasors computers alerted potential legal problems focus trouble spots contracting data processing services automating record keeping operations deciding automate operations complying statutes regulation relating record keeping information patents copyrights trade secret protection programs problem copyrighted material information storage retrieval systems including pending copyright patent revision bills law legal lawyer liability torts negligence contracts warrantees guarantees accounting regulations simulation income tax copyrights patents trade secrets standard care slander credit crime criminals record keeping records evidence copying
1712 recovery disk contents system failure method discussed system malfunction contents disk files restored status time failure data acquisitition disk file organization error recovery file organization
1713 overcoming high priority paralysis multiprogramming systems case tory high priority paralysis degradation occur multiprogramming systems scheduling based primarily preassigned priorities alleviated modifying scheduling algorithm maximize number programs active time case tory paper general methods simultaneity increased refinements scheduling algorithm future improvements considered briefly multiprogram scheduling dynamic priority assignment scheduling
1714 procedure normal distribution algorithm normal distribution function error function normal function normal curve integral
1715 direct search algorithm function minimization search direct search
1716 normal random deviates algorithm normal deviates normal distribution random number random number generator simulation probability distribution frequency distribution random
1717 generating prime implicants ternary encoding decimal arithmetic decimal arithmetic ternary encoding cubes topological considerations algorithm obtain extremals prime implicants boolean functions algorithm programmed fortran language generally requires memory minimization procedures treats care terms efficient manner prime implicants extremal switching function minimization cubical complexes ternary encoding
1718 logical arithmetic computers complement binary arithmetic algorithms presented multiplication division unsigned integer operands digits reserved signs participate significant arithmetic digits positive weight binary arithmetic unsigned operand arithmetic maximum significance arithmetic full precision arithmetic
1719 methodology calculating optimizing real time system performance continually increasing size complexity number types cost data processing systems causing examination government industry criteria methods calculating optimizing data processing system cost performance real time data processing systems typified automated airline reservation system discussed paper criteria evaluating performance methodology calculating optimizing outlined method illustrated carrying portion performance calculation optimization drum oriented message switching system real time system analysis real time system design real time system performance criteria real time system cost performance ratio
1720 master level computer science curricula results survey work master degree candidates universities presented general comments emphasis programs surveys education computer science curricula
1721 determination intersection points plane curves means differential equations method proposed calculate intersection points plane curves theory singular points system differential equations developing method intersection point determined identified singular point modifications applied system ensure singular point stable integrals start neighborhood singular point approach point integral parameter infinity addition method systematically searching intersection points prescribed rectangular area plane curves intersection points intersections plane curves integration differential equations matrix iteration singular points nonlinear differential equations eigenvalues complex roots roots stationary points runge kutta stable singularity unstable singularity
1722 methods convergence improvement improper integrals numerical integration improper integral kind customary truncate integral change yielded iteration predetermined constant efficiency integration schemes improved recent advances theory nonlinear transformations important integrals integrals integrands rational polynomials transformations fail yield improvement paper methods convergence improvement developed greatly improve convergence improper integrals including integrals rational polynomials approximation nonlinear improper integral convergence improvement numerical integration rational polynomials truncation
1723 computer construction project networks project networks pert cpm algorithm constructing project networks directly project precedence relations algorithm creates dummy activities topologically orders arcs nodes number nodes created minimal precedence relations experimentally programmed fortran ii ibm project networks pert cpm topological ordering network construction computer
1724 generalized partial pass block sort design partial pass block sort arbitrary range key number work files design generalization partial pass column sort ashenhurst amphisbaenic sort nagler power sort tabulated sizes input file number work files consideration problem combining block sort internal sorts direct access storage devices block sort partial pass sort direct access devices column sort chaining reverse chaining sort amphisbaenic
1725 simple proof lewin ordered retrieval theorem associative memories efficient method ordered retrieval binary words associative memory lewin based special readout circuits digit values present individual digit columns memory circuits individual digit columns digits values digits memory empty circuits paper termed column indicators reduces considerably number memory accesses retrieve order number distinct words memory lewin proves readout method distinct binary words memory accesses proves number memory accesses method unlike methods independent word length paper simple proof theorem derived elementary aspects structure sets binary numbers presented associative memories content addressed memories ordered lists ordered information retrieval ordered retrieval theorem column digit values digit variety column sensing arrangement digit readout digit variety readout memory access memory access frequency ordered retrieval efficiency access frequency proof retrieval theorem proof
1726 preliminary investigation techniques automated reading unformatted text methods converting unstructured printed material computer code experimentally investigated operator controlled mode depending human demarcation regions page guiding scanner implemented means joystick crt display mode performance figures obtained thought suitable processing complicated material technical journals simpler material instance claims sections patents applications utmost accuracy unsupervised mode advocated textual portions page located rapid prescan rudimentary form frequency analysis areas rescanned higher resolution suitable character recognition error rates order percent obtained simple problem involving photographs telephone company meter boards matters related design general purpose page reader segmentation printed text possibility time sharing scanner interactive man machine operation facsimile reproduction illustrations discussed pattern recognition character recognition text reading information retrieval unformatted text operator controlled reader online reader text image discrimination reading machine
1727 estimating frequencies jumps program segmentation program reasonable estimation values ij ij number jumps instruction instruction run time cases ij estimated directly structure program generally account difficult programmer translator obtain good estimation ij easier estimate ij quantities ij ij sum ij arbitrary positive constant ij proportional ij estimation ij easier estimate probabilities events instruction executed instruction estimation structure program part paper theory markov chains algorithm computation ij ij found ways obtaining estimates ij part variant algorithm derived avoiding necessity computation involving large matrices object program reduction supervisor calls decreasing jump frequencies estimation control transfers estimation optimal program segmentation markov chain program correspondence program graph entry subgraph locally estimated jump frequencies supervisor overhead decreasing program segmentation algorithm jump frequencies program segmentation problem
1728 experimental data behavior programs paging environment results summarized empirical study directed measurement program operating behavior multiprogramming systems programs organized fixed length pages data collected interpretive execution number paged programs describe frequency page faults frequency instants executing program requires page data instructions main core memory data evaluation page replacement algorithms assessing effects performance amount storage allocated executing programs paging systems paging dynamic program behavior program behavior virtual memory systems single level storage level storage operating system simulation operating systems supervisor simulation machine language program interpretation
1729 minit algorithm linear programming algorithm linear programming dual simplex method primal problem dual problem
1730 jacobi polynomials algorithm jacobi polynomials orthogonal polynomials term recurrences special functions
1731 gaussian quadrature formulas algorithm quadrature gaussian quadrature numerical integration weight function orthogonal polynomials
1732 factorial analysis variance algorithm factorial variance analysis variance statistical analysis
1733 distribution indistinguishable objects distinguishable slots algorithm object distributions combinations distribution numbers
1734 chebyshev solution overdetermined linear system algorithm chebyshev solutions overdetermined linear systems linear equations exchange algorithm
1735 futures market computer time auction method allocating computer time price computer time fluctuate demand relative priority users controlled important projects access auction free periodic fluctuation computer monthly time allocation schemes computer scheduling auction time allocation operating efficiency
1736 heading format data transmission usaai tutorial standards data transmission heading format heading format message format data transmission message headings
1737 global parser context free phrase structure grammars
1738 writing outline debugging program experienced user presently online debugging routines unsatisfactory experienced user require unnecessarily rigid complicated typing formats make difficult user correct typing errors consume excessive memory intricate features debugging program prime importance program simple flexible highly efficient communication user debugging program improved techniques applicable online debugging programs techniques presented illustrated opak octal package debugging program coded pdp sds compromise economy utility program core storage incorporation elegant debugging features discussed debugging utility program programming languages
1739 regular expression search algorithm method locating specific character strings embedded character text implementation method form compiler discussed compiler accepts regular expression source language produces ibm program object language object program accepts text searched input produces signal time embedded string text matches regular expression examples problems solution presented search match regular expression
1740 inexpensive braille terminal device active time shared facilities blind programmers requires braille terminal system details construction brailler model teletype modifying print head increasing resiliency platen description programming needed drive brailler presented blind communication blind programming aid braille braille computer communication braille output braille teletype braille terminal braille type head embosser tactile computer communication tactile teletype tactile terminal
1741 brad brookhaven raster display multiconsole computer display system designed rich displays low unit cost brad brookhaven raster display console plot tens thousands points characters frames initial display system investment display teletype costs technique employed programmatically generating binary image desired display computer image written rotating drum memory independent read heads continuously display picture generated swept horizontal lines standard tv monitor serves display device technique drawbacks computer compute image displayed pointing interaction difficult pointing function coordinates point screen inverse map generation process required calculate coordinates point screen inverse map generation process required calculate coordinates selected point input space computer display computer graphics computer raster display tv display console digital tv display swept raster computer display swept raster tv computer display tv graphics terminal multiconsole computer graphics inexpensive graphic terminal
1742 design display processors flexibility power needed data channel computer display considered work efficiently channel sufficient number instructions understood small processor powerful channel found successive improvements display processor design lie circular path making improvements return original simple design general purpose computer trip degree physical separation display parent computer key factor display processor design display processor design display system computer graphics graphic terminal displays graphics display generator display channel display programming graphical interaction remote displays
1743 reliable full duplex file transmission half duplex telephone lines field proven scheme achieving reliable duplex transmission half duplex communication line presented demonstrate difficulty problem similar scheme slightly unreliable presented flowchart reliable scheme interesting examples telephone communication half duplex transmission error correction full duplex telephone errors
1744 stable numerical methods obtaining chebyshev solution overdetermined system equations implementation stiefel exchange algorithm determining chebyshev solution overdetermined system linear equations presented gaussian lu decomposition row interchanges implementation computationally stable literature generalization stiefel algorithm developed permits occasional exchange equations simultaneously chebyshev solutions overdetermined linear systems linear equations exchange algorithm
1745 position paper computing communications effective operation free enterprise creating envisioned information service industry dependent accomplishments restructuring information processing industry clear division costs made computing communications development information services wide multiaccess system concepts information services share computer installations cost construction reasonable development public message switched communications services adequate provisions made information security information networks information systems computing free enterprise computing economics computer installation management government regulation communications services distributed data base program leasing
1746 protection information processing utility critical problems design information processing utility permits flexible sharing user information privacy solution problem discussed protection privacy information processing utility time sharing multi user multiprogramming multiprocessing security shared information controlled access reliable operation segmentation
1747 criteria designing computing systems facilitate debugging designer computing system adopt explicit criteria accepting rejecting proposed system features criteria kind input recordability input specifiability asynchronous reproducibility output criteria imply user desires control influences affecting content extent computer output define scope criteria notion abstract machine programming language notion virtual computer explained examples applications criteria concern reading time day clock synchronization parallel processes protection multiprogrammed systems assignment capability indexes computer design computer design criteria computer systems computer systems design input equipment input equipment design operating systems operating systems design multiprogramming multiprogrammed systems multiprogrammed system design virtual computers programming languages programming language design program semantics programming language semantics determinism reproducibility repeatability deterministic computers protection memory protection information security information privacy computing reliability debugging program debugging program testing parallel processing parallel programming multiprocessing
1748 scheduling philosophy multiprocessing systems collection basic ideas presented evolved workers past years provide suitable framework design analysis multiprocessing systems notions process state vector discussed nature basic operations processes considered connections processes protection analyzed general approach priority oriented scheduling relationship conventional interrupt systems explained aspects time oriented scheduling considered implementation scheduling mechanism analyzed detail feasibility embodying hardware established finally methods interlocking execution independent processes presented compared time sharing multiprocessing process scheduling interlocks protection priority interrupt systems
1749 structure multiprogramming system multiprogramming system activities divided number sequential processes sequential processes hierarchical levels independent abstractions implemented hierarchical structure proved vital verification logical soundness design correctness implementation operating system multiprogramming system system hierarchy system structure real time debugging program verification synchronizing primitives cooperating sequential processes system levels input output buffering multiprogramming processor sharing multiprocessing
1750 considerations design multiple computer system extended core storage large quantities addressable executable fast random access memory heighten multiprogramming performance multicomputer system discussed general design hardware arrangement software components functions system based planned configuration dual cdc share million words extended core storage generalization design special emphasis estimating expected gains compared traditional configuration separate independent computers extended core storage observation made conventional slower speed random access storage devices place faster memory multiple computer systems extended core storage multiprogrammed operating systems multiprocessor operating systems control data corporation operating system ecs
1751 working set model program behavior basic reason absence general treatment resource allocation modern computer systems adequate model program behavior paper model working set model developed working set pages process defined collection recently pages knowledge vital dynamic management paged memories process working set shown manifestations ongoing computational activity processor demand memory demand defined resource allocation formulated problem balancing demands equipment general operating system concepts multiprocessing multiprogramming operating systems program behavior program models resource allocation scheduling storage allocation
1752 resource management medium scale time sharing operating system task scheduling resource balancing medium size virtual memory paging machine discussed relation combined batch processing time sharing environment synopsis task scheduling paging algorithms implemented results comparative simulation tracing development algorithms predecessor versions discussion emphasis balancing system performance relative characteristics system resources simulation results relative alternate hardware characteristics effects program mix loading variations presented time sharing operating systems resource management task scheduling paging system simulation memory management virtual memories
1753 virtual memory processes sharing multics basic concepts involved design multics operating system introduced multics concepts processes address space virtual memory defined paging segmentation explained means users share procedures data discussed mechanism symbolic references dynamically transformed virtual machine addresses detail virtual memory information sharing shared procedures data sharing dynamic linking segmentation paging multiprogramming storage management storage hierarchies file maintenance
1754 dynamic storage allocation systems recent computer system designs hardware facilities provided easing problems storage allocation method characterizing dynamic storage allocation systems functional capabilities provided underlying techniques presented basic purpose paper provide perspective utility hardware facilities assessed survey storage allocation facilities representative computer systems included appendix segmentation paging multiprogramming storage allocation storage management virtual memories storage fragmentation storage hierarchies addressing mechanisms
1755 proceedings acm symposium operating system principles
1756 hollerith punched card code proposed usa standard usa standard card code punched card punched card code hole patterns hole patterns assignment punched card systems
1757 data code calendar date machine machine data interchange proposed usa standard usa standard data code calendar date machine machine data interchange recording calendar date data group identifier
1758 symmetric polynomials algorithm symmetric polynomials symmetric sum unitary symmetric functions schur functions
1759 transportation problem algorithm transportation problem linear programming
1760 normal curve integral algorithm normal curve integral probability special functions
1761 chi squared integral algorithm chi squared integral probability special functions
1762 dilogarithm algorithm dilogarithm function special functions
1763 roots low order polynomial equations algorithm root finders polynomial equation roots quadratic equation roots cubic equation roots biquadratic equation roots polynomial zeros
1764 panel discussion computer appreciation session acm anniversary conference august entitled education design experiments computer appreciation half consisted panel discussion computer appreciation organized chaired elliot organick panelists charles davidson bernard galler richard hamming alan perlis making prepared statements panelists joined discussion andries van dam arthur kohn presented papers half transcript panel discussion condensed dr organick edited panelists remarks referred papers van dam kahn discussion half session pertinent papers included references computer appreciation students liberal arts courses survey courses beginning programming content computer courses dropout rates college versus precollege teaching social responsibility
1765 expenditures sources funds utilization digital computers research instruction higher education projections southern regional education board published complete report survey conducted determine funding characterize utilization computers research instruction institutions higher education united states sampling survey estimates total population presented computing centers research instruction utilization expenditures support sources funds higher education post secondary education colleges universities
1766 quasilinearization estimation differential operators eigenvalues linear ordinary differential operator unknown constants number eigenvalues values unknown constants estimated precise formulation provided effective numerical procedure solution results computational experiments quasilinearization eigenvalues differential operators nonlinear boundary problems inverse problems differential equations system identification
1767 general purpose graphic language interactive computers graphic terminals permit problems solved machines order handle variety applications expedient develop general purpose graphic language number graphic devices system designed produce language quickly cheaply model graphic language developed system presented graphic language interactive incremental compilation language design metacompiler syntax language
1768 global parser context free phrase structure grammars algorithm analyzing context free phrase structure grammar generating program parse sentence language sentence invalid parser top bottom type recursive number heuristic procedures purpose shorten basic algorithm quickly ascertaining substrings input sentence correspond target nonterminal symbols included generating algorithm parser implemented rca snobol tested successfully number artificial grammars subset algol number routines extracting data grammar minimum lengths derivable strings prefixes interest application context parser syntax directed compiler context free grammars syntactic analysis translators
1769 expanding world computers onward sweep automatic processing information impeded principal barriers geography cost problem complexity man machine communication inadequate sensors lack understanding distance time size main incentive breaching barriers universal processing information urgent greater part human work activity production service computer developments hardware programming time sharing education data communication displays judged effectively remove barriers barrier smashing potentialities continued rapid expansion problem oriented languages effective entire front online computers time sharing rate high measure education increased understanding basic progress computer complex powerful tool important governments scientists studying problems created population explosion analyzing solutions barriers philosophy developments computer aided design problem oriented languages data communication education computer science forecast survey introduction
1770 rules ethics information processing background motivation adoption acm council november set guidelines professional conduct information processing tory ethical codes professions reasons adoption ethical rules considered sections acm guidelines analyzed purpose inform important aspect profession stimulate thought interest ethics professional conduct code ethics acm guidelines professionalism professional societies unethical conduct
1771 curriculum recommendations academic programs computer science report acm curriculum committee computer science report recommendations academic programs computer science developed acm curriculum committee computer science classification subject areas contained computer science presented twenty courses areas prerequisites catalog descriptions detailed outlines annotated bibliographies courses included specific recommendations evolved committee preliminary recommendations undergraduate programs graduate programs computer science discussed recommendations presented development master degree programs ways developing guidelines doctoral programs discussed specific recommendations made importance service courses minors continuing education computer science emphasized attention organization staff requirements computer resources facilities needed implement computer science educational programs computer science courses computer science curriculum computer science education computer science academic programs computer science graduate programs computer science undergraduate programs computer science bibliographies
1772 usascsocr dual case keyboard arrangement proposed usa standard
1773 general purpose alphanumeric keyboard arrangement information interchange proposed usa standard
1774 program overlay techniques general features program overlay systems main types automatic semiautomatic nonautomatic classified programming techniques explained function machine hardware system features implementation semiautomatic overlay facility multiprogrammed system cdc detail special reference real time applications loaders multiprogramming overlay techniques storage allocation segmentation
1775 adjustment inverse symmetric matrix symmetric elements changed algorithm symmetric matrix matrix inverse matrix perturbation matrix modification
1776 maxflow algorithm network liner programming maximum flow
1777 generation permutations lexicographic order algorithm permutations lexicographic order lexicographic generation permutation generation
1778 distribution algorithm fisher distribution student distribution
1779 test probabilities algorithm test student statistic distribution function
1780 harmonic analysis symmetrically distributed data algorithm harmonic analysis cosine series sine series function approximation curve fitting trigonometric series
1781 translator writing systems critical review recent efforts automate writing translators programming languages presented formal study syntax application translator writing discussed section ii approaches automating post syntactic semantic aspects translator writing discussed section iii related topics section iv compiler compiler compiler translator translator writing systems metacompiler syntax semantics syntax directed meta assembler macroprocessor parser syntactic analysis generator
1782 numerical integration formula fourier analysis numerical integration formula presented unequal sampling intervals intervals equally spaced log scale formulation fourier analysis improve accuracy ease usage complete set formulas numerical fourier analysis numerical integration fourier analysis integration
1783 conversions byan conversion floating point number base converted floating point number base converted back floating point number original base combinations rounding truncation conversions question considered significant digits needed intermediate base conversions return original number significant digit floating point numbers significance base conversion rounding truncation
1784 practical error coefficients estimating quadrature errors analytic functions published error coefficients estimating quadrature errors analytic functions computed assumption quadrature rule exact polynomials degree rules rounded values abscissas weights true values integrals polynomials question infinite binary expression quadrature rule exact errors consideration computing practical error coefficients numerical integration quadrature truncation error theoretical error coefficients practical error coefficients integration analytical functions roundoff error
1785 scatter storage techniques scatter storage techniques method implementing symbol tables assemblers compilers reviewed number ways effectively presented variants techniques documented scatter storage hash addressing searching file searching file addressing storage layout
1786 improved hash code scatter storage introduced hash coding method based fixed point division multiplication logical operations method hash table length method handling collisions discussed quadratic search method faster random search free clusters build linear search hash code hash table scatter storage searching
1787 transition matrices compiling algorithms constructs suitable bnf grammar efficient left recognizer sentences language type recognizer number compilers operates pushdown stack transition matrix examples illustrate recognizers effectively purposes usual syntax checking transition matrices compilation translation grammar context free language formal language parsing
1788 general processor programming languages efforts made develop implementing higher level programming language construction compiler proved generally satisfactory paper contended programming language functionally body macro instructions macro call constitutes canonical form terms programming notation supporting discussion logical torical role macro instruction presented discussed conflict machine independence object program efficiency question greatest difficulties lie compiler construction programming language translator programming language processor general translator general processor macro instruction processor meta processor meta language translator meta language processor compiler compiler writing system translator writing system
1789 logarithm gamma function algorithm
1790 muller method finding roots arbitrary function algorithm equation roots function zeros
1791 triangular factors modified matrices algorithm matrix decomposition matrix factors matrix modifier matrix perturbation
1792 exploratory experimental studies comparing online line programming performance exploratory experiments conducted system development corporation compare debugging performance programmers working conditions line line access computer studies measure programmers performance controlled conditions standard tasks statistically significant results experiments faster debugging online conditions important practical finding involves striking individual differences programmer performance methodological problems encountered designing conducting experiments limitations findings pointed hypotheses presented account results suggestions made research online line performance programmer computer communication programming experimental empirical studies programming cost effectiveness programming performance debugging effectiveness time sharing batch processing factor analysis application programmer trainee performance basic programming knowledge test experienced programmer study analysis variance programmer individual differences
1793 presentation alphameric characters information processing proposed american national standard alphameric handwritten input encoding transcription numerals upper case hand printed
1794 fast random number generator ibm pseudorandom number modulus period float normalization characteristic chi square test
1795 optimal code serial parallel computation code optimization sequencing operations detection common subexpressions
1796 index subject algorithms index supplement index subject algorithms comm acm dec
1797 solution linear programs algorithm linear programming variables partial enumeration
1798 coulomb wave functions algorithm coulomb wave functions wave functions special functions function evaluation
1799 elementary functions continued fractions algorithm continued factions pade table
1800 psif algorithm gamma function logarithmic derivative factorial function psi function
1801 analysis variance balanced experiments algorithm analysis variance analysis covariance regression analysis experimental design balanced experiment missing data interblock estimate intra block estimate
1802 regression direct product matrices algorithm analysis variance analysis covariance regression analysis experimental design matrix direct product protection operator orthogonal matrix
1803 complex root finding algorithm downhill method complex relaxation method complex iteration complex equation transcendental complex equation algebraic complex equation
1804 coloring polygonal regions algorithm coloring polygonal regions coloring planar surfaces drawing pictures shading enclosed regions
1805 productivity multiprogrammed computers progress developing analytic prediction method multiprogramming discussed mode computer operation programs concurrently processor memory proceeding central processor unit cpu input output channels programs proceeding intermittently singly eligibility readiness proceed priority represent proceeding continuously simultaneously effective rate fraction enjoy absence programs effective progress rate program sensitive detailed characteristics residents simulation method predicting paper presents results progress developing alternative simulation simulation tested iterative computation rates situations algorithm sensitive factors control phenomenon including nonquantitative topological features programs structures productivity prediction multiprogramming simulation equipment evaluation hardware evaluation monitor operating system system software supervisors performance time sharing time slicing
1806 downhill method downhill method numerical method solving complex equations restriction function analytical introduction method critical review relating literature presented theory method converges shown fundamental dilemma exists breakdown practical applications avoid difficulty improve rate convergence root modifications original method proposed program fortran based modified method algorithm numerical examples included downhill method complex relaxation method complex iteration complex equation transcendental complex equation algebraic complex equation
1807 optimization expressions fortran method optimizing computation arithmetic indexing expressions fortran program presented method based linear analysis definition points variables branching loop structure program objectives processing eliminate redundant calculations references made common subexpression values remove invariant calculations loops efficiently compute subscripts iteration variables provide efficient index register usage method presented requires pass compiler scanned backward development fortran compilers proved produce excellent object code significantly reducing compilation speed fortran optimization expressions compilers compilation subscripts register allocation loops common subexpressions invariant calculations
1808 advanced cryptographic techniques computers cryptographic techniques maintain confidentiality information processed computers dealt special emphasis paid unique characteristics computer files make cryptographic methods relative security costs preferred methods included paper cryptographic cryptanalysis ciphers secrecy systems security systems confidential information processing
1809 numerical analysis ph computer science program numerical analysis study methods procedures obtain approximate solutions mathematical problems emphasis scientific calculation difficulties education broad area center question background emphasis numerical analysis program computer science department emphasize awareness problems computer implementation experimental procedures solid background applied mathematics ph program numerical analysis separation education
1810 automatic folding programs efficient displace manual operation folding program memory discussed measurements brown al nelson automatic folding mechanism simple design demand paging unit built ibm research center belady nelson neil permitting quality compared manual folding discussed shown care unit performs satisfactorily conditions tested operating memory storage interface large speed difference disadvantages prefolding required folding manual examined number important troubles beset computing today shown arise aggravated source concluded folding mechanism normal part computing systems paging automatic paging demand paging folding automatic folding storage hierarchies memory hierarchies replacement algorithms performance measurement
1811 case study programming parallel processors affirmative partial answer provided question program parallel processor computing systems efficiently decrease execution time problems parallel processor systems multiprocessor systems processors simultaneously execute separate tasks single job cooperating decrease solution time computational problem processors independent instruction counters meaning processor executes task program independently processors communication cooperating processors means data storage shared processors program determination distribution current electrical network written parallel processor computing system execution program simulated data gathered simulation runs demonstrate efficient solution problem typical large class important problems shown proper programming solution time processors applied approaches times solution time single processor improper programming lead increase solution time number processors stability method solution investigated parallel processor parallelism parallel programming multiprocessor multiprogramming tasking storage interference electrical network simulation relaxation jacobi gauss seidel convergence
1812 fortran random number generators random number generation monte carlo simulation
1813 generation permutations pseudo lexicographic order algorithm permutations lexicographic order lexicographic generation permutation generation
1814 direct search algorithm function minimization search direct search
1815 direct search algorithm function minimization search direct search
1816 generalized squares fit orthogonal polynomials algorithm squares curve fitting orthogonal polynomials term recurrence polynomial regression approximation forsythe method
1817 computation fourier coefficients algorithm numerical integration fourier coefficients filon method
1818 legendre functions kind real imaginary arguments algorithm legendre function legendre function real imaginary arguments
1819 complex error function algorithm error function complex argument voigt function laplace continued fraction gauss hermite quadrature recursive computation
1820 generation random permutations algorithm permutation random permutation transposition
1821 permanent function square matrix ii algorithm matrix permanent determinant
1822 shortest path forest topological ordering algorithm shortest path tree network directed graph
1823 factorial analysis variance algorithm factorial variance analysis variance statistical analysis
1824 aparel parse request language aparel language extension algorithmic language pl pattern matching capabilities found special purpose languages snobol tmg capability provided parse requests stated bnf format parse requests form programming language special sequencing rules successfully completing parse request piece pl code executed code normal pl strings pieces levels parse normal pl variables information alternatives successful convenient facilities multiple input output streams initiation sequences parse requests subroutine parse time semantic checks included aparel proven convenient building powerful syntax function macro system algebraic language preprocessor debugging system line command parser translator dataless programming general string manipulator text processing string processing symbol manipulation pl bnf syntax parser translator pattern matching
1825 practical method constructing lr processors practical method constructing lr processors developed processors capable recognizing parsing input single backup scan number steps equal length input number steps derivation technique presented based original method knuth decreases effort required construct processor size processor produced procedure involves partitioning grammar number smaller parts lr processor constructed part knuth algorithm conditions relating individual processors satisfied lr processor entire grammar constructed procedure lr parser algol obtained lr grammar syntactic analysis parser deterministic language syntax directed compiler language processor context free language algol
1826 lisp garbage collector virtual memory computer systems paper garbage collection algorithm list processing systems operate large virtual memories object algorithm compaction active storage discovery free storage free storage exhausted decision garbage collect easily made criteria decision discussed garbage collector virtual memory list processing storage allocation
1827 performance monitoring time sharing system software measurement facility part general purpose time sharing system date collection facility dcf implemented michigan terminal system mts system model exists purpose monitoring operating system user program behavior performance structure mts outlined order explain implementation dcf events system identified recorded supervisor dumped magnetic tape auxiliary program line processing events user programs unrelated system actions recorded supervisor call time occurrence event accurately recorded data items identified job type overhead data collection interference normal jobs carefully analyzed shown minimal examples information obtained facility applications general guidelines offered construction future monitoring programs performance monitoring performance measurement program behavior performance data multiprogramming performance software measurement time sharing performance system evaluation software monitor software instrumentation
1828 synchronization parallel accessed data base problem considered data base manipulated simultaneously process rules synchronization maximize amount parallel activity allowed assumed data base represented graph data base hierarchy directories line file system methods synchronization processes examined validity discussed performance compared parallel accessing parallel search file search data base synchronization locking deadlock
1829 interactive graphical display monitor batch processing environment remote entry graphic monitor program developed carnegie mellon university cdc computer general purpose batch processing system remote entry existing system graphics hardware graphic monitor resident auxiliary monitor comprehensive managerial capability graphical system response commands human user respond commands user program similar interface routine calls place manual actions human program interact symmetrical equal basis medium graphic monitor choice made designing graphic monitor constraints existing hardware computer system discussed structure monitor program human program interfaces transient swapping version small resident part provision swapped submonitors graphic monitor man machine interaction graphic interface graphic batch environment design graphical system
1830 retrieval times packed direct access inverted file information retrieval direct access memory data base inverted list
1831 comment optimal tree structures information retrieval file searching tree structures double chaining
1832 minimax logarithmic error logarithmic error transformed rational approximation square root
1833 ambiguity description algol ising problem sequences
1834 axiomatic basis computer programming paper attempt made explore logical foundations computer programming techniques applied study geometry extended branches mathematics involves elucidation sets axioms rules inference proofs properties computer programs examples axioms rules formal proof simple theorem displayed finally argued important advantages theoretical practical follow pursuance topics axiomatic method theory programming proofs programs formal language definition programming language design machine independent programming program documentation
1835 iitran programming language iitran language developed students important important features iitran procedure oriented language level block structure variety data types powerful features included discussion design principles student language languages programming languages student programming systems language design high school programs college courses
1836 method determining linear precedence functions precedence grammars precedence relations precedence grammar precisely dimensional precedence matrix information matrix represented concisely pair vectors called linear precedence functions algorithm presented obtaining linear precedence functions precedence matrix algorithm shown possess computational advantages boolean matrices syntax precedence grammar context free parsing transition matrix precedence functions
1837 algol convolution procedure based fast fourier transform algorithm fast fourier transform complex fourier transform multivariate fourier transform fourier series harmonic analysis spectral analysis orthogonal polynomials orthogonal transformation convolution auto covariance autocorrelation cross correlation digital filtering permutation
1838 normal curve integral algorithm normal curve integral probability special functions
1839 singular decomposition complex matrix algorithm singular values matrix decomposition squares solution pseudoinverse
1840 efficient prime number generator algorithm prime numbers factoring number theory
1841 prime number generator treesort principle algorithm prime numbers number theory sorting
1842 algorithm generating ising configurations algorithm ising problem sequences
1843 choice base digital computer considered memory words composed state devices sign bits state devices choice base internal representation floating point numbers computer discussed shown sense floating point accuracy base choice number representations
1844 modular computer sharing system alternative approach design organization general purpose interactive multiterminal computing system presented system organization conceptually simple arrangement bank interchangeable computers memory processor pair assigned process terminal jobs arrive computers serves master control computer supervises collection distribution messages remote terminals simplest form disk drive connected terminal crosspoint switching network disk drive connected computer active terminal user occupies dedicated disk drive share computer terminal users simple manner ratio users computers dependent size power machines computation requirements mix users system organization inherently simpler reliable approach time sharing computers potential highly system low cost economic configurations range systems sizes span order magnitude finally problem programs developed remote terminal users run dedicated batch system compatible computers multiple terminal systems terminal oriented systems multiple processor systems high availability conversational systems general purpose time sharing systems real time response system modular constructed systems modular computer sharing systems graphics file switch intercomputer communications control computer problem computer roll roll
1845 loader standardization overlay programs overlay capability generation computer systems cdc ge ibm univac critique systems based actual experience large overlaid trajectory simulation program short history description program presented standardization minimum capabilities loaders recommended programs operate computer system easily converted maintained proposal overlay software incorporates memory occupation specification concept conditional tree structure delineated concept efficient cost effective utilization memory increased flexibility program structure loader overlay partition region segmentation linkage linkage editor standardization memory utilization memory occupation tree structure cdc ge ibm univac
1846 simulating networks parallel processes simultaneous events occur problems simulating discrete event systems computer systems conventional digital computer dealt systems assumed network interconnected sequential processes briefly reviewed common techniques handle simulations simultaneous events occur handled simple priority rules problem dealing simultaneous events separate processes introduced abstraction problem developed admits solution majority commonly encountered problems technique find method simulating parallel events report found cases shown find solution extending information solution technique cases technique computationally unfeasible additional information provided simulation parallel processes simultaneous events picture processing computer system simulation
1847 algorithm finding fundamental set cycles graph fast method presented finding fundamental set cycles undirected finite graph spanning tree grown vertices examined turn unexamined vertices stored pushdown list await examination stage process top element pushdown list examine inspect edges graph examined tree fundamental cycle added edge tree stage vertices graph large store required creases time depends type graph involved bounded shown bounds attained terms storage algorithm similar gotlieb corneil superior welch terms speed similar welch superior gotlieb corneil testsshow algorithm remarkably efficient random graphs fundamental cycle set graph algorithm cycle spanning tree
1848 damped taylor series method minimizing sum squares solving systems nonlinear equations algorithm solution equations squares approximation newton method
1849 function minimization algorithm function minimization
1850 generation permutations lexicographic order algorithm permutations direct lexicographic order reverse lexicographic order lexicographic generation
1851 generator spanning trees algorithms spanning trees trees graphs
1852 base mobile programming system algorithm macro processor base implementation bootstrapping processors programming languages algorithm easily implemented contemporary computing machines experience programming languages implementation based algorithm language transferred machine man week machine bootstrapping macro processing machine independence programming languages implementation techniques
1853 compact list representation definition garbage collection system implementation compact lists stored sequentially memory chained pointers convenient swym system permits list chained compact combination description list representation operators implemented similar lisp system garbage collector attempts make lists compact relocates rearranges list storage temporary storage unique list compacting garbage collection algorithm presented detail classes macros implement system finally consideration design factors essential success plex processing system implementation data structure data representation list structure list representation list compact list garbage collection relocation storage reclamation macro primitive list operations plex processing plex pointer list processing system lisp free storage
1854 multiprogramming machine coding computer organization author feels interrupt feature modern computers potent source programming pitfalls errors heavily contribute unreliability programs making programming scheme presented avoids concept interrupt permits specification concurrent pseudoconcurrent activities supposedly perspicuous manner intended serve basis construction operating systems prime examples programs concurrent activities scheme includes set basic instructions generation termination synchronization parallel processes set routines representing instructions simulating hypothetical machine organization implemented test ibm system programs instructions written pl presented multiprogramming parallelism interrupt input output computer organization file handling pl
1855 program syntactic analysis english sentences program produces syntactic analyses english sentences respect transformational grammar main features analyzer limited dictionary english words pursues analysis paths simultaneously processing sentence left form representation dictionary grammar outline account analysis procedure techniques keeping size analysis record reasonable limits avoiding dynamic application transformational rules number examples output produced program output includes timing information syntactic analysis language processing language analysis parsing analysis procedure recognition procedure english sentences linguistics psycholinguistics transformational grammar limited dictionary predictive analysis
1856 teachable language comprehender simulation program theory language teachable language comprehender tlc program designed capable taught comprehend english text text program input comprehends text correctly relating explicit implicit assertion text large memory memory semantic network representing factual assertions world program creates copies parts memory found relate text adapting combining copies represent meaning text means meaning text program successfully comprehends encoded format memory form added memory factual assertions memory capabilities correctly relating text memory prior content taught program needed tlc presently small number examples assertions capabilities system notations expressing provided program corresponds general process comprehending language methodology adding additional information process requires comprehend text kind memory structure comprehension process tlc factual assertions capabilities relating text stored assertions generalize automatically assertion capability put system comprehend great sentences future addition single factual assertion linguistic capability provide large increment tlc effective knowledge world ability comprehend text program strategy presented general theory language comprehension natural language processing natural language comprehension teachable computer program psychological simulation human memory simulation computer linguistics linguistic performance theory
1857 filon quadrature algorithm quadrature filon quadrature integration filon integration fourier coefficients fourier series
1858 algorithm filon quadrature algorithm filon quadrature considerable attention devoted analysis round truncation errors algorithm includes automatic error control feature quadrature filon quadrature integration filon integration fourier coefficients fourier series
1859 error bounds periodic quintic splines explicit error bounds periodic quintic spline interpolation developed derivative periodic spline shown sixth fourth order approximation mesh points derivative function interpolated spline interpolation error bounds
1860 algol based associative language high level programming language large complex associative structures designed implemented underlying data structure implemented hash coding technique discussion includes comparison work examples applications language algol associative programming language data structure
1861 mad definition facility definition facilities higher level languages users language define operators data types mad language appears predefined information writes definitions motivation form definitions written conclusions drawn future definitional facilities mad definitions operators macros higher level language
1862 computing capabilities argentine chilean universities author reports trip universities argentina chile november describing university conditions computing activities universities experiencing student discontent status quo solutions attempting contrast argentina excluding students participating university government chile allowing participation university computing service academic activities limited number computers small capacity larger ibm exception computing science academic programs rare situation means attributable responsible computing developments strive excellence system hard universities strong european traditions adapt slowly academic resources disciplines superimposed severe technological economic constraints developing nation absence conscious government emphasis strengthening computing capabilities future progress retarded university education computing science academic programs university computing centers surveys computing centers university computing capabilities university student relationship argentine universities chilean universities south american universities developing nations
1863 minit algorithm linear programming algorithm linear programming dual simplex method primal problem dual problem
1864 generation hilbert derived test matrix algorithm test matrix hilbert matrix
1865 algol reference language editor algorithm symbol manipulation
1866 characteristic values solutions mathieu differential equation algorithm mathieu differential equation mathieu function characteristic periodic solution radial solution
1867 expected lengths sequences generated sorting replacement selecting replacement selecting technique sorting interested ratio expected length sequence generated technique number memory cells complex variable theory shown asymptotically average interval sign replacement selecting sorting sequence lengths asymptotic expected length recursion relation generating function meromorphic function
1868 obtaining correct input approach information put machine readable form scientific business origins keypunched paper addressed difficulty obtaining correctly keypunched key verified data alternative method suggested computer rule possibility errors input technique explained illustrated reference working program involves essentially phases phase errors detected machine subsequently phase corrected correct data correct input data correction keypunch key verifier verifier
1869 block structures indirect addressing garbage collection programming languages included explicit implicit block structures provide naming convenience programmer indirect addressing snobol naming constraints introduced modifications snobol resulting desirable consequences naming constraints disappear indirect addressing function definitions significant saving number calls garbage collector garbage collected expense time function returns calling program modifications implemented extension snobol dialect block structures indirect addressing garbage collection local names snobol
1870 techniques pseudorandom numbers computer simulation algorithm uniform pseudorandom integers construct binary numbers probability bit word bit assume desired parameter techniques making numbers simulation programming random numbers simulation boolean algebra bit manipulation
1871 automatic contour map methods contour mapping means digital plotter discussed method presented simple implemented programs small number instructions fortran iv instructions required comparisons methods proposed authors performed fortran iv program implementing proposed method istituto di elettrotecnica ed elettronica politencnico di milano contour map level lines digital plotting function scanning
1872 chebyshev interpolation quadrature formulas high degree errata
1873 accelerating lp algorithms shown method computing related products accelerate pricing phase lp algorithms lp applications linear programming revised simplex method multiple pricing product
1874 generating pseudorandom numbers complement machine ibm familiar multiplicative congruential generator examined context type complement arithmetic ibm series sequences residues considered relationships established shown sequence positive negative residues produced simply economically conventional approach period loss desirable statistical properties easily generated sequence involving absolute values shown period attractive statistical properties statistical properties sequences related previously established criteria random number uniform distribution pseudo random number random number generator multiplicative congruential generator power residue complement arithmetic ibm arithmetic
1875 polynomial spline approximation quadratic programming problem approximation function fitting set data approximating function required derivations sign range approximation studied approaches presented quadratic programming provide constraints derivatives selection function yields fit modified bernstein polynomial scheme spline fit constant sign derivatives bernstein polynomials linear concavity constraints quadratic programming splines
1876 generation test matrices sign patterns prescribed positive spectra class orthogonal transformations presented members transform positive diagonal matrix matrix special sign patterns test matrices positive matrices sign patterns orthogonal transformations positive eigenvalues
1877 prevention system deadlocks problem design operating systems selection resource allocation policy prevent deadlock deadlock situation resources allocated tasks tasks continue published solutions restrictive handle problem sufficient generality suggest policies occasion refuse request safely granted algorithms presented examine request light current allocation resources determine granting request introduce possibility deadlock proofs appendixes show conditions imposed algorithms sufficient prevent deadlock algorithms successfully system multiprogramming time sharing scheduling resource allocation
1878 recovery reentrant list structures slip consequence reference count based space recovery system employed slip reentrant list structures recovered explicitly erased lisp garbage collection schemes free impediment depend find mark nodes reachable program variables tracing descendants program variables identified collected list creating function list slip amended mark lists programmer wishes assume responsibility modification lisp garbage collector recovers abandoned reentrant list structures appended slip system list processing slip garbage collection
1879 note storage fragmentation program segmentation main purpose paper presentation results series simulation experiments investigating phenomenon storage fragmentation types storage fragmentation distinguished external fragmentation loss storage utilization caused inability make storage fragmented large number separate blocks internal fragmentation loss utilization caused rounding request storage allocating exact number words required striking result apparently general rule rounding requests storage reduce number sizes blocks coexisting storage loss storage increased internal fragmentation saved decreased external fragmentation method segment allocation accompanying technique segment addressing advantage result evidence presented advantages method conventional paging techniques storage allocation storage fragmentation paging segmentation addressing
1880 chebyshev solution overdetermined linear system algorithm chebyshev solutions determined linear systems linear equations exchange algorithm
1881 transpose vector stored array algorithm matrix transposition array transposition vector stored array
1882 determination square root positive definite matrix algorithm matrix symmetric matrix positive definite matrix matrix square root
1883 modified romberg quadrature algorithm numerical integration romberg quadrature trapezoid values rectangle values error bound
1884 anomaly space time characteristics programs running paging machine running time programs paging machine generally increases store programs constrained run decreases experiments revealed cases reverse true decrease size store accompanied decrease running time informal discussion anomalous behavior case fifo replacement algorithm formal treatment presented paging machines demand paging replacement algorithm
1885 computer system transformational grammar comprehensive system transformational grammar designed implemented ibm computer system deals transformational model syntax lines chomsky aspects theory syntax major innovations include full formal description syntax transformational grammar directed random phrase structure generator lexical insertion algorithm extended definition analysis simple problem oriented programming language algorithm application transformations expressed paper present system discussing general attitudes underlying development system outlining system discussing important special features references papers aspect system detail transformational grammar natural language syntax language processing language analysis sentence generation lexical insertion computational linguistics syntax
1886 generation optimal code expressions factorization set expressions compiled methods presented increasing efficiency object code produced factoring expressions finding set subexpressions occurs expressions subexpressions factors ascertained sequencing procedure applied orders factors expressions information computed correct sequence factors retained memory minimal amount time assignment algorithm executed order minimize total number temporary storage cells required hold results evaluating factors order make techniques computationally feasible heuristic procedures applied global optimal results necessarily generated factorization algorithms applicable problem factoring boolean switching expressions factoring polynomials encountered symbol manipulating systems factorization algorithms code optimization sequencing operations detection common subexpressions factorization boolean expressions
1887 recursive relation determinant pentadiagonal matrix recursive relation relating leading principal minors developed determinant pentadiagonal matrix numerical included calculating eigenvalues pentadiagonal matrix quindiagonal matrix quindiagonal matrix band matrix determinant characteristic polynomial eigenvalues
1888 spline function methods nonlinear boundary problems solution nonlinear differential equation point boundary conditions approximated quintic cubic spline function method suited nonuniform mesh size dynamic mesh size allocation uniform mesh size error quintic spline typical error numerov method requiring differential equation satisfied mesh points results set difference equations block tridiagonal easily solved relaxation standard methods boundary problems differential equations finite differences functional approximation iterative methods nonlinear equations spline functions
1889 introducing computing smaller colleges universities progress report technical means routine computer service smaller colleges universities provided remote terminals central facility access effective organizational educational methodology introducing computing institutions developed experience years statewide network involving institutions discussed lessons include importance separate organization representing small colleges necessity campus training institutions special programming documentation support users development curriculum evolutionary means regional network introducing computing graduate education instructional usage academic applications curriculum development orientation project regional center consortium remote computing
1890 simulation traffic flows network computer simulation program deals traffic flows network large area road segmented blocks ten meter lengths represented bidirectional list computer memory movement cars transfer cars block expressed proper formula formula based supposition speed cars block determined density cars block speed versus density curve empirically numerical values simulation scheme excellent point makes trace dynamic behavior traffic flows variety situations examples actual area city kyoto japan traffic simulation traffic flow traffic network traffic control traffic density intersection signal setting vehicle road network list structure computer simulation
1891 dimensional computer display stereographic display terminal produced raster display brad recently developed brookhaven system rotating refresh memory feed standard television monitors produce stereographic display computer calculates projected video images object viewed separate points resulting video maps stored separate refresh bands rotating memory output signals connected separate color guns color television monitor creating superimposed image screen optical separation achieved viewing image color filters display interactive viewed large group people time computer graphics dimensional display swept raster display interactive stereographic terminal video map color separation
1892 degree multiprogramming page demand systems simple stochastic model offers base understanding relationship number programs permitted share memory degree multiprogramming drum traffic rates central processing unit utilization page demand multiprogrammed time shared computer systems model preserves key feature property page demand statistics implies burst page demands beginning job quantum execution model markov chain analyzed numerically results presented graphically wide range key environment descriptive parameters implications results time shared system design programming discussed calculation optimal degree multiprogramming wide range parameters presented graphically page demand demand paging time sharing multiprogramming markovian computer models scheduling strategies operating systems memory management
1893 roots polynomials root squaring resultant routine algorithm root finders roots polynomial equations polynomial zeros root squaring operations graeffe method resultant procedure subresultant procedure testing roots acceptance criteria
1894 normal random deviates algorithm normal deviates normal distribution random number random number generator simulation probability distribution frequency distribution random
1895 gaussian quadrature formulas algorithm quadrature gaussian quadrature numerical integration weight function orthogonal polynomials
1896 regular coulomb wave functions algorithm coulomb wave functions wave functions regular coulomb wave functions
1897 coulomb wave functions algorithm coulomb wave functions wave functions
1898 regular coulomb wave functions algorithm coulomb wave functions wave functions regular coulomb wave functions
1899 simplex method procedure employing lu decomposition algorithm simplex method linear programming lu decomposition round errors computational stability
1900 clarification fortran standards initial progress years effort fortran programming language standardized united states initial achievement study application standard specifications revealed maintenance standards result work initiated initial set clarifying interpretations prepared nature maintenance corrections standard specifications completed interpretations reported usa standard fortran basic fortran programming language standardization language standard specification language standard maintenance language standard clarification language standard interpretation standardization committee
1901 dynamic space sharing computer systems formalization relationships space shading program behavior processor efficiency computer systems presented concepts cost space allocation task defined cost combined develop single parameter termed unit cost intent illustrate analytic approach investigation problems space sharing demonstrate method sample problems space sharing storage allocation memory allocation storage management memory management program behavior multiprogramming computer system design allocation strategies replacement strategies demand paging time sharing
1902 automatic grading scheme simple programming exercises discussion alterations made typical university operating system record results programming exercises languages including assembly language computer controlled grading scheme provision made testing programmer supplied data final runs system supplied data exercises run scheme mixed programs special recognition exercises operators automatic grading program programming exercises
1903 chebyshev interpolation quadrature formulas high degree chebyshev polynomials chebyshev interpolation chebyshev quadrature chebyshev points chebyshev zeros interpolation quadrature definite integrals
1904 rough ready error estimates gaussian integration analytic functions numerical integration analytic functions error estimates gaussian integration tabulated error coefficients computable error coefficients cauchy integral formula chebyshev polynomials
1905 simplex method linear programming lu decomposition standard computer implementations dantzig simplex method linear programming based forming inverse basic matrix updating inverse step method implementations bad round error properties paper theoretical background implementation based lu decomposition computed row interchanges basic matrix implementation slow good round error behavior implementation appears cacm algorithm simplex method linear programming lu decomposition round errors computational stability
1906 automated printed circuit routing stepping aperture computer program routing interconnections sided printed circuit board regular pattern lines pins terminals vias feed holes program interconnection planned routing typically upper pin horizontally lower pin top virtual aperture long horizontal slit stepped board planned routing basis rerouting interconnections aperture resolve conflicts lines vias aperture maximize effective line usage conflict resolved aperture arrives lower pin interconnections deleted resolve conflict extensions technique control crosstalk routed interconnections problem obtaining percent interconnect discussed routing printed circuit interconnections aperture stepping aperture computer program circuit board lines vias pins
1907 note reliable full duplex transmission half duplex links simple procedure achieving reliable full duplex transmission half duplex links proposed scheme compared type recently literature finally comments made group related transmission procedures shown unreliable circumstances data transmission error correction full duplex half duplex transmission control communications
1908 time sharing batch processing experimental comparison values problem solving situation experimental comparison problem solving time sharing batch processing computer systems conducted mit paper study attempt evaluate systems predominant user population decade professionals nonprogrammers computer aid decision making problem solving programming end statistically logically significant results equal cost usage computer systems higher level performance attained time sharing users indications significantly lower costs resulted time sharing users stopped work reached performance level equal batch users users speed problem solving attitudes made time sharing favorable system time sharing batch processing user performance man machine communications cost effectiveness line line performance decision making performance user programmer behavior programming experimental empirical studies problem solving research man machine communications man machine symbiosis
1909 computation jn numerical integration shown practical compute jn numerical integration integral representation trapezoidal rule error approximation studied empirically bessel function numerical integration trapezoidal rule
1910 algorithm solving special class tridiagonal systems linear equations algorithm presented solving system linear equation bu tridiagonal special form shown algorithm fast gaussian elimination method suggested solving systems addition explicit formulas inverse determinant matrix tridiagonal gaussian elimination central difference
1911 coordination reduction sentence analysis class coordination phenomena natural languages considered frame work transformational theory account phenomena proposed machinery added syntactic component transformational grammar machinery includes rule schemata conditions applied conditions determining sequence subtrees performed solution syntactic analysis problem class grammars outlined precise specification generative procedure paper inverse form lisp function definitions natural languages generative grammar transformational theory syntax coordination sentence coordination sentence coordination coordination reduction syntactic analysis grammar testing program rule testing
1912 simulation outpatient appointment systems experimental computer program simulates appointment systems employed outpatient departments hospitals major kinds appointment systems individual block simulated purpose simulator enable user evaluate effectiveness alternative appointment systems clinical environment simulation scheduling appointment system outpatient department medicine health management science operations research
1913 polygamma functions arbitrary precision algorithm polygamma function psi function digamma function trigamma function tetragamma function pentagamma function special functions
1914 matrix scaling integer programming algorithm integer programming linear algebra mathematical programming matrix condition matrix scaling
1915 algorithm hidden line elimination algorithm presented elimination hidden lines representation perspective view concave convex plane faced objects picture plane edges objects considered sequentially planes hide point edge found computing time increases roughly square number edges algorithm takes advantage reduced number concave points automatically recognizes object concave points considered case result obtained simpler hidden line elimination back line recognition dimensional representation plane faced objects perspective view machine rendering solids automatic drawing displaying techniques computer graphics man machine interaction man machine communication computer aided design
1916 analysis boolean program models time shared paged environments directed graphs matrices frequently represent logical structure sequences computer instructions techniques addition data references represented nondirected model complete structural specification program represented combined model transformation combined model yields model additional timing information contained analysis models prior execution yields information valuable determining segmentation instructions data time shared environment initial page loading execution analysis ahead control page turning time sharing paging segmentation executive compiler monitor program model
1917 algol procedure fast fourier transform arbitrary factors algorithm fast fourier transform complex fourier transform multivariate fourier transform fourier series harmonic analysis spectral analysis orthogonal polynomials orthogonal transformation virtual core memory permutation
1918 distribution indistinguishable objects distinguishable slots algorithm
1919 efficient algorithm sorting minimal storage algorithm sorting minimal storage sorting digital computer sorting
1920 test probabilities algorithm test snedecor statistic fisher test distribution function
1921 algol convolution procedure based fast fourier transform algorithm fast fourier transform complex fourier transform multivariate fourier transform fourier series harmonic analysis spectral analysis orthogonal polynomials orthogonal transformation convolution auto covariance autocorrelation cross correlation digital filtering permutation
1922 proposed usa standard data communication control procedures usa standarad code information interchange data communication data communication control procedures data communication establishment termination procedures data communication message transfer procedures data communication error control procedures data communication polling selection procedures communication communication control procedures communication establishment termination procedures communication message transfer procedures communication error control procedures communication polling selection procedures link link control procedures link establishment termination procedures link message transfer procedures link error control procedures link polling selection procedures data link data link control procedures data link establishment termination procedures data link message transfer procedures data link error control procedures data link polling selection procedures
1923 pseudofiles approach system interfaces high level languages basic input output support facilities shown technique provide potentially inexpensive methods programs communicate deeply embedded facilities command language processors operating systems interfaces input output high level languages command language
1924 organizing matrices matrix operations paged memory systems matrix representations operations examined purpose minimizing page faulting occurring paged memory system shown carefully designed matrix algorithms lead enormous savings number page faults occurring small part total matrix main memory time examination addition multiplication inversion algorithms shows partitioned matrix representation submatrix partition page cases induced fewer page faults row row representation number page pulls required matrix manipulation algorithms studied function number pages main memory algorithm matrix algorithms array processing paging algorithms paged memory systems virtual memory systems array storage allocation storage allocation
1925 concepts contour map processing generalized techniques simplify solution problems relating contour maps techniques makes topological properties contour maps topology represented graphical structure adjacent contour lines connected nodes generalized technique consists utilizing geometrical properties determine characteristics straight lines drawn contour map techniques applied problem locating ground track aircraft elevation readings obtained flight map contour map contour lines topological properties geometrical properties graph contour map navigation
1926 description format text processing program format production program facilitates editing printing finished documents directly printer small computer system features good performance totally free form input flexible formatting capabilities including columns page automatic capitalization aids index construction minimum nontext items written fortran iv text processing indexing printing documentation text editing formatting frequency dictionary justification vocabulary
1927 information science ph computer science program report recommendations sample curriculum general area information organization information system design ph computer science program subject area briefly listing desirable graduate level courses suitable bibliographies appended curriculum graduate courses university courses computer science curriculum information science information organization information retrieval data retrieval language analysis information processing
1928 exclusive simulation activity digital networks technique simulating detailed logic networks large active digital systems essential objectives sought improved ease economy model generation economy execution time space facility handling simultaneous activities main results obtained clear separation structural behavioral model description reduction manual tasks converting boolean logic structural model elimination manual processes achieving exclusive simulation activity event scheduling technique deteriorate economy event queue grows length simulation procedure deals effectively mixture serial simultaneous activities passage time simulated precise quantitative fashion systems simulated combinations synchronous asynchronous logic aspects techniques simulation network structures digital networks simulation logical simulation digital simulation large systems simulation network structures scheduling queuing simultaneous activities parallel events
1929 images computers microfilm plotters digital computers widely processing information data kinds including pictorial information contained photographs graphical representations efficient conversion facilities putting graphical information computer retrieving graphical form needed commonly employed devices obtaining permanent graphical output digital computers microfilm plotter regrettably present models provision producing images continuous gray scale half tones note programming techniques obtaining half tone pictures microfilm plotter control digital computer illustrative examples methods computer images half tone pictures microfilm plotters processing
1930 extremely portable random number generator extremely portable subroutines needed moderate quality efficiency suffice typically occurs library functions random number generation core sorting universal standardized literature random number generators algorithm meets requirements sort extremely portable line fortran program provided based important paper coveyou macpherson methods fourier analysis applied probability function consecutive tuples provided generator equal small modulus maintain portability prevents quality generator high generator compares bounds established mentioned paper random number generators random numbers random number analysis random generators linear sequential generators random number program pseudo random numbers
1931 interval arithmetic determinant evaluation testing chebyshev system recent papers hansen hansen smith shown interval arithmetic effectively bound errors matrix computations present paper method proposed hasen smith compared straightforward determinant evaluation computational results show accuracy running times expected determinant evaluation application determinants program test set functions form chebyshev system presented interval arithmetic range arithmetic error bounds determinant evaluation chebyshev system mathematical proof computer
1932 logarithmic error newton method square root problem obtaining optimal starting values calculation square root newton method considered pointed relative error measure goodness fit optimal results obtained initial approximation fit shown called logarithmic error initial fit optimal types error logarithmic error appears simplify problem determining optimal initial approximation square root newton method relative error logarithmic error fit optimal approximation maximal error recurrence relation integer root error curve
1933 coding lehmer pseudo random number generator algorithm coding technique presented quick evaluation lehmer pseudo random number generator modulo prime mersenne number produces numbers bit greater computer computation method extendible limited problems modular arithmetic prime factorization primitive root largest prime mersenne number construction pseudo random number generator increased cycle length pseudo random number random number modular arithmetic uniform probability density uniform frequency function simulation prime factorization primitive roots
1934 arithmetic expressions trees description tree representing evaluation arithmetic expression drawn number accumulators needed computation represented straightforward manner representation reduces choice order computation specific problem theory graphs algorithm solve problem presented arithmetic expression compiler design graph theory programming storage minimization topological ordering tree
1935 randomized binary search technique mathematical model developed variance number trials recover document randomly received list files search method binary nature offers potential information retrieval systems binary pattern file examination graph theory information retrieval mathematical model partitioning probabilistic method random sequencing search techniques tree structures
1936 variable length tree structures minimum average search time sussenguth suggests paper file organized doubly chained tree structure search update frequently structure compromise fast search slow update characteristics binary searching slow search fast update characteristics serial searching method limiting restriction terminal nodes lie level tree paper considers effect relaxing restriction trees property priori filial set node defined studied proved coding nodes filial set respect number terminal nodes reachable sufficient guarantee minimum average search time general case entire structure tree changeable treated procedure developed constructing tree minimum average search time simple closed expression minimum average search time obtained function number terminal nodes storage capacity required implement doubly chained tree structure digital computer determined finally total cost structure sussenguth cost criterion computed shown significant improvements average search time total cost obtained relaxing sussenguth restriction terminal nodes lie level tree information retrieval file searching tree structures double chaining
1937 codas data display system codas customer oriented data system user oriented data retrieval display system command language system user easy means data retrieval display requests data displayed tables graphs produced format ready publication paper statements request language general system design data display information retrieval graphic display command languages report program generation management data processing
1938 criteria time sharing system performance time sharing systems defined article multiaccess systems permit terminal user utilize essentially full resources system sharing time terminal users terminal user ability utilize full resources system makes quantitative evaluation time sharing systems difficult criteria successfully perform level quantitative time sharing system performance evaluation time sharing performance criteria time sharing system operation time sharing performance analysis
1939 directed random generation sentences problem producing sentences transformational grammar random generator create phrase structure trees input lexical insertion transformational phases discussed purely random generator produce base trees blocked transformations frequently long practical interest solution offered form computer program user constrain direct generation simple powerful device restricted subtrees program directed random generator accepts input subtree restrictions produces tree satisfies restrictions ready phase grammar underlying linguistic model noam chomsky presented aspects theory syntax program written fortran iv ibm part unified computer system transformational grammar partial grammars english transformational grammar natural language syntax language processing sentence generation computational linguistics syntax
1940 calculation polynomial derivative values horner scheme algorithm function evaluation polynomial evaluation algol procedure horner scheme
1941 distribution algorithm fisher distribution students distribution
1942 finding solution functional equations unknowns algorithm functional equations interpolation nonlinear equations secant method
1943 complete elliptic integrals algorithm special functions complete elliptic integral kind complete elliptic integral kind
1944 student distribution algorithm student distribution test small sample statistics distribution function
1945 role programming ph computer science program general paper role programming advanced graduate training discussed subject matter related programming programming se considered importance application formalism considered good empirical experimentation outline sequence courses included subject headings obtained extensive bibliography bibliography programming references included graduate level programming graduate programs content sequence graduate curriculum programming research topics programming bibliography
1946 computing polynomial resultants bezout determinant collins reduced algorithm algorithms computing resultant polynomials variables key repetitive step computation solving systems polynomial equations elimination studied determining algorithm computer implementation depends extent extraneous factors introduced extent propagation errors caused truncation real coefficients memory requirements computing speed preliminary considerations narrow choice algorithm bezout determinant collins reduced polynomial remainder sequence algorithm detailed tests performed sample problems conclusively show bezout determinant superior respects univariate polynomials case collins reduced algorithm faster bezout determinant proves strikingly superior numerical accuracy displaying excellent stability regard round errors results tests reported detail resultant algorithm algorithm polynomial resultant elimination bezout determinant sylvester determinant reduced algorithm euclidean algorithm multivariate polynomial equations
1947 object code optimization methods analyzing control flow data flow programs compilation applied transforming program improve object time efficiency dominance relationships indicating statements necessarily executed global common expression elimination loop identification implementation optimizations os fortran compilers data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system
1948 computers group theory survey computers applied increasingly diverse range problems group theory important areas application present coset enumeration subgroup lattices automorphism groups finite groups character tables commutator calculus group theory programs range simple combinatorial numerical programs large symbol manipulation systems survey important algorithms contrasted results obtained existing programs extensive bibliography included group theory coset enumeration subgroup lattices automorphism groups character tables commutator calculus topology crystallography permutation groups abelian groups discrete mathematics numerical programming symbol manipulation survey
1949 finiteness assumptions intellectual isolation computer scientists algol fortran finiteness assumptions intellectual isolation integer variable range memory finiteness finite word size
1950 efficient handling binary data binary variables dummy variables bit strings cross tabulations
1951 estimates distributions random variables computer communications traffic models study multiaccess computer communications characterized distributions underlying elementary model user computer interactive process model elementary sense random variables generally interest computer communications studies decomposed elements model data examined operational multiaccess systems model shown robust variables model distribution independent systems examined shown gamma distribution describe discrete variables approximations gamma distribution exponential distribution discussed systems studied computer communications time sharing operating systems optimization models
1952 index subject algorithms
1953 exponential integral ei algorithms ansi fortran standard
1954 eigenvalues eigenvectors real symmetric matrix algorithm real symmetric matrix eigenvalues eigenvectors qr algorithm
1955 characteristic values solutions mathieu differential equation algorithm mathieu differential equation mathieu function characteristic periodic solution radial solution
1956 optimum merging mass storage algorithm displayed yields merge orders total read time defined sum seek time data transfer time minimized sort mass storage analysis parameterized terms ratio seek time time takes fill core records file size units core lengths applied conventional cpu mass storage combination explicit formula total read time derived terms parameters correlates total read time calculated optimum merge orders yielded algorithm formula involves roots simple transcendental equation short table roots included numerical results graphically displayed wide range parameters found normalized read time optimum merging hardware configuration proportional file length times logarithm file length sorting merging optimum merging mass storage sort timing drum merging access time
1957 list set generator construct evaluating set expressions list set generator defined algorithms list set generator construct added list processing system system handles sets efficiently generates set results expression involving sets set operators efficiency derives evaluating expression parallel evaluating subexpressions sets arrive final result set manipulating list processing set generation sets lists file processing
1958 improving round runge kutta computations gill method runge kutta gill scheme common based incomplete adaptation floating point operations gill method improved version reduces round error significantly note heart scheme presented fortran language shown improved version method obtained addition fortran statements version significant improvement numerical comparing included runge kutta methods ordinary differential equations round error error analysis
1959 interrupt based organization management information systems programming structure language constructs supervisory system organization proposed design coding large shared data base systems bases organization generalized interrupt structure newly introduced concept file tagging process associating program structures interrupt generating conditions items data base algorithm resolving conflicts arise scheduling interrupt processing routines presented dpl programming language supervisory system concepts implemented illustrated organization proposed management information systems management information systems integrated data processing supervisors interrupts monitoring systems supervisory systems interrupt scheduling parallel processing
1960 process management resource sharing multiaccess system esope main design principles multiaccess system esope emphasis basic ideas underlying design implementation details main features system include ability user schedule parallel processes system primitive operations file memory relationship allocation scheduling policy dynamically takes account recent information user behavior time sharing multiprogramming process scheduling resource allocation
1961 efficient search algorithm find elementary circuits graph theoretically efficient search algorithm presented exhaustive search find elementary circuits graph algorithm easily modified find elementary circuits attribute length rigorous proof algorithm application empirical bounds presented relating speed algorithm number vertices number arcs speed related number circuits graph give relation speed complexity extensions undirected graphs discussed algorithm graph theory circuit search algorithm path search algorithm searching
1962 groove program compose store edit functions time program makes creating storing reproducing editing functions time functions typical generated human beings multiple functions produced long periods time hours sufficiently high sampling rates describe fast human reactions samples functions variety purposes control machine tools sound synthesizers person controls program operates small computer ddp functions stored disk file functions created real time human inputs computer interact stored functions computed functions real time feedback process controlled important link system environment effective man machine interaction carefully nurtured computer music music real time control digital control time functions interactive software hybrid systems conductor program
1963 condition numbers pei matrices matrices condition numbers pei matrices eigenvectors eigenvalues
1964 comment working set model program behavior demand paging working set paging rate multiprogramming
1965 correction logical arithmetic computers complement binary arithmetic binary arithmetic unsigned operand arithmetic maximum significance arithmetic full precision arithmetic
1966 generalized method generating argument function values mapping function decision hierarchy table
1967 improved algorithm produce complex primes algorithm number theory prime numbers complex numbers
1968 eigenvalues eigenvectors real general matrix algorithm eigenvalues eigenvectors latent roots householder method qr algorithm inverse iteration
1969 increasing efficiency quicksort algorithm sorting quicksort
1970 unrecorded magnetic tape information interchange track cpi nrzi cpi pe proposed american national standard input output magnetic tape information interchange measurement instrumentation phase encoded recording
1971 recorded magnetic tape information interchange cpi phase encoded proposed american national standard input output magnetic tape information interchange measurement instrumentation phase encoded recording
1972 nonrecursive list compacting algorithm simple nonrecursive list structure compacting scheme garbage collector suitable compact lisp list structures presented algorithm avoids recursion partial structure built track lists copied list compacting garbage collection compact list lisp
1973 linear quotient hash code method hash coding presented shown possess desirable attributes specifically algorithm simple efficient exhaustive needing time probe probes lookup performance data implementation hints hashing hash code scatter storage calculated address search table lookup symbol table keys
1974 neater pl source statement reformatter neater accepts pl source program operates produce reformatted version logical mode neater logical structure source program indentation pattern output logic errors discovered neater logical analysis discovered economically compilation trial runs number options give user full control output format maximize utility neater aid early stages development pl source deck option usage neater insert logical unit coding statement case number times executed recorded execution feature expected provide major aid optimization pl programs logical analysis pl source reformatting pl source documentation aid execution time usage data
1975 multiple precision division algorithm generalized division algorithm positive integral operands presented depending algebraic relationship ciphers divisor adjustments original divisor dividend performed division operation initiated uniqueness method trial cipher quotient equal greater final replacement multiple precision division adjustment generalize
1976 multi attribute retrieval combined indexes paper file organization scheme designed replace popular secondary index filing scheme inverted files secondary key fields redundancy storing keys access numbers records satisfy combinations secondary index values buckets retrieve keys satisfying input query derived subset fields single access index file bucket combinations values combination buckets required query method degenerate case conventional secondary index filing scheme works similarly advantages elimination multiple accesses cases elimination false drops elimination computer time perform intersection key sets qualified secondary index field avoidance long strings keys index field appearing query values redundancy cases secondary indexing method general case trade number accesses query redundancy exists file organization secondary index files inverted files information retrieval data management access method secondary keys storage buckets rapid retrieval balanced filing scheme elimination false drops combining indexes query multi attribute retrieval
1977 interactive display approximation linear programming interactive program graphical display developed approximation data means linear combination functions including splines selected user coefficients approximation determined linear programming minimize error infinity norm auxiliary conditions monotonicity convexity approximation imposed interactive system examples approximation data fitting functional approximation linear programming interactive graphical display spline functions
1978 interactive graphics solve numerical problems advent line time sharing computer systems graphic terminals dimension numerical problem solving capabilities simply power achieve fast turnaround develop interactive routines easy advantage insight visual capabilities human problem solver line systems general purpose mathematical problem solving implemented special purpose systems solving problems area ordinary differential equations advantage restricting problem area interface user greatly simplified paper discuss advantages accrued systems design considerations interactive routines implementation line squares data fitting program peg presented results obtained empirical data conclusion area future work field discussed interactive graphics computer graphics graphics squares data fitting interactive computing line mathematics
1979 numerical inversion laplace transforms algorithm laplace transform inversion integral transformations integral equations
1980 efficient algorithm sorting minimal storage algorithm sorting ranking minimal storage sorting digital computer sorting
1981 normal curve integral algorithm normal curve integral probability special functions
1982 modified havie integration algorithm numerical integration havie integration romberg quadrature modified romberg quadrature trapezoid values rectangle values
1983 spanning tree algorithm graph tree spanning tree
1984 tableless date conversion algorithm date calendar
1985 integer programming problem algorithm integer programming change making problem
1986 student quantiles algorithm student statistic quantile asymptotic approximation
1987 student distribution algorithm student statistic distribution function approximation asymptotic expansion
1988 formalism translator interactions formalism presented describing actions processors programming languages compilers interpreters assemblers interactions complex systems compiler compilers extendible languages formalism define answer question bootstrapping meta compiler metaphase interpretive addition algorithm presented deciding system produced set component processors translator compiler interpreter bootstrapping language processor compiler compiler
1989 transition network grammars natural language analysis augmented transition network grammars analysis natural language sentences structure building actions arcs grammar network reordering restructuring copying constituents produce deep structure representations type obtained transformational analysis conditions arcs powerful selectivity rule meaningless analyses advantage semantic information guide parsing advantage model natural language analysis discussed detail illustrated examples implementation experimental parsing system transition network grammars briefly computational linguistics grammars grammar models linguistics natural language analysis parsing semantic interpretation transition network grammars transformational grammars
1990 numerical constants algorithm numerical algorithm numerical constants
1991 number automorphisms singly generated automaton automata finite automata singly generated automata automorphisms generators length state minimal length generators orbit
1992 comment bell quadratic quotient method hash code searching hashing hash code scatter storage calculated address clustering search symbol table keys table
1993 regular coulomb wave functions algorithm coulomb wave functions wave functions regular coulomb wave functions
1994 decision table translation algorithm decision table decision table translation
1995 special series summation arbitrary precision algorithm function evaluation series summation approximation
1996 systems hyperbolic pde algorithm hyperbolic characteristic extrapolation order quasilinear
1997 increasing efficiency quicksort method presented analysis generalizations quicksort average asymptotic number comparisons needed shown log formula derived expressing terms probability distribution bound partition formula assumes simple form generalization considered hoare choice bound median random sample main contribution paper generalization quicksort bounding interval single element bound generalization turns easy implement computer program numerical approximation shows version quicksort compared original implies decrease number comparisons percent actual tests showed percent saving computing time sorting quicksort information content entropy distribution median
1998 complex matrix inversion versus real comparison complex matrix real matrix inversion made shown complex inversion fast real inversion rounding error bound complex inversion eighth real gaussian elimination extended product accumulation bound half real system complex matrix inversion matrix inversion inversion rounding errors rounding error bound error bounds complex rounding error bounds
1999 optimal starting approximations generating square root slow divide machine slow division preferable iterative scheme square root classical heron scheme problem optimal initial approximants considered optimal polynomial initial approximations tabulated square root newton raphson iteration optimal approximants
2000 variation goodman lance method solution point boundary problems recently published method interpolative solution nonlinear equations improved applied give significant variation goodman lance method solution point boundary problems resulting method applies numerical solution optimal control problems euler lagrange formulation quantitative estimates presented variation fast problems context goodman lance boundary problems newton method nonlinear equations optimal control optimization ordinary differential equations secant method interpolative solution orthogonal matrices
2001 integrating square roots differential equation difficult integrate numerically singularity points vanishes simple trick removes singularity quadrature differential equations
2002 amesplot higher level data plotting software system amesplot extensible software system designed make display data simple painless neat system hardware independent implemented variety installations manufacturers diverse configurations elements common types data plots outlined elements combined system based simple modules demonstrated modules independently independent axis systems attributes plot enables plots complexity constructed adding replacing modules basic syntax amesplot outlined description current utility software consisting macros produce scaled plots formal tablets text interspersed subplots map coastlines plots system formulate user supply minimum information fully integrable user program written conventional higher languages functions positioning locating scaling layout multiple subplots axes labels elements plot handled automatically software system user specifies structuring plots multiple independent contained subplots transformation projection scaling rotation shifting entire plots subplots action simple modules user interact freely amesplot levels enabling construct data markers alphabetic characters transformations produce variety artistic effects computer graphics data potting data display syntax hardware independent software display device independent software plot elements scaled plots user interaction tablet organization map display projection
2003 interactive software system computers aided design application circuit project characteristics interactive software system intended constitute interface designer computer steps design process presented main emphasis description features high level user oriented languages operating levels interaction based imol interactive monitor language designed perform control functions software system design criteria provide user commands simple efficient order perform functions needed computer aided circuit design coif circuit oriented graphic language designed describe generate manipulate graphic problem specifications extension fortran graphic type variables designer familiar fortran learn language application computer aided circuit design examined hand adopted design criteria provide sufficient generality extend languages computer assisted applications interaction graphics computer graphics computer aided design circuit design software system software organization language monitor language graphic language extended fortran
2004 procedure generation dimensional half toned computer graphics presentations description algorithm producing computer generated half tone presentations dimensional polygonal surface structures algorithm achieves significant increase speed computation warnock algorithm developed university utah implemented coordinated science laboratory cdc computer system university illinois history leading algorithm development algorithm results presented compared computer runs achieved warnock approach extension procedure variable position illumination sources half tone computer graphics line scan image processing hidden surface polygonal surface structure presentations
2005 proposed revision american national standard rectangular holes twelve row punched cards tabulating card hollerith card keypunch information processing
2006 proposed american national standard state identifiers state abbreviation states united states data elements data codes numeric codes geopolitical subdivisions geographic codes
2007 algorithms policy revised august
2008 gaussian quadrature formulas algorithm quadrature gaussian quadrature numerical integration weight function orthogonal polynomials newton method successive deflation
2009 simpson rule multiple integration algorithm numerical integration multiple integration simpson rule
2010 unitary symmetric polynomials algorithm symmetric polynomials unitary symmetric polynomials
2011 sequency ordered walsh functions algorithm walsh functions sequency ordered walsh functions
2012 binary ordered walsh functions algorithm walsh functions binary ordered walsh functions
2013 rademacher function algorithm rademacher function
2014 function minimization linear search algorithm function minimization relative minimum quasi newton method
2015 technique generating optimal floyd evans productions precedence grammars technique developed generating optimal floyd evans productions precedence grammar graph formulation problem merging productions productions generated correspond minimum cost inverse arborescence graph validity technique demonstrated weak precedence grammars defined productions mechanically generated precedence grammar modified correct optimal parsers obtained translator writing systems syntactic analysis floyd evans productions precedence grammars translator optimization merger algorithm minimum cost inverse arborescence graph theory
2016 instrumentation multics array measuring tools devised aid implementation prototype computer utility discussed tools include special hardware clocks data channels general purpose programmed probing recording tools specialized measurement facilities measurements interest system combines demand paging multiprogramming detail insight effectiveness lack individual tools provided instrumentation performance measurement multiprogramming systems measuring tools system analysis multics metering event tracing demand paging script driven measurement
2017 sorting paging environment sorting study part extensive measurement project undertaken experimental paging system conceived implemented ibm research order explore virtual machine concept study concerned implementation sorting procedures context dynamic paging environment characteristic virtual memory machines descriptions experimental sort programs analysis performance measurement results obtained presented insight gained experimental effort arrive set broad guidelines writing sort programs paging environment sorting merging virtual machines paging systems dynamic storage allocation measurement systems program behavior performance evaluation memory management
2018 full table quadratic searching scatter storage quadratic residue search method hash tables avoids clustering experienced linear search method simple quadratic search accesses half table shown length table prime form integer table accessed quadratic searches separate access original entry point search method presented computationally simple advantages quadratic search accesses table sweep quadratic residue search method hash tables scatter storage dictionary quadratic search searching hashing hash code clustering collisions
2019 normalization techniques hand printed numerals family pattern standardization techniques based geometrical projection applied file digitized hand printed numerals obtained sales clerks principle involves transforming quadrilateral terms convex hull pattern square amount overlap class characters versus amount classes evaluate degree normalization achieved respect published methods including size shear normalization moments pattern recognition character recognition normalization projective transformation central projection hand printed characters handwriting linear transformation size normalization mapping pattern preprocessor
2020 allocation computer resources pricing answer widespread complex generation computing systems led broader concern means resources systems allocated user community means suggested frequently pricing procedure paper manner allocate computing resources considered extent pricing mechanism fits mold discussed pricing serve rationing mechanism times consideration means prices adjusted flexibly order make dynamic allocation resources consideration means users insulated harmful effects frequent price fluctuations subject pricing lot attention recently number misconceptions persist purpose operation attempt made clarify misunderstandings highlight advantages disadvantages highlight advantages disadvantages pricing illustrative pricing systems discussed order demonstrate applicability pricing environments allocation mechanisms charging computer pricing costing flexible pricing pricing priority charges resource allocation user motivation
2021 comment axiomatic approaches programming axiomatic method proofs programs homomorphic structure programming
2022 note anomaly paging paging machines demand paging replacement algorithm
2023 note data base deadlocks data base synchronization locking deadlock reference count
2024 comments paper lowe automatic segmentation program connectivity
2025 student distribution jacobi polynomials modified romberg quadrature factorial analysis variance algorithms fortran standards
2026 exponential integral algorithm
2027 ricatti bessel functions kind algorithm ricatti bessel functions bessel functions fractional order spherical bessel functions
2028 greatest common divisor integers multipliers algorithm greatest common divisor euclidean algorithm number theory diophantine equations
2029 exponential integral algorithm exponential integral special functions rational chebyshev approximation
2030 context sensitive parsing paper presents canonical form context sensitive derivations parsing algorithm finds context sensitive analysis amount memory required algorithm essentially required store single complete derivation addition modified version basic algorithm presented blocks infinite analyses grammars loops algorithm compared previous parsers context sensitive grammars general rewriting systems difference types analyses discussed algorithm appears complementary algorithm kuno respects including space time trade degree context dependence involved context sensitive grammars context sensitive parsing formal grammars formal language theory parsing parsing algorithms recognition algorithms
2031 algorithm bound greatest common divisor integers version euclidean algorithm finding greatest common divisor integers multipliers gcd presented number arithmetic operations number storage locations linear theorem lame bound number iterations euclidean algorithm integers extended case integers algorithm construct minimal set multipliers presented fortran program algorithm appears comm acm algorithm greatest common divisor euclidean algorithm number theory diophantine equations
2032 file structures hashing functions general method file structuring proposed hashing function define tree structure types trees examined relation trees studied past explained results probability distributions path lengths derived illustrated data structures tree structures file structures scatter tables hashing functions information retrieval
2033 space time trade offs hash coding allowable errors paper trade offs computational factors set messages hash coding methods examined compared conventional hash coding method computational factors considered size hash area space time required identify message nonmember set reject time allowable error frequency methods intended reduce amount space required hash coded information conventional methods reduction space accomplished exploiting possibility small fraction errors commission tolerable applications applications large amount data involved core resident hash area feasible conventional methods applications envisaged performance improved smaller core resident hash area conjunction methods secondary time consuming test catch small fraction errors methods discussed illustrates areas application methods analysis paradigm problem demonstrates allowing small number test messages falsely identified members set permit smaller hash area increasing reject time hash coding hash addressing scatter storage searching storage layout retrieval trade offs retrieval efficiency storage efficiency
2034 mobile programming system stage stage level bootstrap sequence easily implemented computer flexible provided stage summarized implementation techniques made stage running machine man week effort discussed approach successful machines widely varying characteristics bootstrapping macro processing machine independence programming languages implementation techniques
2035 conversational access word machine lap line system running word linc full facilities text editing automatic filing file maintenance program preparation assembly focuses preparation editing continuously displayed character text strings manuscripts positioned user edited simply adding deleting lines working directly elastic scroll features uniform command set augmented user machine small aids program design providing display scope premarked randomly addressable linc tapes standard items environment similar sophisticated terminal tapes logically similar disk priority design efficient tape algorithms minimize limitations small memory techniques developed handling scroll editing filing layered system structure outlined lap people countries design strongly influenced performance criteria established interviews held linc users specification period conversational computer access display editing display oriented system filing algorithms lap layering linc man machine communication line editing line efficiency line environment scroll editing small machine system tape filing tape oriented system text editing
2036 interactive command generating facility facility permit conversationally controlled tasks executed noninteractive environment proposed means programs generate interactive time sharing commands receive output response presented commands invoked typed console keyboard argued facility overcome current limitations man computer communication set functions accomplish embedded string processing language suggested information pertinent implementation facility existing time sharing systems time sharing command languages pseudo teletype interaction conditional job control operating systems
2037 permutations set repetitions algorithm permutations combinations permutations
2038 combinations objects algorithm permutations combinations permutations
2039 permanent function square matrix ii algorithm matrix permanent determinant
2040 modified romberg quadrature algorithm numerical integration romberg quadrature modified romberg quadrature trapezoid values rectangle values
2041 shellsort algorithm sorting minimal storage sorting digital computer sorting
2042 treesort algorithm certification algorithm form proof algorithm correct illustrative practical algorithm treesort sorting array proved correct proof algorithms debugging certification metatheory sorting place sorting
2043 eigenvalues eigenvectors real symmetric matrix algorithm real symmetric matrix eigenvalues eigenvectors qr algorithm
2044 permutations set repetitions algorithm permutations combinations permutations
2045 combinations objects algorithm permutations combinations permutations
2046 relational model data large shared data banks future users large data banks protected data organized machine internal representation prompting service supplies information satisfactory solution activities users terminals application programs remain unaffected internal representation data changed aspects external representation changed change data representation needed result query update report traffic natural growth types stored information existing noninferential formatted data systems provide users tree structured files slightly general network models data section inadequacies models discussed model based ary relations normal form data base relations concept universal form data base relations concept universal data sublanguage introduced section operations relations logical inference discussed applied problems redundancy consistency user model data bank data base data structure data organization hierarchies data networks data relations derivability redundancy consistency composition join retrieval language predicate calculus security data integrity
2047 incorporating origin shifts qr algorithm symmetric tridiagonal matrices qr iteration eigenvalues symmetric tridiagonal matrix accelerated incorporating sequence origin shifts origin shift subtracted directly diagonal elements matrix incorporated means implicit algorithm methods drawbacks direct method unnecessarily degrade small eigenvalues implicit method effectively loose shift retard convergence paper presents method drawback eigenvalues eigenvectors qr method origin shifts symmetric tridiagonal matrix
2048 comparison adaptive newton cotes quadrature routines evaluating definite integrals peaked integrands report compares performance adaptive quadrature schemes based newton cotes point rules approximating set definite integrals integral dx relative accuracy adaptive newton cotes quadrature quadrature scheme comparison definite integral evaluation adaptive numerical tegration newton cotes integration peaked integrand integration quadrature efficiently plot cotes rules applications newton cotes rules modifications
2049 accurate floating point summation paper describes alternate method summing set floating point numbers comparison error bound method standard summation method shows considerably sensitive propagation round error summation floating point addition round error round propagation
2050 automatic parsing content analysis automatic syntactic semantic analysis unrestricted natural language text applications content analysis stringent coverage requirement preliminary studies show harvard syntactic analyzer produce correct unambiguous identification subject object verbs approximately half relevant occurrences degree coverage content analysis variables compares favorably manual methods variables compares favorably manual methods sample total text processed content analysis parsing syntactic analysis natural language processing information retrieval language analysis text processing
2051 pl program assist comparative linguist practical pl program assist comparative linguists determine regular sound correspondences genetically related languages investigator arrange data input aligning pairs suspected cognates program tabulates correspondences list processing techniques sort count pair words assigned relative function total frequency data correspondence found pair words output list correspondence types frequency occurrence data separate listing correspondence word pairs showing correspondence relative arbitrarily chosen cutoff point article explains usefulness limitations programs illustrates small portion hypothetical data comparative linguistics natural language processing comparative method historical linguistics diachronic linguistics genetic relationship sound change sound correspondence regular correspondence list processing
2052 scheduling reduce conflict meetings conflicts scheduling treated defining undirected linear graph independently relation activities conflict additional constraints time space connected component graph found algorithm gotlieb corneil corresponds set events scheduled times allocation conflict matrix connected component scheduling spanning tree undirected linear graph
2053 conversion decision tables computer programs execution time diagnostics pinpointing ambiguities decision tables discussed pointed attempt resolving ambiguities compile time general impossible shown consequence tree methods converting decision tables programs inadequate regard ambiguity detection algorithms programming decision tables merits simplicity implementation detection ambiguities execution time presented algorithm limited entry decision tables clarifies importance proper coding information decision table algorithm programs mixed entry decision table directly intermediate step conversion limited entry form resulting storage economy comparison algorithms proposed literature made features decision table fortran iv translator ibm developed authors decision tables diagnostic aids system analysis business applications
2054 feasibility voice input line computer processing system line digital computer processing system considered ordinary telephone complete terminal device input computer provided sequence spoken words output user audio responses machine feasibility implementing system fortran algebraic compiler object processor considered details specific word recognition program technique depends simplifying restrictions small vocabulary set speakers moment silence input word experimental results presented giving error rates experimental conditions machine resources required accommodate users time results show time economically logically feasible handle users time ibm computer speech recognition word recognition pattern matching pattern recognition time sharing remote access voice input speech input telephone input output acoustic signal spoken word input talking computers man machine interaction
2055 subroutine perform situ transposition rectangular matrix algorithm rectangular matrix transpose
2056 gomory algorithm linear programming integer variables dual method
2057 random vectors uniform solid angle algorithm random number random vector random number generator probability distribution frequency distribution simulation monte carlo
2058 situ transposition rectangular matrix algorithm rectangular matrix transpose
2059 language treating graphs language representation graph formulation graph operations node link deletion insertion union intersection comparison traversal graphs graphs represented linked lists language syntactically defined extension algol translated algol means syntax driven compiler application areas language operation research network problems control theory traffic problems graphs oriented nonoriented multiple colored graph language extended algol operator precedence syntax driven compiler operation research network traffic
2060 gedanken simple typeless language based principle completeness reference concept gedanken experimental programming language characteristics permitted context language permissible meaningful context functions labels permissible results functions values variables assignment indirect addressing formalized introducing values called reference turn possess values assignment operation affects relation reference compound data structures treated functions type declarations permitted functional approach data structures references insure process accepts data structure accept logically equivalent structure internal representation generally data structure implicit giving arbitrary algorithm computing accessing components existence label variables permits construction coroutines quasi parallel processes unorthodox control mechanisms variety programming examples illustrates generality language limitations extensions discussed briefly programming language data structure reference assignment coroutine quasi parallel process typeless language applicative language lambda calculus list processing nondeterministic algorithm
2061 algorithm construction bounded context parsers algorithm accepts arbitrary context free grammar constructs bounded context parser parser exists part paper definition context free grammar working bounded context parser recalled notion reduction class context free grammar introduced connection structure bounded context parser pushdown automata generate reduction classes context free grammar defined finally algorithm essentially carries exhaustive study runs pushdown automata generating reduction classes part utility algorithm discuss ed light experience gained compiler design algorithm claimed simultaneous design language compiler bounded context parsing bounded context syntactic analysis parser construction syntactical analyzer construction generators compiler compilers compiler writing systems translator writing systems metacompilers context free grammars formal languages pushdown automata
2062 application sequential sampling simulation inventory model sequential sampling procedures applied analysis data generated computer simulation experiment multi item inventory model procedure cost computer time required achieve levels statistical precision calculated cost computer time comparable fixed sample size methods calculated computer costs fixed sample size procedures versus sequential sampling procedures compared simulation inventory models sequential sampling models experimental design
2063 translation equations errata
2064 operations generalized arrays genie compiler operations vectors matrices higher dimensional storage arrays standard features compilers today elements structures restricted scalars sophisticated applications restriction impose cumbersome data representations efficient system devised implemented elements multidimensional arrays multidimensional arrays system developed storage structure location length content array codeword interpreted system code words describe arrays codewords providing needed descriptive information hyperstructures form multidimensional arrays matrix operations storage control subscripting compilers
2065 programming system line analysis biomedical images preliminary description software computer display system special emphasis man machine interaction system intended wide variety biomedical applications methods applied karyotyping chromosomes system separated programming tasks picture transformations file maintenance picture structuring display management picture structuring considered vehicle man machine communication prototype data format pictures called picture form developed structure operators defined manipulate picture forms produce pictures forms ideas symbolic mathematical laboratory mit conceived marvin minsky image processing biomedical image processing line image processing semiautomatic image processing data structure structure operators picture processing biomedical picture processing line picture processing semiautomatic picture processing semiautomatic karyotyping karyotyping list processing picture processing
2066 algol construction procedures parameters procedures algol procedures parameters side effects
2067 comment lawler multilevel boolean minimization multilevel logic design generalized prime implicants minimal forms minimization incompletely functions
2068 comment multiprogramming page demand strategy multiprogramming paging modeling
2069 comments paper wallace mason page demand demand paging time sharing multiprogramming markovian computer models scheduling strategies operating systems memory management
2070 formal system information retrieval files
2071 filon quadrature algorithm quadrature filon quadrature integration filon integration fourier coefficients fourier series
2072 modified romberg quadrature algorithm numerical integration romberg quadrature trapezoid values rectangle values error bound
2073 solution linear programs variables implicit enumeration algorithm linear programming variables partial enumeration
2074 sqank algorithm numerical integration integration rule adaptive integration automatic integration simpson rule numerical quadrature quadrature quadrature rule adaptive quadrature automatic quadrature round error control
2075 discretized newton method solving system simultaneous nonlinear equations algorithm newton method nonlinear equations interpolating polynomials
2076 cubic splines uniform meshes simple procedure presented constructing cubic splines periodic nonperiodic uniform meshes arcs cubics suffice construct basis cardinal splines algorithm requires minimal storage computation permits easy trade simple spline representation cardinal splines uniform mesh splines
2077 cyclical majority problem problem cyclical majority presented simulated results issues ad judges reported arrow paradox cyclical majority simulation voter paradox voting paradox
2078 representations space planning problems involving arrangement objects space objective function primarily consists derivatives distance objects arrangement called space planning problems representational requirements problem area defined compared current computer graphic languages alternative data structures automated space planning compared automated design data structures computer graphics computer aided design engineering design architectural design robots
2079 multiprogramming machine coding computer organization
2080 nucleus multiprogramming system paper describes philosophy structure multiprogramming system extended hierarchy operating systems suit diverse requirements program scheduling resource allocation system nucleus simulates environment program execution input output handled uniformly parallel cooperating process es fundamental set primitives dynamic creation control hierarchy processes communication multiprogramming operating systems parallel processes process concept process communication message buffering process hierarchy process creation process removal
2081 complete calculi matrices matrix calculus introduced intention developing data structures suitable high level algorithmic language mathematical programming paper investigates special structure matrices utilized efficient computing saving memory space superfluous operations sequences matrices sequences sequences matrices considered matrix operators areext ended sequence operators cumulative operators algorithms symbol manipulation matrix expressions find forms suited computation forms called normal forms completeness results obtained sense expression equivalent expression normal form found calculus complete calculus data structures linear programming matrix matrix concatenation matrix sequences programming languages sequence operations symbol manipulation
2082 syntax directed documentation pl language pl phrase structure grammar concrete basis illustrating idea called syntax directed documentation idea phrase structure program define structure formal documentation program syntactic types identifiers resulting structure trigger automatic formation questions programmer answers part documentation provide automatic storage retrieval facilities programmers understand modify program access resulting documentation cross indexed ways syntactic types objects small pl program found literature worked documentation syntax analysis pl enforced documentation indexed documentation automatic interrogation phase structured grammar syntax directed documentation syntax processing
2083 creation control internal data bases fortran programming environment method definition user common structure automatic generation common dimension equivalence type declarations user routines definition common contained easy modify form allowing control general communications data routines system implemented ibm cdc series ibm method proved invaluable definition control common large scale programs data base fortran common common equivalencing subroutine communication data communication
2084 note complement inherently ambiguous context free languages ambiguity inherent ambiguity complement context free language chomsky language phrase structure language production system type language bounded language
2085 comment paging anomaly paging machines demand paging replacement algorithm
2086 method converting hexadecimal decimal binary decimal conversion computer arithmetic categories
2087 number system permutations permutation ordering number number system number combinatorial
2088 netflow algorithm capacitated network linear programming minimum cost flow network flow kilter
2089 prime number algorithm prime numbers generator
2090 symbolic expansion algebraic expressions algorithm algebra symbolic algebra symbolic multiplication algebraic distribution algebraic multiplication distribution algorithm multiplication algorithm product algorithm polynomial distribution polynomial expansion
2091 pdel language partial differential equations conventional computer methods solve continuous system problems characterized partial differential equations time consuming cumbersome convenient easy learn high level problem oriented language solve study partial differential equation problems designed practical translator language designed working version constructed significant portion language partial differential equation language pdel outlined highlights translator briefly summarized problem oriented digital simulation language partial differential equations translator pl preprocessor pl finite difference algorithms
2092 deductive question answer natural language inference question answering aspects protosynthex iii pro totype language processing system exemplified detail system written lisp operates time sharing system system data structures semantic organization deductive question answering formalism relational properties complex relation forming operators question answering procedures employ features operation illustrated examples system performance limitations question answering capability presented discussed shown semantic information deductive question answering greatly facilitates process top procedure works question answer enables effective made information concluded development protosynthex iii practically system work large data bases require data structures algorithms question answering question answering natural language protosynthex iii lisp semantics artificial intelligence computational linguistics language processing fact retrieval
2093 comparison error improvement estimates adaptive trapezoid integration simple choices error improvement estimates trapezoid rule studied demonstrate comparison procedure independent profusion adaptive search stopping strategies comparisons based inclusion noninteger powers makes realistic usual polynomial based comparison behavior singularity found dominant factor estimate based constant curvature assumption parametric differences considered slightly choices considered adaptive integration error improvement estimate trapezoid rule nonpolynomial error criteria
2094 algorithm nonlinear minimax approximation nonlinear minimax approximation problems characterize properties permit application special algorithms based exchange algorithms remes solution paper application problems type general nonlinear algorithm due osborne watson considered examples illustrate algorithm give satisfactory results successfully solve problems lead difficulties conventional specialist method minimax approximation nonlinear approximation linear programming
2095 measurements segment size distributions segment sizes measured routine operating con ditions computer system utilizes variable sized segments burroughs discussed striking feature measurements large number small segments percent segments words results installation independent influenced features algol system relevant design computer systems respect organization paging schemes storage allocation segmentation segment sizes page sizes paging resource allocation memory allocation core utilization
2096 experiments tree searching program procedure improvement mini max backing procedure widely computer program game playing purposes based principle desirable options making decisions face uncertainty mini max procedure assigns max min node highest lowest valued successor node procedure assigns max min node function highest lowest valued successors procedure written lisp play game kalah demonstrated procedure significantly superior mini max procedure statistical significance important conclusions information statistical significance lacking papers computer experiments artificial intelligence field experiments serve model future work artificial intelligence heuristic program tree searching lisp kalah game playing decision theory mini max backing procedure backing procedures
2097 program teach programming teach system developed mit ease cost improve results elementary instruction programming student teach offers loosely guided experience conversational language designed teaching mind faculty involvement minimal term experience teach discussed pedagogically system appears successful straightforward reimplementation make economically successful similar programs profound tutorial skill results extended research outlines research beginning clear elementary programming computer assisted learning uncl teach
2098 test probabilities algorithm student distribution algorithm test student statistic distribution function approximation
2099 eigenvalues eigen vectors real general matrix algorithm norm characteristic equation degenerate eigen system diagonalizable matrix defective matrix
2100 ortho algorithm orthogonalization approximation
2101 squares fit acos bx algorithm nonlinear squares fit
2102 fitting data exponential algorithm nonlinear squares fit
2103 restricted partition generator algorithm partitions restricted partitions sums integers restricted sums
2104 number doubly restricted partitions algorithm partitions restricted partitions sums integers restricted sums
2105 interactive computer system graphical flowchart input interactive computer system operational graphical computer terminal system designed demonstrate method programming computer interpretation flowchart user draws description sampled data system specifies description transmitted large scale computer design simulated graphic representation processed signal returned scope successful design require numerous modifications original design graphical interactive system environment perform iterative process efficiently effectively simulation program graphical input output sampled data systems
2106 computer education graduate school management years experience led belief creative design evaluation management information systems requires understanding related computer technology concepts paging priority interrupt systems explained machine language level machine exposition fulfill criteria raise spurious issues undue effort solution interesting problems capable exposing outstanding issues significance capable exposing outstanding issues significance chosen machine seful pursuing issues great depth committed equipment provided manufacturer provide student diagnostic aids great depth student ready access machine capable extension expose issues constructed simulated machine software meets criteria system called prism system documented primer reference manual education simulation machine language management information systems interpreters
2107 quadratic quotient method hash code eliminating secondary clustering secondary clustering hash code inefficiency discussed hashing method based elimination presented comparisons previous methods made analytically empirically hashing hash code scatter storage calculated address clustering search symbol table collisions keys table
2108 variation sorting address calculation principles address calculation merging combined yield efficient sorting technique detailed flowcharts important program steps included characteristics proposed sort discussed sorting address calculation merging order sequence creation
2109 quadratic residue research quadratic residue search method previously suggested avoid clustering encountered hash address collisions occur linear search methods search size property quadratic residues limited half storage table shown classes prime numbers complement set quadratic residues easily determined entire table size prime number searched quadratic residue search method hash addressing address clustering scatter storage file searching file addressing hash coding quadratic search random search storage layout searching
2110 efficient context free parsing algorithm parsing algorithm efficient general context free algorithm similar knuth lr algorithm familiar top algorithm time bound proportional length string parsed general bound unambiguous grammars runs linear time large class grammars include practical context free programming language grammars empirical comparison appears superior top bottom algorithms studied griffiths petrick syntax analysis parsing context free grammar compilers computational complexity
2111 spelling correction systems programs specialized techniques shown efficiently incorporating spelling correction algorithms compilers operating systems include syntax semantics information organization restricted keyword symbol tables consideration limited class spelling errors sample coding performing spelling correction presented systems perform spelling correction number debugging runs program decreased saving programmer machine time spelling correction error correction debugging compilers operating systems diagnostics error detection misspelling lexical analysis systems programming
2112 translation equations input limited transduction expressions translation equations describe syntax left context sensitive semantics context free languages formal procedure deriving set translation equations specifications pushdown translator translator consists mealy form finite state automata interacting means pushdown stack framework string recognition parsing treated special cases translation problem automata turing machines regular expression transduction expression context free languages translation recognizers parsing meta compilers pushdown transducer syntax directed compilers finite state automata
2113 multistore parser hierarchical syntactic structures syntactic parser hierarchical concatenation patterns presented analyzer form linear strings emphasis system significant addresses means processing times large scale matching procedures substantially reduced description makes frequent examples fully operational implementation parser experimental english sentence analyzer structuring area computer central core storage individual locations bytes bits represent data involved matching procedure shifting information reduced minimum searching lists eliminated altogether matches traced means binary masks state single bits determines operational flow procedure method implemented interpretive grammar provided expressed functional classification items composing input hierarchical structures parsing syntactic analysis natural language analysis linguistic data processing computational linguistics correlational grammar structure recognition pattern recognition matching procedures tree structure interpretation machine translation automatic abstracting
2114 formal system information retrieval files generalized file structure provided concepts keyword index record file directory file structure directory decoding record retrieval defined frequently file structures inverted files index sequential files multilist files derived algorithms retrieve records generalized file structure presented attribute pair index keyword record record address pointer list file directory generalized file structure inverted file index sequential file multilist file description file search directory search serial processing lists prime keyword parallel processing lists
2115 fortran tausworthe pseudorandom number generator random numbers pseudorandom numbers shift register sequences
2116 interchange rolls perforated tape information interchange proposed american national standard interchange rolls perforated tape tape information interchange directional markers leaders trailers roll tape track paper tape dimensions
2117 representation calen dar date machine machine data interchange proposed american national standard calendar date machine machine interchange month year day representation coded
2118 efficient algorithm sorting minimal storage algorithm sorting minimal storage sorting digital computer sorting
2119 derivatives algorithm recursive computation successive derivatives error control
2120 algorithm produce complex primes csieve algorithm primes complex numbers
2121 partitions natural order algorithm partitions number theory
2122 general random number generator algorithm random number generator probability density function transformation cumulative density function
2123 generator random numbers satisfying poisson distribution algorithm poisson distribution random number generator
2124 numerical inversion laplace transforms algorithm laplace transform inversion integral transformations integral equations
2125 note minimal length polygonal approximation digitized contour method extracting smooth polygonal contour digitized image illustrated ordered sequence contour points connection graph image obtained modified ledley algorithm image scan minimal perimeter polygon subjected constraints chosen approximating contour determination minimal polygon reduced nonlinear programming problem solved algorithm takes account weak bonds variables examples presented computing times listed digitized image connection tree minimal polygon optimal approximation nonlinear programming
2126 experience extensible language operational extensible language system system base language appraised respect efficiency flexibility utility categories users programming languages extensible compiler bootstrapping ambiguity
2127 natural language question answering systems recent experiments programming natural language question answering systems reviewed summarize methods developed syntactic semantic logical analysis english strings concluded minimally effective techniques devised answering questions natural language subsets small scale experimental systems paradigm evolved guide research efforts field current approaches semantic analysis logical inference effective beginnings questionable generality respect subtle aspects meaning applications large subsets english generalizing current small scale experiments language processing systems based dictionaries thousands entries correspondingly large grammars semantic systems entail order complexity require invention development approaches semantic analysis questions answering question answering natural language artificial intelligence language processing fact retrieval semantics
2128 processor allocation method time sharing scheduling algorithm proposed intended minimize tasks processors reduce head algorithm application general resource allocation problems implemented means method efficiently handling dynamically changing segmented lists time sharing resource allocation scheduling algorithms monitors dynamic allocation processor allocation multiprogramming multiprocessing time slicing scheduling conversational systems interactive systems
2129 recursive computation derivatives study error propagation study made propagation errors linear order difference equations recursive computation successive derivatives cos considered illustration recursive computation successive derivatives error propagation
2130 automatic segmentation cyclic program structures based connectivity processor timing time shared multiprogrammed overlayed batch systems frequently require segmentation computer programs discrete portions program portions transferred executable peripheral storage segmentation program manner reduces frequency transfers subject paper segmentation techniques proposed ramamoorthy subject limitations arise preferred segment size compatible physical restrictions imposed computing equipment generalization ramamoorthy suggestions made order application circumstances ideal automatic segmentation cyclic program structures loops paging multiprogramming loaders assemblers compilers time sharing program connectivity
2131 rapid computation weights interpolatory quadrature rules algorithm divided differences
2132 rapid computation coefficients interpolation formulas algorithm divided differences newton interpolation formula
2133 algorithm assignment problem rectangular matrices algorithm operations research optimization theory assignment problem rectangular matrices
2134 extension munkres algorithm assignment problem rectangular matrices assignment problem munkres proposed algorithm solution square matrices presented authors develop extension algorithm permits solution rectangular matrices timing results obtained adapted version silver algol procedure discussed relation solution time problem size operations research optimization theory assignment problem rectangular matrices algorithm
2135 rapid computation general interpolation formulas mechanical quadrature rules continuous closed interval linear functional attempt made approximate polynomial approximating algorithms developed rapid computation wide class selections includes lagrangian hermitian rules special cases linear functionals divided differences newton interpolation formula
2136 note modification nordsieck method step point ordinary differential equations multi step methods predictor corrector round error nordsieck method gragg stetter modification
2137 lisp techniques paging environment system employs block concept global local variables addition methods applied lisp systems means list representation local sequential lists created compilation block level sequential created dynamically garbage collection algorithm introduced make lists compact partial garbage collection performed block exit total garbage collection storage exhausted algorithm customary flagging procedure combination features eliminated free list effectively minimizes number pages moment lisp list processing paging virtual memory garbage collection core fragmentation compact list structures block segment
2138 bliss language systems programming language bliss language designed suitable writing production software systems specific machine pdp compilers operating systems prime design goals design ability produce highly efficient object code access relevant hardware features host machine provide rational means cope evolutionary nature systems programs major feature contributes realization goals mechanism permitting definition representation data structures terms access algorithm elements structure programming languages implementation language systems programming data structures
2139 implementation substring test hashing technique implementing test determines string substring low probability test satisfied shown operation speeded considerably preceded test appropriately chosen hash codes strings substring hashing subset signature information compression information retrieval searching
2140 retrieval update speed tradeoffs combined indices paper november communications acm lum introduced technique file indexing named combined indices technique permitted decreased retrieval time cost increased storage space paper examines combined indices conditions file usage fractions retrieval update tradeoff curves developed show minimal cost file usage grouping partially combined indices file organization combined index files inverted files information retrieval query multi attribute retrieval file update
2141 algorithmic selection method compressing map data strings dozen methods compressing map data illustrated choices generated encoding data strings sequence codes methods directions relationships developed compression alternatives avoid comparing technique compress data forest resource maps widely applicable map photographic data reduction data compression map storage information retrieval input output run coding data reduction
2142 reconstruction pictures projections situations natural sciences medicine electron microscopy ray photography desirable estimate gray levels digital picture individual points sums gray levels straight lines projections angles situations picture determined problem find representative picture algorithms monte carlo methods designed solve problem algorithms applicable large varied number fields important reconstruction possibly asymmetric particles electron micrographs dimensional ray analysis approximation biomedical image processing efficient encoding image processing linear programming mathematical programming monte carlo techniques optimization picture compression picture description picture processing stereology ray analysis
2143 chebyshev approximation continuous functions chebyshev system functions algorithm approximation chebyshev approximation remex algorithm
2144 accurate floating point summation accumulation floating point sums considered computer performs digit base floating point addition exponents range algorithm accurately summing digit floating point numbers numbers split parts forming qn digit floating point numbers added auxiliary digit accumulators finally accumulators added yield computed sum qn digit floating point additions performed usual conditions relative error computed sum additional digit additions computed sum corrected full digit accuracy ibm typical values case floating point summation error analysis
2145 automation etching pattern layout heuristic etching pattern layout program application program developed computerize tedious error prone vitally important wiring design printed circuit boards helps automate design stage step closer production logical design design wiring patterns layer circuit boards ics dual line packages discrete components transistors resistors employs methods wiring heuristic method simulates human approaches wiring design theoretically interesting time consuming method maze running based lee algorithm performs percent required wiring heuristic path respect performance function point point point line connection bring number successful wiring connections close percent heuristic etching pattern layout wiring design printed circuit board maze running lee algorithm
2146 optimizing polyphase sort dispersion algorithms polyphase sorting procedure examined optimum algorithm based minimizing total number unit strings read displayed logic algorithm complicated dispersion algorithms straightforward logic presented simple dispersion algorithms discussed horizontal approximately fourth half percent reading writing algorithms today additional fourth percent improvement achieved utilizing modified optimum algorithm algorithm straightforward requires fairly close estimate total number unit strings dispersion begins sorting polyphase sorting dispersion algorithms optimum dispersion algorithm repetition operator
2147 computers higher education past recommendations status data survey conducted national science foundation support published december reviewed pointed regard computers higher education national goals stated rosser pierce reports attained quality lacking hardware courses half associate bachelor degree programs data processing computer science offered plea made continuing studies status goals computing higher education improvement degree programs national testing laboratory educational technology higher education computers degree programs national goals testing laboratory educational technology
2148 composition semantics algol main features algol explained semantic point view shown language permits composition values actions ultimately programs minimum set primitives fundamental recursive rules composition syntax briefly reviewed attempt made obtain structured simple introduction algol orthogonal design programming primitives programming languages algol semantics recursive composition design programming languages data structures
2149 entcaf entcre evaluation normalized taylor coefficients analytic function algorithm taylor coefficients taylor series cauchy integral numerical integration numerical differentiation interpolation complex variable complex arithmetic fast fourier transform
2150 concurrent control readers writers problem mutual exclusion independent processes simultaneous access critical section discussed case distinct classes processes readers writers readers share section writers exclusive access solutions presented case minimum delay readers case writing place early mutual exclusion critical section shared access resources
2151 user program measurement time shared environment general discussion measurement software systems description hardware software scheme measuring user programs time shared environment tx computer mit lincoln laboratory implementation system characteristics implementation reported scenario showing system presented finally shown time sharing systems provide similar measuring facilities operating systems multiprogramming systems time sharing systems software measurement user program measurement measurement technology tx computer virtual computers performance improvement
2152 display procedures structured display files widespread interactive computer graphics structures present number problems tend restrict generality usefulness paper discusses problems suggests alternative approach display system design avoids structured display files technique employs display procedures generate information display including transformations calls procedures simplify specification pictures speed generation display procedures permit picture elements defined conditionally facilitate processing inputs pointing devices paper illustrated examples aversion euler language display procedures implemented computer graphics programming languages display files
2153 experiments automated instructional system numerical methods computer system developed purdue university teach portions undergraduate numerical methods instructional unit lesson divided modes instruction student press computer controlled presentation student controlled investigation system designed classroom independent study semesters students lieu conventional classroom instruction initial measures effectiveness student acceptance operational cost result testing system independent instructor intervention system operational cdc teletype terminals computer assisted instruction numerical methods cai instructional systems
2154 clarification fortran standards report years effort fortran programming language standardized united states initial achievement study application standard specifications revealed maintenance standards result work initiated initial set clarifying interpretations prepared clarification published communications acm work continued resulted preparation set clarifying interpretations nature maintenance set corrections interpretations standard specifications reported american national standard fortran basic fortran programming language standardization language standard specification language standard maintenance language standard clarification language standard interpretation standardization committee
2155 understanding data structures paper presents notation formalism describing semantics data structures based directed graphs named edges transformations graphs addition implementation facility part programming language programmer expressed semantics algorithm terms graphs implementation data structures order gain efficiency data structures graph implementation semantic formalism programming language
2156 comment cheney list compaction algorithm lisp garbage collector virtual memory list processing storage allocation
2157 average binary search length dense ordered lists searching binary searching record retrieval
2158 stopping criterion newton raphson method implicit multistep integration algorithms nonlinear systems ordinary differential equations ordinary differential equations linear multistep formulas newton raphson method stopping criterion
2159 note sided approximations approximation sided approximation logarithmic error relative error
2160 canonical structure attribute based file organization file structure attribute based retrieval proposed paper queries involving arbitrary boolean functions attribute pairs processed taking intersections lists structure highly dependent file uniquely determined specification allowed queries structure retrieval basis ranges values attribute retrieval basis single permitted file organization proposed based atoms boolean algebra generated queries desirable properties claimed structure proved file maintenance questions discussed address calculation atoms boolean algebra attributes boolean functions boolean queries file organization information retrieval inverted file key words multilist queries searches
2161 algorithm blocks cutnodes graph corrigendum
2162 efficient bit table technique dynamic storage allocation word blocks efficient bit table technique dynamic storage allocation word blocks requires minimized amount memory bookkeeping purposes technique tested implementation list processing language number ideas incorporated processor bit table dynamic storage allocation buddy system list processing free storage
2163 education related computers organizations acm curriculum committee computer education management carrying study curriculum development management information systems education colleges universities grant national science foundation position paper framework study preliminary conclusions presented education administrative information systems college curricula courses suggested role professional societies organizations computers discussed plans committee outlined initial approach committee describe education effective computers organizations classify positions education required survey educational programs education information analysis systems design business data processing
2164 symbolic integration stormy decade approaches symbolic integration artificial intelligence led slagle saint large degree moses sin algebraic manipulation led manove implementation horowitz tobey reexamination hermite algorithm integrating rational functions mathematics led richardson proof unsolvability problem class functions risch decision procedure elementary functions generalizations risch algorithm class special functions programs solving differential equations finding definite integral integration symbolic integration definite integrals rational functions
2165 general relativity application algebraic manipulative systems paper describes applications symbolic algebra systems problems general relativity including derivation field equations petrov classification metric solution field equations presence matter simple case attention drawn strictly algebraic difficulties encountered work symbolic mathematics nonnumerical mathematics general relativity algebraic manipulation equation manipulation
2166 automated algebraic manipulation celestial mechanics paper applications automated algebraic manipulation made celestial mechanics attention paid poisson series typical problem perturbation theory requirements processors celestial mechanics considered compared general manipulation packages future directions research systems briefly outlined illustrate relative simplicity algorithm required celestial mechanics typical integration problem considered appendix series manipulation automated algebra celestial mechanics
2167 algebraic simplification guide perplexed algebraic simplification examined point view user comprehend large expression point view designer construct efficient system describe techniques akin substitution techniques decrease thesize expression make intelligible user delineate spectrum approaches design automatic simplification capabilities algebraic manipulation system systems divided types type facilities manipulation simplification expressions finally discuss theoretical results related algebraic simplification describe positive results existence powerful simplification algorithms number theoretic conjectures rely results nonexistence algorithms classes expressions included algebraic manipulation algebraic simplification canonical simplification
2168 list tracing systems allowing multiple cell types list processing systems allowed single size configuration list cell paper system arbitrarily sizes configurations list cells possibly run time list processing storage allocation lisp slip based storage pointers
2169 altran system rational function manipulation survey altran complete system symbolic computation rational functions variables integer coefficients designed implemented handle large problems ease efficiency considerable effort spent ensure minimum amount machine dependence implementation permitting system installed quickly easily variety computing machines paper description language run time data structures implementation symbolic algebra rational function manipulation polynomial manipulation interpreters translators
2170 applications symbol manipulation theoretical physics paper surveys applications symbolic computation techniques problems theoretical physics emphasis applications quantum electrodynamics activity occurred symbol manipulation algebraic simplification computational physics quantum electrodynamics
2171 solution simultaneous nonlinear equations nonlinear equations
2172 graph plotter algorithm plot graph line printer plot
2173 procedures stable marriage problem algorithm assignment problems assignment procedures combinatorics discrete mathematics operations research stable marriage problem university entrance
2174 stable marriage problem original work gale shapley assignment method stable marriage criterion extended find stable marriage assignments algorithm derived finding stable marriage assignments proved satisfy conditions problem algorithm applies paper assignment problems assignment procedures combinatorics discrete mathematics operational research stable marriage problem university entrance
2175 subexpression ordering execution arithmetic expressions arithmetic expression broken component subexpressions depending hardware environment expression executed subexpressions evaluated serials parallel combination modes paper shows expression execution time minimized consideration ordering subexpressions subexpressions executed order decreasing memory processor time requirements observation valid configurations ranging uniprocessor unbuffered main memory multiprocessor cache buffer memory number subexpressions executed parallel exceeds number processors execution subexpressions postponed procedure combines requirement earlier ordering considerations provide optimal execution sequence parallel processing cache arithmetic expressions subexpression ordering computational trees compilers
2176 buffer allocation merge sorting fixed buffer allocation merge sorting presented minimizes number input output operations order merge sorting movable arm disks number seeks equal number input output operations seek time controls sort time standard terminology introduced input buffer allocation method analysis improvement expected conventional allocation analysis makes distribution function analysis completely distribution yields similar results suggests results depend distribution function optimum output buffer size determined concluded buffering allocation significantly reduce time merge sorting movable arm disks input data random output buffer allocation data random file item string merge sort seek time gamma distribution function
2177 algorithm blocks cutnodes graph efficient method presented finding blocks cutnodes arbitrary undirected graph graph represented ordered list edges ii packed adjacency matrix denotes word length machine employed storage machine words required graph nodes edges increases essentially case win case ii spanning tree labeled edges grown edges finally bearing labels belong blocks representations time required analyze graph nodes increases depends type graph bounds attained values derived suitable families test graphs generated extension web grammar approach algorithm compared detail proposed read algorithm block block cutpoint tree cutnode fundamental cycle set graph lobe lobe decomposition graph separable spanning tree web grammar
2178 language extension graph processing formal semantics simple programming language extension graspe processing directed graphs defined graspe consists type directed graph data structure set primitive operations manipulating structures graspe easily implemented embedding host language emphasis graspe method definition commonly definition language involves definition syntactic elements explanation meaning assigned semantics definition graspe solely terms semantics data structures operations defined precisely assignment syntactic representation language implemented assignment explicit syntax implementation graspe embedded lisp illustration advantages disadvantages definition language terms semantics discussed graph processing programming language formal semantics directed graph lisp network data structure flowchart syntax language definition
2179 simple lr grammars class context free grammars called simple lr slr grammars defined class shown include weak precedence simple precedence grammars proper subsets construct parsers slr grammars shown parser construction techniques extendible cover lr grammars knuth implemented direct comparison proved superior precedence techniques range grammars covered speed parser construction size speed resulting parsers context free grammar lr grammar precedence grammar syntactic analysis parsing algorithm parser finite state machine deterministic pushdown automaton
2180 programmer training project project purpose train selected black residents albany schenectady area computer programming arrange jobs computer field organization curriculum discussed programmer training job opportunities fortran
2181 state computer oriented curricula business schools acm committee computer education management supported national science foundation grant established appraise state art develop series recommendations improving computer education management provide committee material study curricular regional meetings united states held broad cross section invited academicians practitioners considered state curricula business schools topics covered curricula general manager computer related material required functional courses curricula students concentrating computer based information systems analysis minutes meetings revealed common set experiences raised similar pedagogic economic issues presentation summary discussions condensation pedagogic substantive concerns raised consideration resource allocation issues involved preliminary committee recommendations improving computer education management report prepared provide participants administrators institutions background information ongoing task development chairman ten man committee daniel teichroew university michigan university programs management education curriculum design business administration curricula graduate business school resource planning
2182 interrupt driven programming interrupts supervisors monitors debugging parallel processing associative memories microprogramming
2183 binary summation summation binary summation floating point addition round errors
2184 meaning names programming systems assumed similarity function data names programming language file names operating system functions discussed terms basic concepts order identify extent overlap suggested similarity idea file directory storable object type context manipulations contexts discussed length noted simple extension church lambda notation deals nicely ideas context manipulation function regarded abstraction based terms expression lambda list expression list found context viewed abstraction based terms equivalent expression mu list list expression file operating system programming language functions names context file directory file dictionary lambda calculus theory programming
2185 note compiling fixed point binary multiplications algorithm developed compiling sequence shifts additions subtractions fixed point binary multiplications involving constant significant characteristics algorithm simplicity test determines algorithm applied degree suggests efficient object code compiling multiplications fixed point arithmetic
2186 numerical properties ritz trefftz algorithm optimal control paper ritz trefftz algorithm applied computer solution state regulator problem algorithm represents modification ritz direct method designed improve speed solution storage requirements point real time implementation feasible modification shown stable computationally traditional ritz approach concern paper describe algorithm establish properties valid numerical technique properties definiteness reasonableness condition established method part paper devoted comparison techniques standard procedure numerically integrating matrix riccati equation determine feedback matrix technique shown significantly faster comparable accuracy splines regulator problem control theory numerical analysis
2187 computer science conceptual framework curriculum planning views computer science considered global view attempts capture broad characteristics field relationships fields local view focuses structure field structure presented terms kinds knowledge problems activities exist discipline relations approach curriculum planning computer science presented guided structure field fact change important feature situation expectation computer science continue increase working contacts disciplines computer science curriculum planning education
2188 approach optimum design computer graphics systems display system designers faced difficult task selecting major subsystems intelligent subsystem chosen large numbers alternatives selection based considerations system response time system cost distribution data storage processing graphics processor supporting data processing system work reported develops objective quantitative design procedure helps give understanding configure display systems accomplished means mathematical model computer driven graphics system parameters model functions capabilities graphics hardware computational requirements graphics application model analyzed numerical queueing analysis simulation obtain average response time prediction combining model optimization graphics system configuration subject cost constraint found applications optimum configurations turn find general display system design guidelines design guidelines graphic display systems mathematical model optimum system design queueing model
2189 generation rosary permutations expressed hamiltonian circuits systematic generation specific class permutations fundamental scheduling problems nonoriented complete graph vertices hamitonian circuits equivalent specific permutations elements termed rosary permutations defined corresponds circular permutations mirror image generated successively number system covering sets edges set edges determined recursively constructing hamiltonian circuit vertices hamiltonian circuit vertices starting hamiltonian circuit vertices basic operation consists transposition pair adjacent vertices position pair permutation determined algorithms treating vertices presented easy derive permutations rosary permutations cycling permutations taking reverse order procedures performed fairly efficiently computer permutation graph theory scheduling combinatorial algebra
2190 function minimization
2191 algorithm partial sorting sorting partial sorting order statistics
2192 recursion induction principle inductive method proving things recursively defined functions shown proving partial functions equivalent applicable proofs interpreters programming languages recursion induction correctness proofs compiler correctness
2193 implementation label variables variables label mode conventionally implemented technique fails trap programming errors fine grained calendar clocks recently implementation label variables technique traps programming errors variety labels compiler interpreter transfer
2194 addresses short algorithm presented minimizing sum lengths blocks coding produced assembler compiler length computer instruction assumed long short long memory location addressed predetermined distance current location short blocks instructions beginnings origins separated prespecified amounts computers permit bit addressing interpreted relative location counter full bit addressing memory assembling compiling blocks instructions mutual references computer simple iterative procedure keeping addresses short paper demonstrates wide class problems type formulated covering problems solvable means elementary arithmetic operations column vectors ternary matrix addressing assembler covering problem integer programming variable length addressing
2195 optimal detection curves noisy pictures technique recognizing systems lines presented technique heuristic problem embedded recognition algorithm expressed figure merit multistage decision process recognize input picture optimal system lines figure merit due global approach greater flexibility adequacy problem achieved relation structure figure merit complexity optimization process discussed method suitable parallel processing operations relative state computed parallel number stages equal length curves log approximate method picture processing picture recognition picture description curve detection line detection edge detection optimal detection heuristic methods global recognition parallel processing dynamic programming interaction graph secondary optimization problem
2196 man machine approach solving traveling salesman problem traveling salesman problem belongs important class scheduling routing problems subproblem solving warehouse distribution problem attacked mathematical methods meager success special forms problem problems moderate number points solved large amounts computer time heuristic procedures proposed tested slightly results paper describes computer aided heuristic technique modest amount computer time real time solve large point problems technique takes advantage computer human problem solving abilities computer asked solve problem brute force today heuristics asked organize data human human solve problem easily technique paper point directions field man machine interaction field artificial intelligence heuristic procedures computer aided heuristic technique man machine interaction artificial intelligence assignment problem mask assignment rubber band tour generator interaction process traveling salesman problem
2197 merit regional computing networks suggested means stimulating spread computing capabilities institutions higher learning construction regional computing networks network constructed san francisco bay area stanford university paper reports lessons learned operation network past years major impact network computer power delivered schools awakening computing awareness fostering capability development schools expertise assistance central facility sharing ideas participants important benefits quality variety services provided central facility found play key role effectiveness network regional network brings benefits judged purveyor raw computer power computer sharing computer utility cooperative networks curriculum development educational computing network computing regional computing networks remote computing shared computing
2198 introduction feature analysis generalized data base management systems paper separately published introduction main report analyzes features generalized data base management systems introduction review current state art systems discusses differences similarities capabilities found host language systems found contained systems discussion problems data independence binding user levels identified technical problems facing future designers handling existing stored data providing complex data structures conventional programming languages problem high level interrogation update functions acting network structures mentioned discussion problem catering high volume transactions initiated terminals parametric users lowest level user cobol basis development work considered length respect data structures host language capabilities contained capabilities section assesses effect data base task group proposals final section outlines ten major topics main body full report data base management systems programming languages data structures storage structures information retrieval transaction processing
2199 sparse matrix package part algorithm matrix sparse matrix matrix manipulation
2200 complement division division algorithm theorem expressed form permits serve basis devising division operations produce quotient remainder complement form algorithms division yielding complement results derived numbers represented base greater radix radix complementation schemes considered binary form algorithms includes complement implementation problem quotient overflow complement results dealt selecting form remainder condition complement division division algorithm complement arithmetic complement division complement arithmetic complement arithmetic
2201 animator line dimensional film animation system animator computer animation system designed overcome inherent disadvantages conventional computer animation techniques dec serves input terminal movie making allowing trial error design picture sequences conversational mode stages system input elements light pen pushbuttons teletype maintained user request record ibm instructions produce sequence pictures generated anticipated primary contributions animator provision facility professor produce expository film strips computer graphics computer animation line systems dimensional languages crt microfilm recorder
2202 dynamic microprogramming processor organization programming dynamically microprogrammed processor characterized small bit word read write micro storage access time storage similar cycle time machine nsec microstorage data subroutines micro instructions processor differ conventional perform purely combinatorial operations sequencing control microinstruction presence read write microstorage permits flexible assignment resources read storage processor developed paper stresses simultaneous operation microinstruction adder shifter masker testing facilities processor microassembly language developed overhead involved subroutine linkages analyzed efficiency flexible software linkage scheme examined overhead subroutine characteristics finally examples problem oriented programming considered resulting coding compared system assembly language version technology normalized microprogramming read write microstorage subroutine linkage execution speed
2203 key address transform techniques fundamental performance study large existing formatted files results study key address transformation methods applied set existing files presented method applied file load factor bucket size varied wide range addition variables pertinent specific method values performance method summarized terms number accesses required record number overflow records created transformation peculiarities method discussed practical guidelines obtained results stated finally proposal quantitative fundamental study outlined hashing hashing techniques hashing methods hash coding keys key transformation key address transformation direct addressing direct access method randomizing random access file addressing file organizations file structures scatter storage search collisions clusters information retrieval
2204 program development stepwise refinement creative activity programming distinguished coding taught examples serving exhibit techniques considered sequence design decisions decomposition tasks subtasks data data structures process successive refinement specifications illustrated short nontrivial number conclusions drawn art instruction programming education programming programming techniques stepwise program construction
2205 difsub solution ordinary differential equations algorithm differential equations stiff differential equations
2206 exact solution linear equations residue arithmetic algorithm residue arithmetic symmetric residue modulus mixed radix representation symmetric mixed radix representation mixed radix conversion prime number linear equations gaussian elimination matrix inversion determinant adjoint matrix ill condition
2207 automatic integration ordinary differential equations integration technique automatic solution initial problem set ordinary differential equations criterion selection order approximation proposed objective criterion increase step size reduce solution time option permits solution stiff differential equations program embodying techniques discussed appears algorithm differential equations stiff equations integration step control order control
2208 storage utilization memory hierarchy storage assignment performed hashing algorithm utilization storage studied level memory hierarchy storage level fast store divided number storage areas entry filed hierarchy hashing algorithm attempt place entry areas area full entry slower level store areas level store space entries filed entire hierarchy expression derived expected number entries filed level store expression measure effectively level store means examples storage utilization studied function hashing algorithm number storage areas level store divided total size level store hashing algorithms memory allocation memory hierarchy memory utilization storage allocation storage hierarchy storage utilization
2209 scheduling algorithm computer assisted registration system paper presents scheduling algorithm computer assisted registration system university tennessee notation defined logic algorithm implement educational policy results term implementation presented computer assisted registration scheduling algorithm timetable
2210 automatic program synthesis elementary outline theorem proving approach automatic program synthesis dwelling technical details method illustrated automatic construction recursive iterative programs operating natural numbers lists trees order construct program satisfying specifications theorem induced specifications proved desired program extracted proof technique applied transform recursively defined functions iterative programs frequently major gain inefficiency emphasized order construct program loops recursion principle mathematical induction applied relation version induction rule form program constructed explored detail artificial intelligence answer extraction automatic program synthesis mathematical induction principle problem solving theorem proving
2211 scanned display computer graphics television scanned display system successfully implemented honeywell ddp computer installation scanned image stored core memory computer software scan conversion convert rectangular coordinates point word bit output display array core storage results flicker free displays large amounts data fast graphical interaction scanned image size points displayed frame rate computer graphics scanned display scan conversion raster displays
2212 distribution fisher distribution student distribution
2213 roots matrix pencils generalized eigenvalue problem algorithm eigenvalues matrix roots pencil roots
2214 complex interval arithmetic complex interval arithmetic defined real interval arithmetic complex interval division defined assure smallest resulting intervals real intervals real interval arithmetic complex intervals complex interval arithmetic
2215 application game tree searching techniques sequential pattern recognition sequential pattern recognition spr procedure test features pattern selects feature tested receiving result test procedure classifies unknown pattern selects feature tested medical diagnosis spr paper authors suggest spr viewed person game played nature chance virtually powerful techniques developed searching person strictly competitive game trees easily incorporated directly analogy spr procedures incorporate mini average backing procedure gamma procedure analogues minimax backing procedure alpha beta procedure computer simulated experiments character recognition presented results approach promising sequential pattern recognition game tree searching game nature gamma procedure mini average backing procedure dynamic programming branch bound approach optimal solution
2216 probability distribution values binary trees integral equation derived generating function binary tree values values reflecting sorting effort analysis assume uniformly distributed branching ratios applicable family sorting algorithms discussed hoare singleton van emden solution integral equation advanced algorithms family makes minor reductions expected sorting effort substantially reduces variance sorting effort statistical tests values thousand trees points moments distribution function satisfactory agreement moments computed generating function empirical tests analytical results agreement previously published results moment cases uniform nonuniform distribution branching ratio moment case uniform distribution branching ratio binary trees sorting statistical analysis
2217 experiments automatic learning multipurpose heuristic program automatic learning capability developed implemented multiple multipurpose program learns heuristic tree searching program presently applied resolution theorem proving predicate calculus multiple proving program pp evaluation functions guide search proof goal achievable thirteen general features predicate calculus clauses created automatic learning evaluation functions pp multiple regression program produce optimal coefficients linear polynomial functions terms features automatic data handling routines written passing data learning program proving program analyzing summarizing results data generally collected learning regression analysis experience pp number experiments performed test effectiveness generality learning program results showed learning produced dramatic improvements solutions problems domain collection learning data learning shown generalize successfully domains data collection experiment demonstrated learning program simultaneously improve performance problems specific domain problems variety domains variations learning program tested learning theorem providing heuristic automatic learning modifying tree searching artificial intelligence problem solving adaptive lisp multiple regression resolution
2218 analysis time sharing techniques effectiveness time sharing techniques program relocation disk rotational delay minimization swap volume minimization investigated summary data presented findings discussed vehicle investigation simula based simulation model reflecting early framework planned burroughs time sharing system system based variable sized segments dynamic overlay procedure data presented indication effectiveness type organization time sharing environment design characteristics operational capabilities simulation model bulk core usage operating system model relocation rotational delay minimization simulation swap volume minimization system simulation time sharing
2219 policy driven scheduler time sharing system service received process time sharing operating system characterized resource count sum ij ij number units service received process resource cost unit service class users characterized policy function specifies amount service user belongs class receive function time priority dynamically function difference service promised user policy function service receives scheduling swapping algorithm resource count process policy function provide level service overhead reduced avoiding swaps process received level service algorithm implemented general purpose operating system provided significantly service interactive batch jobs previous scheduler scheduler time sharing operating system resource allocation swapping
2220 conversion limited entry decision tables computer programs proposed modification pollack algorithm pollack proposed algorithm converting decision tables flowcharts minimize subsequent execution time compiled computer program modifications algorithm proposed relies shannon noiseless coding theorem communications concept entropy completely test rule modification completely tests rule results executions modification modifications result modification guarantees globally optimal solution coding decision table entropy information theory noiseless channel sorting
2221 comment conversion decision tables computer programs decision tables diagnostic aids system analysis business applications
2222 comment london certification algorithm proof algorithms debugging certification metatheory sorting place sorting
2223 minit algorithm linear programming algorithm linear programming dual simplex method primal problem dual problem
2224 complex gamma function algorithm gamma function poles gamma function stirling asymptotic series recursion formula reflection formula
2225 circular integer partitioning algorithm partitions combinatorics statistical design experiments
2226 evidence analysis algorithms programming problem purpose note report computational experience additional recently summarized gue al algorithms linear programming problem error gue paper corrected utility algorithms suboptimizer operations research integer programming variables algorithms
2227 proof program find proof correctness algorithm find informal description purpose program method systematic technique constructing program proof process coding prevent intrusion logical errors proof termination treated separate exercise finally conclusions relating general programming methodology drawn proofs programs programming methodology program documentation program correctness theory programming
2228 comments prevention system deadlocks habermann method deadlock prevention discussed deadlock defined system state resource allocations processes shown scheduler introduce artificial deadlocks habermann method prevent permanent blocking situation processes receive resource requests shown deadlock prevention necessarily eliminate permanent blocking method preventing permanent blocking multiprogramming time sharing scheduling resource allocation deadlock lockout deadly embrace knotting
2229 construction rational negative powers formal series methods generation fractional negative powers formal series poisson series chebyshev series shown elementary operations addition subtraction multiplication rational positive negative powers series constructed basically approaches binomial theorem iteration methods methods relationship pointed classical formulas obtained cases shown convergence properties formulas improved additional computations finally end article numerical experiments chebyshev series fourier series series expansion series inversion root extraction binomial theorem newton iterations chebyshev series poisson series fourier series
2230 language treating geometric patterns dimensional space paper cadep problem oriented language positioning geometric patterns dimensional space presented language specifically designed automatic generation integrated circuit masks turns suited placement problems architecture design urban planning logical block diagram representation design criteria structure specific features cadep illustrated graphic language problem oriented language dimensional patterns graphic display fortran extension layout problems integrated circuit architecture design urban planning
2231 reconstruction binary patterns projections horizontal vertical projections finite binary pattern construct original pattern paper give characterization patterns reconstructable projection algorithms developed reconstruct unambiguous ambiguous patterns shown unambiguous pattern perfectly reconstructed time pattern similar ambiguous pattern constructed time dimensions pattern frame pattern reconstruction image reconstruction data compression pattern recognition integral geometry
2232 pattern width angle pattern feature width function angle possesses interpretations demonstrated paper review width concept pattern recognition geometrical concept object work clarify word description made precise computer algorithms feature extraction obtained focus theoretical subject matter results consist set theoretic definition width angle theorem relating pattern boundary radius vector descriptions alternate widths widths calculated illustrative graphical tabular comparisons substantial variation width angle magnitude found principal conclusion set theoretic width angle pattern feature easily computed investigation information contained part width function recommended cases computation width angle difficult feature extraction pattern recognition figure properties picture processing integral geometry width angle extent integral projections linear pattern measures width functions
2233 signature simulation cryptographic codes cyphers allegedly authored thomas jefferson beale subject intensive study years generations cryptanalysts expended untold man years success attempting tode code vast armies fortune hunters treasure seekers devoted herculean labors digging rolling hills virginia locate promised bonanza history pertinent activities fill volumes students cryptography nagging doubts cyphers authenticity alleged solution cypher number deposited county bedford miles buford excavation vault aid unsanitized version declaration independence superb imaginative grandiose hoax perpetrated ages ago reasons modern computer technology perform signature analyses process encoding yield clues deeper insights construction benefit uninitiated encoding method cypher employs document words simply numbered consecutively letters words sought random match letters words sought random match letters clear text message sequence numbers matches written final code primitive process advantage relative security source document moment cypher decoded graders work completed univac includes numerous analytical studies beale cyphers types simulations turned entire process simulated encoding schemes machine analyzed signatures synthetic codes encoded messages hand texts variety methods obtain signatures simulations provide convincing evidence signatures process data dependent strongly mr beale cyphers real matter time finds correct source document locates vault common wealth virginia thomas jefferson beale codes cryptanalysis cyphers decoding declaration independence encoding magna carta pseudotext signature simulation
2234 roots matrix pencils algorithm eigenvalues matrix roots pencil roots
2235 decision table translation algorithm decision table decision table translation
2236 remarks characteristic values solutions mathieus differential equation exponential integral systems hyperbolic algorithms ansi fortran standard
2237 bandsolve algorithm
2238 squares surface fit algorithm
2239 squank algorithm numerical integration integration rule adaptive integration automatic integration simpson rule numerical quadrature quadrature rule adaptive quadrature automatic quadrature round error control
2240 pseudo random numbers algorithm pseudo random numbers testing random number generators
2241 product type point gauss legendre simpson integration algorithm numerical integration product type quadrature gaussian quadrature simpson rule
2242 product type point gauss legendre simpson integration algorithm numerical integration product type quadrature gaussian quadrature simpson rule
2243 product type simpson integration algorithm numerical integration product type quadrature simpson rule
2244 product type trapezoidal integration algorithm numerical integration product type quadrature trapezoidal integration
2245 trace driven modeling analysis cpu scheduling multiprogramming system microscopic level job stream data obtained production environment event driven software probe drive model multiprogramming computer system cpu scheduling algorithm model systematically varied technique called trace driven modeling accurate replica production environment testing variations system time alterations scheduling methods easily carried controlled effects relationships isolated scheduling methods tested included worst methods traditional methods multiprogramming theory round robin served dynamic predictors relative absolute performances scheduling methods concluded successful cpu scheduling method preemptive prevent job holding cpu long period scheduling cpu scheduling multiprogramming performance measurement trace driven models
2246 levels language portable software increasing amount software implemented portable form popular accomplishing encode software specially designed machine independent language map language macro processor assembly language desired object machine design machine independent language key factor operation paper discusses relative merits pitching language high level low level presents comparative results portable software level language machine independent macro processor efficiency
2247 criteria decomposing systems modules paper discusses modularization mechanism improving flexibility ad comprehensibility system allowing shortening development time effectiveness modularization dependent criteria dividing system modules system design problem presented conventional unconventional decomposition shown unconventional decompositions distinct advantages goals outlined criteria arriving decompositions discussed unconventional decomposition implemented conventional assumption module consists subroutines efficient cases alternative approach implementation effect sketched software modules modularity software engineering kwic index software design
2248 method solution cauchy problem parabolic equations integral equation representation parabolic partial differential equations equations defined unbounded domains initial cauchy problem solution integral equation method successive approximation inherent advantages methods error bounds methods order increment size depending finite difference approximations involved parabolic equations cauchy problem method successive approximations
2249 comparison multivariate normal generators methods generating outcomes multivariate normal random vectors variance covariance matrix presented comparison made determine method requires computer execution time memory space utilizing ibm methods basis standard gaussian random number generator results comparison method based triangular factorization covariance matrix generally requires memory space computer time methods random number generator normal distribution multivariate normal distribution multivariate normal generator
2250 computer methods sampling exponential normal distributions corrigendum
2251 weighted increment linear search scatter tables linear search hash tables increment step function key addressed presented comparisons methods terms efficiency computation complexity method applies tables size full table searching practically eliminates primary clustering low cost linear search weighted increment search scatter storage hash table key hash address clustering search length
2252 method incrementally compiling languages nested statement structure method incremental compilation presented applies programming languages statements nested algol pl method permits editing source language general purpose text editor incremental processing frequent recompilation entire routines essential points method syntax language restricted insof ar constructs occur lines internal data structure called skeleton maintained represent statement structure recompilation partially batched sense recompilation modified lines occur set editing commands received parsing compilation factored parts individual lines globally handle relationships lines incremental compiler interactive programming language
2253 index ranges matrix calculi paper describes scheme symbolic manipulation index expressions arise product symbolic manipulation expressions matrix calculi authors previous paper scheme attempts program optimization transforming original algorithm machine code goal automatically generate code handling tedious address calculations necessitated complicated data structures paper preoccupied indexing position relationship indexing indexing position discussed address calculations algorithm transformation compilation data structures indexing indexing position index domain index map index range matrix expressions normal form programming languages program optimization range operations symbolic manipulation syntactic analysis formed expressions
2254 dynamic partitioning array languages classical process partitioning array subarrays extended array language operation modes partitioning defined types arrays subarrays vary original array arbitrary manner definitions motivated realistic examples illustrate partitioning array languages general interest data structure partitioning consists dynamic tree structures derive maintain array control information sufficient detail design array languages description presented paper implemented array language ol development university illinois dynamic partitioning array partitioning array language data structure tree structure programming language design array control blocks partition control blocks
2255 comments moorer music computer composition artificial intelligence heuristic programming models cognitive processes computer music computer composition music theory
2256 comments dijkstra concurrent programming control problem critical section concurrent programming control multiprocessing
2257 note optimal doubly chained trees file searching doubly chained tree binary search tree
2258 additional results key address transform techniques fundamental performance study large existing formatted files hashing hashing techniques hashing methods hash coding keys key transformation key address transformation direct addressing direct access method randomizing random access file organization file search scatter storage information retrieval
2259 modified incomplete gamma function algorithm modified incomplete gamma function incomplete gamma function chi square distribution function poisson distribution function
2260 exact probabilities contingency tables algorithm probability contingency table test significance
2261 approximate method generating symmetric random variables method generating values continuous symmetric random variables fast requires essentially computer memory easy developed method uniform random number source based inverse function lambda distribution turkey approximates continuous theoretical distributions empirical distributions frequently simulations method simulation practitioners simulation monte carlo probability statistics approximations random variables random numbers moments distribution
2262 garbage collection virtual memory computer systems list processing typically growing demand space program execution paper examines practical implications growth virtual memory computer system proposes garbage collection techniques virtual memory systems compares traditional methods discussion simulation garbage collection virtual memory list processing paging segmentation page tables
2263 conversion limited entry decision tables optimal optimal flowcharts algorithms algorithms deriving optimal optimal flowcharts limited entry decision tables presented account rule frequencies time needed test conditions algorithms called optimum finding algorithm leads flowchart minimizes execution time decision table simple rules contracted complex rules called optimum approaching algorithm requires fewer calculations necessarily produce optimum flowchart algorithms derived treating decision tables rule optimum approaching algorithm shown equally valid tables including rule algorithms compared existing applied large decision table derived real case comparison conclusions drawn optimum approaching algorithm lead results comparable existing require computation time general greater computation effort needed applying optimum finding algorithm justified small reduction execution time obtained decision table flowcharting preprocessor optimal programs search
2264 derived semantics programming language constructs constructs simple programming language introduced informally terms values side effects translator defined translates language flowcharts simple machine action machine executing flowchart defined proof constructed effect translating executing program expressed solely terms side effect program constructing proof formal definitions concepts side effect derived order make proof rigorous correctness implementation involves checking definitions derived step acceptable formalization informal description step lambda calculus formal description program correctness programming languages semantics
2265 model type checking current programming languages treat computation classes objects numbers strings labels functions correct compilation execution question arises program properly constructed operations operands compatible activity answering question called type checking paper attempts isolate notion type checking presents partial solution type checking problem based notions abstraction application functions program mapped expression decidable subset lambda calculus characterizes type relations program eliminates information determination type wise correctness incorrectness program resolved reducing lambda calculus expression normal forms constant correct type wise correct program constant error application type checking algol made attendant problems faced notion type checking discussed type checking types lambda calculus models programming languages syntax semantics compiler writing language implementation formal definition
2266 highly parallel algorithm approximating zeros polynomial real zeros algorithm based newton method simultaneously approximates zeros polynomial real zeros algorithm conceptually suitable parallel computation determines starting values convergence zeros guaranteed multiple zeros multiplicity readily determined point method polynomial deflation parallel numerical algorithms real polynomials real zeros newton method starting values guaranteed convergence
2267 algorithms reveal properties floating point arithmetic algorithms presented form fortran subroutines subroutine computes radix number digits floating point numbers rounding chopping machine run methods shown work reasonable floating point computer floating point arithmetic high level languages philosophy language design
2268 comparative study computer programs integrating differential equations study comparing performance computer programs integrating systems ordinary differential equations reported integration methods represented include multistep methods predictor correctors single step methods runge kutta extrapolation methods polynomial rational testing procedure evaluation criteria applied set test problems programs tested included appendix problems criteria investigation found program based rational extrapolation showed performance ordinary differential equations integration program comparison certification validation
2269 tableless date conversion algorithm date calendar fortran statement function arithmetic statement function
2270 interpolation smooth curve fitting based local procedures algorithm interpolation polynomial slope curve smooth curve fitting
2271 aesthetics human factor programming corrigendum
2272 sorting natural selection family sorting algorithms proposed members make fuller memory space yield longer sorted strings extensive simulation results presented implications applications discussed algorithms sorting replacement selection expected string length
2273 conversion decision tables rule mask method rule mask algorithms generating computer programs decision tables algorithms handling limited entry extended entry mixed entry tables algorithms based rule mask method masks execution time perform logical operations immediately end interpreting process execution time considerably reduced instantly marking rules applicable algorithms conditions tested algorithm algorithms combine degree advantages mask methods tree methods decision tables rule mask rule mask method rule mask technique program generator
2274 generating english discourse semantic networks system generating english sentences form semantic nets nodes word sense meanings paths primarily deep case relations grammar system form network imposes ordering set syntactic transformations expressed lisp functions generation algorithm information semantic network select generation paths grammar system designed computational tool linguist develop study methods generating surface strings underlying semantic structure initial finding regard form determiners voice form tense mood rules embedding sentences attention pronominal substitution reported system programmed lisp authors semantic nets grammars deep case relations semantic generation discourse generation
2275 integral equations immunology inversion integral equation fredholm kind basic problem considered strategy yielded success consisted essential points fit experimental data curve properties derive properties unknown function stabilize computation unknown function singular decomposition constrain unknown function approximation represents probability distribution nonnegative number test cases presented set actual experimental data analyzed procedures presented integral equations kind nonnegative constraints singular analysis
2276 computer methods sampling exponential normal distributions methods transforming uniformly distributed random numbers exponentially distributed quantities efficient compared terms memory requirements speed algorithms number procedures convert taylor series expansions directly sampling steps approach sampling continuous distribution exponential distribution definite recommendation made case normal distribution remains choice slower shorter algorithms faster space consuming methods random numbers pseudorandom normal distribution exponential distribution exponential distribution simulation numerical analysis
2277 demand paging utilization working sets maniac ii hardware implementation maniac ii computer working set model demand paging introduced denning discussed characteristics maniac ii description basic demand paging scheme associate memory added maniac ii hardware finally description hardware design implementation working set model discussed specification actions conditions arise operation full working set model demand paging system demand paging dynamic storage allocation maniac ii memory allocation level store paging paging associative memory storage allocation thrashing virtual memory working set model
2278 foster information storage retrieval avl trees binary trees search trees information storage information retrieval
2279 controller braille terminal blind programming aid braille braille character set braille character translation braille computer communication braille computer terminal braille terminal tactile computer communication tactile terminal
2280 comment deadlock prevention method multiprogramming time sharing scheduling resource allocation deadlock interlock lockout deadly embrace knotting
2281 eigen problem block tridiagonal matrices linear algebra eigenvalues eigenvectors partial differential equations
2282 comparison floating point summation methods summation floating point addition truncation error error propagation
2283 thinning algorithms rectangular hexagonal triangular arrays report thinning algorithms developed rectangular hexagonal triangular arrays approach development algorithm pictorial results produced algorithms presented relative performances algorithms compared found algorithm operating triangular array sensitive image irregularities noise yield thinned image reduced number points concluded algorithm operating conjunction hexagonal array features strike balance arrays thinning algorithms rectangular hexagonal triangular arrays image processing skeleton
2284 solution matrix equation ax xb algorithm linear algebra matrices linear equations
2285 computer routine quadratic linear programming problems algorithm computer program based lemke complementary pivot algorithm presented solve linear quadratic programming problems program extensively tested wide range problems results extremely satisfactory linear program quadratic program complementary problem lemke algorithm simplex method
2286 automatic error analysis determining precision problem considered evaluating rational expression desired tolerance computer performs variable precision floating point arithmetic operations automatic error analysis technique determining directly results trial low precision interval arithmetic calculation precision data accuracy required achieve desired final accuracy technique generalize easily evaluation nonrational expressions error analysis interval arithmetic precision control
2287 approach automatic scanning contour maps problem automatic digitizing contour maps discussed structure general contour map analyzed topological properties utilized developing scanning algorithm problem detection recognition contour lines solved color labeling method shown maps normal contour lines suffices distinguish called odd lines tangency problem involved practical scanning discussed solution based minimizing computer memory space simplifying control program suggested automatic scanning contour maps digitizing contour lines topology detection recognition
2288 file organization consecutive retrieval property consecutive retrieval property important relation query set record set existence enables design information retrieval system minimal search time redundant storage important theorems consecutive retrieval property proved paper conditions consecutive retrieval property exists remain invariant established outline designing information retrieval system based consecutive retrieval property discussed file organization consecutive storage consecutive retrieval information retrieval record organization query structure record structure storage tapes storage space minimum access time
2289 cellular arrays solution graph problems cellular array dimensional checkerboard type interconnection identical modules cells cell bits memory small amount combinational logic communicates neighbors array chief computational advantage offered cellular arrays improvement speed achieved virtue possibilities parallel processing paper shown cellular arrays inherently suited solution graph problems adjacency matrix graph easily mapped array matrix element stored cell array typical row column operations readily implemented simple cell logic major challenge effective cellular arrays solution graph problems determination algorithms exploit possibilities parallelism problems solutions inherently serial parallelized algorithms presented solution spanning tree distance path problems direct applications wire routing pert chart analysis analysis types networks algorithms exhibit computation time cases grows rate exceeding log number nodes graph straightforward cellular implementations serial algorithms problems require steps noncellular implementations require steps graph theory cellular logic memory arrays parallel processing special purpose computers algorithms distance spanning tree problems
2290 predominators directed graph algorithm predominator predominator graph theory directed graph shortest path articulation connectivity program optimization optimizing compiler
2291 localization roots polynomial algorithm polynomials roots polynomials theory equations routh hurwitz criterion
2292 note generation rosary permutations permutation permutation generation
2293 comment average binary search length searching binary searching record retrieval
2294 bonus van wijngaarden device local transfers procedure returns
2295 comment composition semantics algol programming primitives programming languages algol semantics recursive composition design programming languages data structures
2296 compiling fixed point multiplications compiling multiplications fixed point arithmetic
2297 model memory contention paging machine paper concerned aspects contention main memory resources multiprogrammed computer system operating demand paging model presented number page frames main memory allocated problem program varies time memory configuration represented explicitly model cpu requirements page exception characteristics program material statistically expressions distribution number page frames allocated executing program long run expected fraction program execution time number page frames average execution interval multiprogrammed load obtained pointed heuristically demonstrated numerically increase obtain average execution interval multiprogrammed load resulting equal fixed partitioning main memory paging machines demand paging operating systems studies queuing analysis memory contention memory management
2298 environment research microprogramming emulation development research project microprogramming emulation state university york buffalo consisted phases evaluation machines support research decision purchase machine appears superior considered organization definition goals group project phases reported emphasis early results achieved research microprogramming emulation computer systems language processors input output systems nano program project management hardware evaluation
2299 extensible editor small machine disk storage design philosophy developing sophisticated utility program illustrated actual design implementation text editor versatile data structure employed small number programmed subroutines types data manipulation data structure merits illustrated ease powerful extensions implemented terms basic editing function command processing context searching executive program garbage collection interpreter list processing macro language paging parameter substitution recursion state table storage allocation string manipulation text editing virtual memory
2300 political redistricting computer problems political redistricting considered computer method redistricting presented criteria acceptable redistricting discussed including population equality compactness contiguity preservation natural political boundaries nonpartisan criteria considered bureau census population data specific results ten congressional districts state missouri st louis county council seats results algorithm feasibility political redistricting aid computer political redistricting reapportionment compactness equal population contiguity transportation algorithm legislative districts population units
2301 generating parsers affix grammars affix grammars level grammars similar van wijngaarden level grammars definition algol affix grammars shown koster equal power van wijngaarden grammars suited parsing koster inventor affix based recursive procedures paper presents bottom scheme parsing based extension floyd production language fpl included algorithm similar deremer converting large class affix grammars fpl paper concludes discussing briefly applicabilities conversion algorithm affix grammars general extensions koster definition affix grammars algorithmic language processing bottom parsing floyd production language parsing syntax directed compiling translator writing systems level grammars
2302 computers employment relationship computers automation employment part general relation technological change employment obvious effect increase productivity due technology eliminate jobs technology affects individual worker nature amount work attitudes work technological change affects occupational structure entire labor force central importance effects impact technology subject extensive study economists sociologists political scientists psychologists single discipline studies contradictory conclusions colored political overtones delineate issues present arguments support viewpoints employment unemployment social implications attitudes skills obsolescence technology unions displacement
2303 archaeology computers reminiscences period preceding founding acm dominated large computer eniac characteristics foreshadow developments history computers
2304 western view computer history histories digital computer field tended impersonal heavy emphasis eastern universities commercial developments article records events early years personal people organizations technologies computers period western part united statesare happened history computer history
2305 plankalkul konrad zuse forerunner today programming languages plankalkul attempt korrad zuse devise notational conceptual system writing today termed program early approach programming language lead practical plan features standard today programming languages investigation historical interest provide insights lead advancements state art modern programming terminology plankalkul presented extent reconstruct published literature higher programming languages programming theory programming history programming
2306 ancient babylonian algorithms early origins mathematics discussed emphasizing aspects greatest interest standpoint computer science number babylonian tablets translated english quoted history computation babylonian tablets sexagesimal number system sorting
2307 dynamic document processing current role computers automatic document processing briefly outlined reasons early promise library automation mechanization documentation processes fulfilled dynamic document environment outlined clustered files searched information retrieved interactive user controlled search process methods automatic query modification based user continuous reorganization stored information function earlier file processing normal collection growth proposed procedures provide powerful tools information retrieval control dynamic library collections items continually added retired automatic indexing automatic search retrieval iterative searching mechanized library processing collection growth collection retirement feedback search
2308 computers urban society survey computers urban society covers broad range activities found city future scope applications limited imagination inventiveness future system designers programmers analysts decision makers computer properly respect human dignity civil liberty significant factor improving efficiency urban process expected benefits computer usage outweigh costs forward expansion usage urban systems urban applications data acquisition data management engineering analysis information systems
2309 computers instructional process directions research development survey computer applications instructional process suggests computer professional contribute effective educational systems education
2310 language analysis humanities computer language oriented humanities exhaustive listing detail indices concordances widespread accepted desirable implications computer science humanities science entailing gathering data construction testing models widely recognized accepted paper argues computer major role language analysis humanities establishing science areas humanities rigor precision analyzing literature teaching student write composition computer critically important facilitator language analysis humanities science humanities pattern recognition pattern generation interdisciplinary cooperation
2311 generational perspective information system development system development categorized generational point view parallels commonly computing system generations generation scope development projects technological world view system developer examined computing milieu management data processing hardware systems software systems systems development process functional systems management systems
2312 present future scientific computation pessimistic forecast expected happen application computers physical sciences scientific computation
2313 evolution storage structures data base management systems grown rapidly power complexity year history data processing commercially computers original concepts split terms adopted refer concepts data structure diagram graphic technique illustrate splitting concepts structural relations exist concepts point evolution block cylinder device field extent file page record physical record logical record track volume entity set entity class set class data structure diagram storage structure physical storage structure logical storage structure storage allocation structure integrated data store index sequential hash randomize item
2314 requirements advanced programming systems list processing list processing systems designed facilitate production large programs manipulate large complex symbolic data stores paper presents overview number system features author feels important improve productivity programmers working domains system view focusing language features algorithms coded language form debugged modified made efficient run data general framework requirements applicable design advanced programming systems wide range applications aspects programming systems highlighted good interactive facilities programmable control structures sophisticated data communication mechanisms interactive features facilitate program composition entry testing debugging editing optimization packaging implementation generalized environment structure model programming control regimes including multiprocesses coroutines backtracking alternative methods procedure invocation required include invocation pattern monitoring condition extended data forms storage management extensibility stressed duality data retrieval function evaluation syntax directed input output data facilitate complex data stores list processing programming languages design programming languages interactive systems control structures data structures programming primitives semantics advanced programming systems
2315 production mathematical software observations made steps creation mathematical software steps suggest coordinated effort creation center focus activities area mathematical software programming
2316 programming languages history future paper discusses history future programming languages higher level languages difficulties writing history key part paper tree showing chronological development languages interrelationships reasons proliferation languages major languages listed reasons importance section chronology happenings significant previous time periods major topics key concepts specific languages discussed programming languages higher level languages languages history future directions language interrelationships programming language tree programming language history programming language future
2317 programming systems languages spite impressive gains pl fortran cobol remain languages world production programs written remain foreseeable future great deal theoretical interest algol extensible languages practical impact problem oriented languages important language development area ten years operating system area major computer manufacturers set produce ambitious multiprogramming systems ran similar problems number university projects directly comparable manufacturers contributed greatly understanding operating system principles important trends include increased interest development system measurement evaluation techniques increased microprogramming programming system functions languages operating systems programming systems multiprogramming history
2318 role computer system models performance evaluation models constitute means investigating computer system performance paper examines interrelationships models methods evaluating performance computer systems establishes circumstances model modeling evaluation performance analytic models simulation models system models
2319 operating system performance overview current future positions respect operating system performance great deal information large number models subsystems developed gaps exist knowledge severe interactions subsystems operating system model total system developed analyze design performance aspects operating system total system designs exceptional today projected increasingly common future design philosophy severe impact modularizing operating computer systems computer system operating system performance evaluation performance measurement measurement techniques modularity layering structured programming paging virtual memory input output disk storage facility drum storage facility sector queueing
2320 structured multiprogramming paper presents proposal structured representation multiprogramming high level language notation explicitly associates data structure shared concurrent processes operations defined clarifies meaning programs permits large class time dependent errors caught compile time combination critical regions event variables enables programmer control scheduling resources competing processes degree desired concepts sufficiently safe operating systems user programs structured multiprogramming programming languages operating systems concurrent processes shared data mutual exclusion critical regions process communication synchronizing events
2321 interface computers data communications systems future systems combine computers digital terminals communications equipment present design optimization problems require reconsideration traditional functional responsibilities respective subsystems standard interfaces means computers digital terminals connect communications systems required interfaces consideration problems coordination synchronization error control signaling stream multiplexing switch control addition minimizing technological interdependence specific subsystem designs focus problems obtained discussion detailed specification computer communications system interface communications standard interface communications protocol virtual channel multiplexed input output coordination input output
2322 view computer architecture attempt made predict developments years field computer architecture standardized inexpensive microcomputers single chip predicted extensively provide logical functions noncomputational devices incidentally design superscale computers computer architecture projection microcomputers computer design computer organization
2323 general theory special functions list number natural developments field algebraic manipulation prospects general theory functions defined ordinary differential equations discussed claim made recent developments mathematics algorithmically generate properties solutions differential equations theory preferable general effort make algebraic manipulation systems knowledgeable usual special functions exponential hypergeometric algebraic manipulation special functions algebraic simplification symbolic integration algebraic geometry differential algebra
2324 management science view nonlinear programming history integer continuous nonlinear programming presented current obstacles practical mathematical programming techniques forecast contributions nonlinear programming made years consolidations theoretical breakthroughs contributions documentation standard test problems construction user oriented software comparisons algorithms demonstrate techniques specific problems integer programming linear programming mathematical programming nonlinear programming quadratic programming management science operations research algorithms
2325 numerical mathematics computer science numerical mathematics viewed analysis continuous algorithms components numerical mathematics discussed foundations finite precision number systems computational complexity synthesis analysis algorithms analysis error programs program libraries numerical mathematics computer science mathematics computation algorithms continuous algorithms
2326 fix point approach theory computation fix point theory scott semantics computer programs defined terms fix points recursive programs justification existing verification techniques extension handling uniform manner properties computer programs including correctness termination equivalence verification techniques semantics programming languages fix points recursive programs computational induction
2327 automata theory brains source ideas automata theory study brain pushed mathematical development theory paper suggests ways automata theory evolve years contribute understanding brain processes information automata theory brain theory network complexity resolution redundancy potential command frog visual system reticular formation mode selection
2328 individualizing instruction generative cai tutor computer assisted instruction generative cal adaptive instruction
2329 computer science vicious circle education computer engineering computer science curriculum systems design
2330 calculation fourier integrals algorithm quadrature filon quadrature integration filon integration fourier coefficients fourier integrals fourier series spline spline approximation spline quadrature extrapolation richardson extrapolation
2331 integer programming problem algorithm integer programming change making problem
2332 special series summation arbitrary precision algorithm function evaluation series summation approximation
2333 random vectors uniform solid angle algorithm random vector generator points uniform sphere spherically symmetric probability distribution
2334 general random number generator algorithm random number generator probability density function transformation cumulative distribution function
2335 eigenvalues eigenvectors real general matrix algorithm eigenvalues eigenvectors qr algorithm nonsymmetric matrices general matrices
2336 complex error function algorithm error function complex argument voigt function special functions function evaluation
2337 sorting problem complexity technique proving min max norms sorting algorithms algorithm finding minimum maximum elements set fewest comparisons proved optimal technique sorting computational complexity computational combinatorics
2338 starting method solving nonlinear volterra integral equations kind fourth order starting method volterra integral equations kind numerical examples presented algorithm volterra integral equations starting method
2339 computer assigned codes verbal responses desirable convert verbal responses multidigit codes conversion generally accomplished clerk coders study conducted test feasibility translating verbal descriptions numerical codes computer program primary emphasis computerized construction reference file verbal descriptions program results study show procedures feasible verbal responses computer coding reference list historical response patterns word strings concept translation word coding
2340 boolean matrix method computation linear precedence functions modified version bell boolean matrix method computation linear precedence functions conflict free matrix precedence relations algorithm detects precedence functions exist indication exist corrective action sufficient conditions existence precedence functions boolean matrices prove existence precedence functions classes conflict free grammars illustrated precedence grammars context free parsing
2341 blocks data type snobol data type called block implemented snobol block dimensional aggregate characters form parallelepiped thought dimensional extension string dimension overstriking blocks printed concatenated dimensions merged basis program defined connection points blocks adapt size shape environment blocks operations composing printable output variety graphical problems including flowcharting bargraphs logic diagrams mathematical equation formation text justification preparation programmed printer appears easy natural addition specialized applications blocks good general purpose device independent output formation mechanism suitable nonnumerical work concept block largely language independent blocks require specialized syntax readily absorbed external structure programming languages character manipulation output formatting string processing graphics nonnumerical programming snobol data types dimensional mathematics test processing flowcharting
2342 interference communicating parallel processes kinds interference communicating parallel processes examined dijkstra knuth solutions mutual exclusion problem subproblems form parallel programs informal proofs correctness solutions paper system parallel processes regarded machine proceeds state collection pertinent data values process configurations state accordance transition rule set rules yields sequences states dictate system behavior mutual exclusion problem subproblems formulated questions inclusion sets states existence sequences mechanical proof procedure shown verify prove correctness discredit prove incorrectness attempted solution respect interference properties shown calculate transition rules partial rules individual processes operate formation partial rules calculation transition rules applicable hardware processes software processes symmetry processes required concurrent programming control cooperating processes formal programs interference mutual exclusion operating systems parallel processes
2343 proposal establish pseudo virtual memory writable overlays computer systems solve executable storage size problems large programs overlays appears overlay scheme balanced combination capabilities found existing techniques proposal presented utilizes capabilities existing schemes complemented additional features writable overlays writable overlay capability virtual memory effect programmer required design overlay configuration overlay structuring complex task tools including graphic display included proposal order aid programmer design content overlays briefly discussed noted details final overlay configuration decided fact overlay overlay structure segment segmentation folding paging linkage editor collector loader virtual memory
2344 optimization performance time sharing systems simulation simulation model time sharing system finite noncontiguous store infinite auxiliary store study variation system parameters store size number jobs allowed execute simultaneously job scheduling algorithm effects variations measure system performance ascertain parameters controllable job scheduling algorithm including scheduling require optimization parameters controllable scheduling algorithm marked effect system performance system performance based cost delay jobs processed shown significant improvements measure system performance obtained variable time slice techniques selecting optimum round robin cycle time appears features benefit optimization parameters controllable scheduling algorithm affect system performance predictable manner benefit optimization features control scheduling algorithm marked effect measure performance supervisor overheads size store speed cpu comparison made results simulation model analytical equations quantum oriented nonpreemptive time sharing systems comparison found favorable time sharing simulation studies optimization measure performance scheduling algorithms
2345 curriculum recommendations graduate professional programs information systems education related information systems organizations discussed curriculum proposed graduate professional programs universities master level material programs identified courses incorporating detailed descriptions presented program organization discussed implementation questions considered education management systems systems analysis management information systems information systems development information analysis system design
2346 hu tucker minimum redundancy alphabetic coding method algorithm information theory coding theory hu tucker method minimum redundancy coding
2347 fourier cosine integral algorithm numerical integration quadrature adaptive quadrature filon quadrature fourier coefficients fourier integrals
2348 merge sort algorithm algorithm sort merge
2349 generation random correlated normal variables algorithm random number normal density normal distribution gaussian density gaussian distribution simulation monte carlo
2350 clenshaw curtis quadrature algorithm quadrature chebyshev series cosine transform fast fourier transform
2351 optimality winograd formula product winograd formula
2352 minimax nonlinear approximation approximation subsets minimax approximation nonlinear approximation subset
2353 fast finite difference solution biharmonic problems setting reynolds number equal method solving navier strokes equations numerically results fast numerical method biharmonic problems equation treated system order equations simple smoothing process essential convergence application made crack type problem numerical analysis partial differential equations biharmonic equation boundary problem
2354 implementing clenshaw curtis quadrature ii computing cosine transformation companion paper methodology experiences automatic clenshaw curtis quadrature scheme quadrature formula scheme requires cosine transformation integrand values shown high cost cosine transformations drawback clenshaw curtis quadrature problems related cosine transformation trouble conventional computation cosine transformation recurrence relation numerically unstable low frequencies largest effect integral case automatic scheme require refinement sampling storage required save integrand values cosine transformation computed part paper shows cosine transformation computed modification fast fourier transform problems overcome modification applicable circumstances requiring cosine sine transformations polynomial interpolation chebyshev points fast fourier transformation cosine transformation clenshaw curtis quadrature chebyshev series
2355 implementing clenshaw curtis quadrature methodology experience clenshaw curtis quadrature important automatic quadrature scheme variety reasons high accuracy obtained integrand values received requires computation cosine transformation arithmetic cost prohibitive paper parts companion paper ii computing cosine transformation shows objection overcome computing cosine transformation modification fast fourier transform algorithm part discusses strategy error estimates summarizes experience implementation scheme clenshaw curtis numerical integration automatic quadrature error estimates chebyshev series
2356 technique software module specification examples paper presents approach writing specifications parts software systems main goal provide specifications sufficiently precise complete pieces software written interact piece additional information secondary goal include specification information meet goal technique illustrated means variety examples tutorial system software specification modules software engineering software design
2357 mux simple approach line computing line system operating part normal batch system cdc computer system required man year initial software implementation basically simple elements input modify files submit batch execution provide results user terminal multiplexer designed developed part project cost man year design checkout parts fabrication aspects system including design criteria implementation cost overhead user reactions time sharing remote computing line access line computing remote file manager real time multiplexer implementation effort operating overhead user reactions remote terminals operating system
2358 multics virtual memory concepts design experience line operating systems grown share information system users increasingly apparent contemporary systems permit degree sharing sharing accomplished allowing users share data input output information stored files secondary storage segmentation multics direct hardware addressing user system programs information independent physical storage location information stored segments potentially sharable carries independent attributes size access privilege design implementation considerations segmentation sharing multics discussed assumption information resides large segmented main memory size main memory contemporary systems limited shown multics software achieves effect large segmented main memory honeywell segmentation paging hardware operating system multics virtual memory segmentation information sharing paging memory management memory hierarchy
2359 improved index sequential access method hashed overflow index sequential access method isam important file management systems moveable head disk devices study investigates unconventional method treating overflow records method hashing techniques allocate space records conditions satisfied superior conventional isam method chaining overflow records linked list techniques conditions long overflow chains significant overflow lack tight disk space constraints record keys small compared total record size significant file index opposed sequential mode hashed overflow time locate record dependent total volume overflow records conventional isam percentage space dedicated overflow records isam index sequential hashing scatter storage disk cylinder overflow
2360 comment double chained tree file searching double chained tree binary search tree
2361 note cheney nonrecursive list compacting algorithm list compacting garbage collection
2362 linear equation solver algorithm matrix algorithms linear equations fortran paged memory virtual memory array processing
2363 minimal spanning tree algorithm spanning tree minimal spanning tree maximal spanning tree
2364 complex gamma function error control algorithm complex gamma function gamma function complex log gamma function loggamma function round error control inherent error control run time error estimates error estimates special functions
2365 matrix computations fortran paging efficiency conventional fortran programs matrix computations improved reversing order nested loops modifications produce modest savings common situations significant savings large problems run operating system paging matrix algorithms linear equations fortran paged memory virtual memory array processing
2366 complex gamma function error control algorithm compute gamma function log gamma function complex variable presented standard algorithm modified respects insure continuity function reduce accumulation round errors addition computation function values algorithm includes object time estimation round errors experimental data regard effectiveness error control presented fortran program algorithm appears algorithms section issue complex gamma function gamma function complex log gamma function loggamma function round error control inherent error control run time error estimates error estimates
2367 computers society proposed computer scientists purpose paper describe concerned effects computers society responsibilities computer scientists society impact computers divided components political economic cultural social moral main part paper defines component presents examples relevant issues remaining portions formats discussed topic topic outline selected set references listed hoped proposal make easier initiate courses subject computers society social implications proposal
2368 implemented graph algorithm winning shannon switching games tutorial paper computer program wins shannon switching games games played graphs program good implementation graph algorithms players shannon switching game connect cut nonsimilar goals connect cut player moving guaranteed existence winning strategy simple strategy explained paper valid cases fact major routines computer connect cut graph algorithms graph processing shannon switching games game playing graph theory positional games demonstration programs game theory spinning trees
2369 hidden lines elimination rotating object method presented determining parts dimensional objects visible invisible objects rotated axis paper describes polygon comparison scheme relationships polygons classified tree types discusses relationship changed pair polygons rotation axis rotation table defined pair polygons remains fixed long rotation axis means rapidly determining visible hidden line relationship polygons additional work extend approach simultaneous rotation axes hidden line problem display programming computer graphics displays graphics computer drawn picture
2370 experimental laboratory pattern recognition signal processing interactive computer controlled scanning display system operation ibm thomas watson research center years system includes flying spot scanners tv camera specially interfaced process control digital computer dot mode vector displays analog input output facilities variety experimental equipment system design programming support typical applications scanner control optical character recognition image processing presented scanners pseudorandom displays interactive terminal image processing pattern recognition
2371 system interprocess communication resource sharing computer network system communication processes time sharing system communication system extended processes distributed computer network hypothetical application system existing network discussed interprocess communication time sharing computer networks resource sharing
2372 implementation security measures information systems security information system represented model matrix elements decision rules row column indices users data items set functions access matrix translation execution time distinguishing data dependent data independent decision rules enables perform checking security translation time repeatedly execution time model explain security features existing systems serves framework proposal general security system implementation today languages operating systems security privacy access control confidentiality operating systems access management data banks management information systems
2373 properties working set model program working set time set distinct pages recently referenced pages relations average working set size missing page rate interreference interval distribution derived time average definitions ensemble average statistical definitions efficient algorithm estimating quantities relation lru recently paging characterized independent reference model page references statistically independent assess effects interpage dependencies working set size observations general assumptions working set size shown distributed working set model paging paging algorithms program behavior program modeling
2374 study storage partitioning mathematical model locality fixed dynamic storage partitioning procedures examined multiprogramming systems storage requirement programs modeled stationary gaussian process experiments justifying model means model dynamic storage partitioning shown provide substantial increases storage utilization operating efficiency fixed partitioning storage partitioning memory management dynamic storage allocation space sharing multiprogrammed storage working sets program behavior models mathematical modeling
2375 comparative analysis disk scheduling policies scheduling policies movable head disks compared performance criteria expected seek time system oriented expected waiting time individual request oriented analytical simulation results obtained variance waiting time introduced meaningful measure performance showing discrimination individual requests choice utility function measure total performance including system oriented individual request oriented measures function differentiate scheduling policies wide range input loading conditions selection implementation maximum performance policy algorithm discussed access time analytical models auxiliary storage direct access storage disk analysis disk scheduling performance criteria peripheral memory devices real time systems response time rotational delay scheduling policies seek time simulation storage units time sharing systems waiting time
2376 synchronization communicating processes formalization defined synchronization mechanism prove concurrently running processes system communicate correctly demonstrated system consisting sending processes deposit messages buffer receiving processes remove messages buffer formal description synchronization mechanism makes easy prove buffer overflow underflow senders receivers operate message frame buffer run deadlock parallel programming multiprogramming program correctness process communication process scheduling
2377 hardware architecture implementing protection rings protection computations information important aspect computer utility system segmentation memory addressing scheme protection achieved part associating concentric rings decreasing access privilege computation paper describes hardware processor mechanisms implementing rings protection mechanisms implementing rings protection mechanisms cross ring calls subsequent returns occur trapping supervisor automatic hardware validation references ring boundaries performed call user procedure protected subsystem including supervisor identical call companion user procedure mechanisms passing referencing arguments cases protection protection rings protection hardware access control hardware access control computer utility time sharing shared information segmentation virtual memory multics
2378 operating system based concept supervisory computer operating system organized small supervisor set independent processes supervisor handles external devices file directory system schedules active processes manages memory handle errors small set primitive functions execute process process request complicated action part supervisor wait occurrence compound event system combining primitives supervisory computer program part supervisor executes programs viewed software implemented supervisory computer paper develops concepts detail outlines remainder supervisor discusses advantages approach operating systems supervisors multiprogramming time sharing cooperating processes
2379 design venus operating system venus operating system experimental multiprogramming system supports concurrent users small computer system produced test effect machine architecture complexity software system defined combination microprograms software microprogram defines machine unusual architectural feature software exploits features define operating system simply paper development system emphasis principles guided design operating systems system design levels abstraction machine architecture microprogramming segments semaphores multiprogramming virtual machines processes process communication virtual devices data sharing resource management deadlock
2380 tenex paged time sharing system pdp tenex time sharing system implemented dec pdp augmented special paging hardware developed bbn report specifies set goals important time sharing system describes tenex design implementation achieve goals include specifications powerful multiprocess large memory virtual machine intimate terminal interaction comprehensive uniform file capabilities clean flexible system structure implementation required compromise achieve system operational months hardware checkout tenex met major goals provided reliable service sites arpa network tenex paging virtual machines time sharing system scheduling algorithm process structure pdp
2381 average binary search length dense ordered lists corrigendum
2382 reconstruction pictures projections corrigendum
2383 music computer composition problem discussed simulating human composition western popular music computer relevant theories music harmony problems kind program schemes work discussed previous computer compositions discussed including illiac suite program generate short melody fragments written simulate aspects human composition samples output presented discussed discovered fragments show characteristics popular melodies strangely alien sound theorized relevant probabilities discriminate unfamiliar sequences artificial intelligence heuristic programming models cognitive processes computer music computer composition music theory
2384 hidden line plotting program algorithm hidden line plot surface plot
2385 zeros complex polynomial algorithm roots roots polynomial zeros polynomial
2386 dynamic microprogramming processor organization programming corrigendum
2387 maximum computing power cost factors centralization problem simple analysis computer economic factors involved comparing multimachine installations versus large single machine installations mathematical model derived assist policy decisions centralization decentralization economics computers computer management economies scale
2388 optimizing binary trees grown sorting algorithm items retrieved binary trees grown form algorithm quicksort average time proportional log number items tree binary trees grown algorithm branches longer reduce average retrieval time restructuring tree make branches uniform length algorithm presented algorithm discussed compared restructures tree item added retrieving information binary trees global local optimization sorting recursion
2389 preliminary report system general space planning computer language set programs language formulating solving class space planning problems language extension algol includes means represent spaces objects manipulate test resulting arrangements variety constraints algorithms solve problems expressed language rely heuristic programming language search algorithms detailed automated design architecture heuristic programs space planning
2390 proposal computer based interactive scientific community problems created explosion papers mathematical sciences drawbacks places research suggested tree mathematical results terminology maintained multiterminal computer system users system store computer updated file current knowledge selecting paper read obtain computer minimum subtree theorems required bring background knowledge paper assumes conditions means provided contribution comments readers work interaction commentators author paper describes system organized role required readers writers commentators interactive system organization scientific community readers writers commentators computer utility information retrieval trees data structures
2391 unitary symmetric polynomials algorithm symmetric polynomials elementary symmetric polynomials unitary symmetric polynomials polynomial synthesis reverse horner scheme reverse synthetic division binomial coefficients
2392 situ transposition rectangular matrix algorithm rectangular matrix transpose
2393 calculation fourier integrals algorithm quadrature filon quadrature integration filon integration fourier coefficients fourier integrals fourier series spline spline approximation spline quadrature extrapolation richardson extrapolation
2394 ordering positive monotonic ordering storage retrieval positive functions monotonic functions increasing functions decreasing function binary system chebyshev zeros square rots continued fractions
2395 quadratic programming nonlinear regression quadratic programming algorithm magnified diagonal method nonlinear regression linear constraints regression method published jacm july nonlinear equations nonlinear regression nonlinear programming quadratic programming squares inequality constraints iteration
2396 muse model understand simple english muse computer model natural language processing based semantic memory network quillian tlc muse model understand simple english processes english sentences unrestricted content restricted format model applies syntactic analysis eliminate interpretations employs simplified semantic intersection procedure find valid interpretation input semantic processing similar tlc syntactic component includes early parse trees special purpose rules relational triple notation interpretation input compatible muse memory structures allowing direct verification familiar concepts addition muse repertoire actions range editing reporting contents memory indirect form question answering examples presented demonstrate model interprets text resolves ambiguities adds information memory generalizes examples performs actions natural language processing semantic memory text comprehension question answering artificial intelligence human memory simulation
2397 optimizing polyphase sort corrigendum
2398 teacher student authored cai newbasic system pedagogical advantages general purpose interactive system called newbasic catalyst discussed newbasic catalystincorporates advanced implementation basic system level interactive features general capability extension user oriented function attachment application feature provide flexible cai scan capability illustrated interaction system level shows students mix advantages independent solo mode computing guided dual mode interaction preliminary experience system urban secondary school setting discussed cai basic catalyst newbasic education computers education extended languages interactive systems
2399 crt editing system test editing manipulation program program operates low cost cathode ray tube entry display stations keyboard function buttons applications potential economy operation aspects implementation discussed editing text cathode ray tube entry display time sharing
2400 hough transformation todetect lines curves pictures hough proposed interesting computationally efficient procedure detecting lines pictures paper points angle radius slope intercept parameters simplifies computation shows method general curve fitting alternative interpretations explain source efficiency picture processing pattern recognition line detection curve detection colinear points point line transformation hough transformation
2401 shrinking binary picture patterns parallel processing algorithm shrinking binary patterns obtain single isolated elements pattern presented procedure counting patterns matrix hardware implementation algorithm large scale integrated technology envisioned principal features method small window employed elements parallel nature process possibility shrinking pattern complexity configuration problems merging disconnection patterns process determination maximum number steps obtain single isolated element pattern reviewed discussed analogy neural network description terms mcculloch pitts neurons presented counting binary patterns shrinking parallel processing multiple connected pictures
2402 pictorial pattern recognition phase problem ray crystallography availability interactive dimensional computer graphics systems coupled powerful digital computers encourages development algorithms adapted environment pictorial pattern recognition techniques make number approaches ray structure determination based molecular model building chemical information frame structural hypotheses computationally tested refined reference experimental data application standard pattern recognition algorithms hindered fact cross correlation model correct structure computed fundamental incompleteness measured data compute upper bound cross correlation simple demonstrates information basis technique structure determination make effective interactive graphics system model building cross correlations intrinsic advantages usual crystallographic techniques based autocorrelation patterson function large structures significant crystallography biological macromolecules hasbeen continue field intense interest pictorial pattern recognition phase problem ray crystallography interactive graphics
2403 procedures natural spline interpolation algorithm approximation interpolation spline natural spline spline approximation cubic natural spline
2404 exponential integrals algorithm exponential integral recurrence relations recursive computation continued fractions
2405 linear systems tridiagonal matrix algorithm system linear equations tridiagonal matrix sparse matrix
2406 data definition mapping language data definition language sa declarative computer language data structures data definition languages concentrate declaration logical data structures concern structures physically realized computer system data definition languages describe logical physical aspects data increasingly apparent languages key systems advanced data management systems distributed data bases paper reviews past work data definition language describing logical physical aspects data applications generalized data definition languages discussed data definition language data storage structure data translation data base management systems file translation
2407 curriculum recommendations undergraduate programs information systems education related information systems organizations discussed curriculum proposed undergraduate program material programs identified courses incorporating detailed descriptions presented program organization problems implementation discussed education undergraduate curricula management systems information systems information analysis system design systems analysis
2408 solving biharmonic equation square direct versus semidirect method methods solving biharmonic equation compared method direct eigenvalue eigenvector decomposition method iterative solving poisson equation directly iteration biharmonic direct method block iterative eigenvector eigenvalue decomposition
2409 algorithm approximate solution wiener hopf integral equations explicit approximate solution equation assumed classical wiener hopf technique applied assumed fourier transforms explicitly approximate solution depends positive parameters integral equations wiener hopf convolution approximate solution
2410 recurrence scheme converting orthogonal expansion generalization scheme hamming converting polynomial pn chebyshev series combined recurrence scheme clenshaw summing finite series terms satisfy term recurrence formula orthogonal expansions series interconversion recurrence schemes hamming recurrence clenshaw recurrence term recurrence term recurrence chebyshev series
2411 tree structured programs control structures flowcharts goto statements inductive assertion fix points optimization compilers program documentation program flow graphs programming language design proof programs semantics programming languages structured programming
2412 comment brent scatter storage algorithm hashing information storage retrieval scatter storage searching symbol table
2413 note subexpression ordering execution arithmetic expressions counterexample supposed optimality algorithm generating schedules trees tasks unequal execution times presented comparison critical path heuristic discussed scheduling tree scheduling task scheduling multiprocessor scheduling
2414 arithmetic overa finite field algorithm algebra
2415 algorithm automatic numerical integration finite interval algorithm automatic integration numerical integration automatic quadrature numerical quadrature
2416 matrix transposition place algorithm transposition matrix operations permutations primitive roots number theory
2417 combinatorial algorithms algorithm permutations combinations
2418 student frequency algorithm student statistic density function series approximation
2419 eigenvalues real symmetric tridiagonal matrix algorithm eigenvalues qr algorithm
2420 experiments automatic theorem prover havingpartial ordering inference rules automatic theorem provers made efficient mind slagle shown axioms partial ordering replaced built inference rules theorem proving algorithm based hyper resolution paramodulation rules embody transitivity partial orderings close relationship predicates program developed modified version rules theorem prover found powerful solving problems involving partial orderings paper presents detailed description program comprehensive account experiments performed theorem proving partial ordering resolution hyper resolution resolution paramodulation inference rules heuristics
2421 scan conversion algorithm reduced storage requirements graphics systems raster scan output device crt hardcopy maintain display file xy random scan format scan converters hardware software provided translate picture description xy format raster format published scan conversion algorithms fast reserve buffer area large accommodate entire screen hand small buffer area slow require multiple passes xy display file scan conversion algorithm linked list data structure process lines drawing strips groups scan lines small primary memory buffer area accumulate binary image group scan lines portion drawing plotted buffer reused portion list processing procedures single pass xy display file required generating binary image slight increase execution time fully buffered core results results slow storage requirements reduced percent causing percent increase execution time graphics scan conversion raster plotter line drawing discrete image dot generation
2422 adaptive correction program statements corrigendum
2423 parser generating system constructing compressed compilers paper describes parser generating system pgs cdc computer purdue university pgs fortran coded compiler input translation grammar bnf syntactic rule corresponds possibly empty code generator realizable assembly language fortran algol subroutine called syntactic rule applied parse program typical pass compilers constructed pgs translate source programs speeds approaching cards minute xpl compiler parser program tables occupy words bit core memory words parsing table entries words links code generators parser generators translator writing systems syntactic analysis normal form grammars pushdown automata translation grammars translator optimization compression algorithm
2424 dynamic verification operating system decisions dynamic verification decision implies time decision made consistency check performed decision independent hardware software dynamic verification operating system decisions prime system designed constructed university california berkeley prime experimental time sharing properties continuous availability data privacy cost effectiveness technique dynamic verification construction operating system make decisions improperly presence single hardware software fault multiple faults lead unreliable operation faults happen reinforce prime dynamic verification ensure user information user gratuitously presence single hardware software fault amount additional hardware software required dynamic verification modest operating systems data security fault tolerance software reliability data privacy program verification modular computer systems
2425 programmer navigator
2426 algorithms scale scale scale determination scales computer generated plots algorithm plotting scaling plotting
2427 bivariate normal distribution algorithm bivariate normal gaussian frequency distribution
2428 cubic spline solutions class functional differential equations algorithm differential equation spline approximation
2429 calculation optimum parameters alternating direction implicit procedures algorithm elliptic difference equations peaceman rachford douglas rachford jordan optimum parameters alternating direction implicit adi
2430 elementary circuits graph algorithm algorithm graph theory circuit search algorithm path search algorithm searching
2431 discrete linear approximation interval linear programming algorithm discrete approximation approximation
2432 addendum multiple precision division algorithm multiple precision division overflow
2433 control structures illiac iv fortran part effort design implement fortran compiler illiac iv extended fortran called ivtran developed language means expressing data control structures suitable exploiting illiac iv parallelism paper reviews hardware characteristics illiac singles unconventional features expected influence language compiler design implications features data layout algorithm structure discussed conclusion drawn data allocation code structuring crucial illiac optimization problem satisfactory method data allocation presented language structures utilize storage method express parallel algorithms array processing parallelism detection explicit parallelism array allocation parallel control structures illiac iv fortran
2434 page residency select working set parameter denning method selecting working set parameter interreference intervals examined omissions model noted assumptions introduced overcome omissions modified model dening results page residency rederived reconsidered selecting working set parameter working set model paging program behavior program modeling
2435 class dynamic memory allocation algorithms anew dynamic memory allocation algorithm fibonacci system introduced algorithm similar advantages buddy system generalization mentioned includes systems special cases dynamic storage allocation buddy system simulation fibonacci fragmentation
2436 note confinement problem note explores problem confining program execution transmit information program caller set examples attempts stake boundaries problem conditions solution stated informally justified protection confinement proprietary program privacy security leakage data
2437 general performance analysis key address transformation methods abstract file concept paper presents approach analysis performance key address transformation methods approach keys file assumed selected key space probabilistic selection algorithm files number keys selected key space suitably weighted accordance algorithm average performance transformation methods files potential methods analysis methods performance classified key distributions partial transformations identified analytically approach applied group transformation methods files keys selected randomly hashing hashing techniques hashing methods hash coding key transformation key address transformation direct addressing randomizing random access scatter storage information retrieval hashing analysis randomization performance analysis
2438 model stack implementation multiple environments control access environment structures require storage procedure activation exist times control nested procedure activated straightforward implement dynamic storage allocation linked blocks activation expensive time space paper presents implementation technique single stack hold procedure activation storage retention storage durations necessarily tied control flow technique property simple case runs identically usual automatic stack allocation deallocation procedure applications technique multitasking coroutines backtracking label valued variables functional arguments discussed initial model single real processor assumed implementation assumes multiple processes coordinate passing control explicitly multiprocessor implementation requires basic technique control structures environments stack allocation dendrarchy retention dynamic storage allocation access environments funarg problem multitasking coroutines backtracking label valued variables functional arguments multiprocessor systems extensible control structures
2439 multiple terminals user program control time sharing environment user written programs dartmouth time sharing system communicate remote terminals simultaneously control interactions terminals programs written standard input output instructions language system paper describes multiple terminal facility implemented requiring system executive system compilers interpreters dtss multiple terminals remote terminals remote consoles time sharing line interaction line games
2440 localization roots polynomial algorithm
2441 hidden line plotting program algorithm
2442 sparse matrix package algorithm
2443 generation permutations lexicographic order algorithm
2444 finding cliques undirected graph algorithm cliques maximal complete subgraphs clusters backtracking algorithm branch bound technique recursion
2445 routing problem algorithm routing problem shortest path traveling salesman problem hamiltonian circuit
2446 analysis skew representations symmetric group algorithm symmetric group skew representation partition young diagram lattice permutation binary model outer product
2447 sard kernels bivariate cubatures error analysis bivariate cubatures remainders obtained sard kernels numerical results computer graphs kernel functions cubatures sard kernels numerical integration remainder formulas
2448 reversible execution debugging pl reversible execution backtracking
2449 simple technique structured variable lookup simple technique symbol table lookup structured variables based simple automata theory presented technique offers deterministic solution problem handled nondeterministic manner pl cobol compilers symbol table organization pl cobol structured variables
2450 empirical working set behavior working set model program behavior proposed recent years basis design scheduling paging algorithms words working set commonly encountered literature dealing resource allocation dearth published data program measurements hope workers field find experimental evidence substantiate base theoretical work virtual memory paging working set software measurement program behavior
2451 design tree structures efficient querying standard information retrieval operation determine records data collection satisfy query expressed terms data values process locating desired responses represented tree search model paper poses optimization problem design trees serve application problem academic sense ordinarily optimal tree implemented means practical techniques hand potentially comparison affords observed performance intuitively attractive ideal search procedure practical application model paper considers design tree search scheme based bit vector representation data shows essentially algorithm design ideal search tree bit vector tree experimental study small formatted file illustrates concepts tree file information storage retrieval clustering search data structure data management query answering
2452 evaluation selection file organization model system work discusses factors affect file data base organization performance elusive subject presents methodology model programmed system estimate primarily total storage costs average access time file organizations specific data base query characterization device related specifications based estimates file structure selected specific situation system convenient tool study file structures facilitate process data base structure design evaluation file organization file structures file management file organization performance file organization model file structure design secondary index organization simulation data base access time storage requirement data base analysis data management
2453 information theory applied conversion decision tables computer programs ideas information theory paper develops heuristic algorithm converts limited entry decision table tree structured computer program minimum average processing time method applicable limited entry decision table require actions single rules cost testing conditions equal general previously published heuristic algorithms compared optimal algorithm reinwald soland algorithm easy code takes smaller translation time felt practice algorithm suited manual conversion decision tables flowcharts decision tables optimum computer programs information measure
2454 computational algorithms closed queueing networks exponential servers methods presented computing equilibrium distribution customers closed queueing networks exponential servers expressions marginal distributions derived computational algorithms based dimensional iterative techniques highly efficient simple implement implementation considerations storage allocation strategies order evaluation examined detail queueing theory queueing networks equilibrium distributions steady state distributions
2455 generalization avl trees generalization avl trees proposed imbalances triangle shape small integer experiment performed compare trees standard avl trees balanced trees basis retrieval time amount restructuring expected worst case retrieval time shown permitting imbalances units retrieval time increased small amount amount restructuring required decreased factor ten theoretical results derived including correction earlier paper duly compared experimental data good correspondence found avl trees balanced trees information storage retrieval
2456 capabilities repeat exit statements formed program defined program loops statements properly nested entered beginning definition formed flowchart shown program formed written repeat multi level exit statements sequence control shown repeat statements single level exit suffice shown flowcharts converted formed flowchart node splitting practical implications discussed formed program statement repeat statement exit statement statement flowchart node splitting software reliability
2457 inductive methodsfor proving properties programs main purposes paper clarification extension results computation recursive programs emphasis difference theoretical practical approaches presentation examination methods proving properties recursive programs discussed detail powerful inductive methods computational induction structural induction including examples applications recursive programs fixed point computational induction structural induction
2458 localization roots polynomial algorithm
2459 hu tucker minimum redundancy alphabetic coding method algorithm
2460 clenshaw curtis quadrature algorithm
2461 graph plotter algorithm
2462 efficient prime number generator algorithm
2463 complex gamma function algorithm
2464 complex method constrained optimization algorithm optimization constrained optimization box algorithm
2465 gaussian quadrature formulas bromwich integral algorithm gaussian quadrature bromwich integral complex integration numerical inversion laplace transform
2466 enumerating combinations objects algorithm permutations combination
2467 chi square quantiles algorithm chi square asymptotic approximation normal deviate chi square deviate degrees freedom
2468 rosenbrock function minimization algorithm function minimization rosenbrock method
2469 petri nets speed independent design petri nets investigated method modeling speed independent asynchronous circuits study circuit realizations petri nets leads demonstration usefulness modeling speed independent operation usefulness emphasized design speed independent processor modules developed investigation petri net implementation speed independent asynchronous petri net
2470 fen axiomatic basis program semantics formal system presented abstracts notions data item function relation argued system suitable set theory derivatives concise accurate description program semantics shown system build composite data types simper operations rowing structuring uniting demonstrated completely primitive types introduced languages mechanism singleton data types deterministic nondeterministic functions shown definable system local environment modeled data item imperative statements considered functions environment nature recursive functions briefly discussed technique presented introduced system technique contrasted paradoxical combinator questions local global environments modes function calling parameter passing touched theory applied proof elementary theorems semantics assignment conditional iterative statements appendix included presents detail formal system governing webs fen abstractions informally body paper semantics formal systems lambda calculus extensible languages data types modes axioms correctness formal language definition formal description data structures description languages models computation
2471 learning program plays partnership dominoes learning program written basic play player partnership dominoes dominoes game incomplete information program principles artificial intelligence programs games complete information checkers chess program constructed strategy signature table classifies board situations interactions game parameters entry table adaptively determined weights indicating advi sability strategies chosen strategy employs probability analysis linear polynomial evaluation choose move program wins approximately thirds games tournament situations defeated championship players artificial intelligence intelligence learning heuristic procedures heuristic programming game playing problem solving dominoes incomplete information machine learning signature table learning programs strategy learning
2472 minimal spanning tree algorithm spanning tree minimal spanning tree prim algorithm
2473 hidden line plotting program algorithm hidden line plot surface plot
2474 difsub solution ordinary differential equations algorithm differential equations stiff differential equations boundary problems
2475 solution linear programming problems variables algorithm linear programming variable
2476 equivalence graphs context free grammars artificial intelligence graphs language theory context free grammars
2477 multiple exits loop goto control structures goto free programming multiple exits loops exit statement
2478 computer science seminars undergraduates education computer science curriculum imprecise synthesis fuzzy educational structure
2479 curriculum recommendations graduate professional programs information systems recommended addendum information systems administration addendum report acm curriculum committee computer education management proposed proposed addendum include curriculum information systems administration important reasons systems designer understand administrative framework operate work effectively important objective curriculum recommendations prepare future manager computer activity felt importance reasons justifies addition recommended outlined format original report education management information systems information systems administration information systems management computer management
2480 teaching programming paper presents goals organization programming designed provide entering students graduate program cultural enrichment professional lives students expected programming courses prior familiar programming languages students users teaching program similar teaching play musical instrument skill taught learned teacher serves vital purposes present set rules producing formed utterances offer numerous demonstrations skill function involved critic finally teacher source information process student involved education programming concepts professionalism
2481 distribution program primary fast buffer storage virtual memory computer system fast buffer cache memory primary memory central processing unit considered optimal distribution program buffer primary memory studied program lifetime function expressions distribution program maximizes fraction cost time integral primary fast buffer storage obtained swapping nonswapping buffer management policies cache virtual memory lifetime function cost time integral fast buffer
2482 mixed solutions deadlock problem mixtures detection avoidance prevention provide effective practical solutions deadlock problem individual techniques tailored subproblems resource allocation operate prevent deadlocks paper presents method based concept hierarchical operating system constructing mixtures suggests subsystems frequently occurring resource allocation problems deadlocks resource allocation operating systems multiprogramming hierarchical systems
2483 coko iii cooper koz chess program coko iii chess player written fortran ibm coko iii plays minimal chess game rate sec cpu time move level close lower chess club play selective tree searching procedure controlled tactical chess logistics deployment multiple minimal game calculations achieve optimal move selection tree searching algorithms heart coko effectiveness conceptually simple addition interesting phenomenon called tree searching catastrophe plagued coko entire development troubles human player standard exponential growth curbed large extent definition trimming fischer set clear distinction tree pruning selective tree searching made representation chess environment strategical preanalysis procedure maps lasker regions specific chess algorithms command structure desiring chess program experimentation comparison made mysterious actions human players coko iii artificial intelligence selective searching tree searching tree searching catastrophe heuristic programming chess algorithms lasker regions fischer set minimal chess game strategical tactical tactical control mode game playing alpha beta machine learning concept formation command structure minimax computer chess tournament auxiliary minimal game
2484 note information organization storage logical structure data base represented tree graph natural view process designing data base constructing tree graph general method constructing tree graph provided important elements general construction method set binary relations algorithm constructing subsets set algorithm selecting element set objects relations algorithms results information structures list tree ring problem information organization storage reduced defining relations formulating algorithms set constraints results presented valuable designers design concepts serve basis developing formal theory subject data base data base management information retrieval information structure file organization storage allocation tree graph
2485 managing computer resource stage hypothesis based study expenditures data processing descriptive stage hypothesis presented suggested planning organizing controlling activities managing computer resource change character period time evolve patterns roughly correlated stages computer budget stage computer acquisition stage ii intense system development stage iii proliferation controls stage iv user service orientation stage related individual tasks managing computer resource computer management computer budget computer expenditures stage hypothesis planning organizing control computer resource
2486 computer photocomposition technical text computer assisted typesetting means photocomposition special problems arise highly technical material mathematical formulas solutions problems devised information system american institute physics include representation special characters foreign alphabets mathematical symbols input keyboards photocomposer generation symbols overprinting precise positioning accent marks floating diacritics line breaks words formulas partly end line partly beginning aspects error correction photocomposition typesetting printing graphics text processing
2487 cubic spline solutions fourth order boundary problems cubic spline approximation fourth order differential equation shown reduce solution term recurrence relationship special cases approximation shown simply related finite difference representation local truncation error order delta cubic spline differential equations boundary problem
2488 squares piecewise cubic curve fitting matrices involved linear squares formulation determined problem fitting piecewise cubic functions possessing continuous derivative arrays planar data curve fitting data reduction function approximation approximation splines
2489 number multiply restricted partitions algorithm partitions enumeration change making energy level degeneracies molecular vibrational energy levels
2490 efficient algorithms graph manipulation algorithm efficient algorithms presented partitioning graph connected components biconnected components simple paths algorithm partitioning graph simple paths iterative iteration produces path vertices paths start vertex dynamically number vertices number edges algorithm requires time space proportional max executed random access computer graphs analysis algorithms graph manipulation
2491 threaded code concept threaded code presented alternative machine language code hardware software realizations software realized interpretive code needing interpreter extensions optimizations mentioned interpreter machine code time tradeoff space tradeoff compiled code subroutine calls threaded code
2492 development decision tables parsing complex decision situations parsing technique proposed parsing based syntactical characteristics decision problem requires description problem decision grid chart format development decision tables defined limits avoiding minimizing repetition conditions actions resulting tables decision tables parsing decision grid chart problem analysis
2493 optimum data base reorganization points data base organization schemes cost access increase due structural inefficiencies caused updates reorganizing data base cost access reduced high cost reorganization prohibits frequent reorganizations paper examines strategies selecting optimum reorganization points data base reorganization files information retrieval
2494 computer generated aid cluster analysis computer generated graphic method conjunction hierarchical scheme cluster analysis illustrated graphic principle representation elements data matrix similarities dissimilarities computer printed symbols character overstrikes shades darkness dark symbol corresponds small dissimilarity plots applied data matrix clustering rearranged matrix clustering show glance clustering brought distinctive clusters set data consisting correlations psychological tests illustrate comparison groupings methods factor analysis methods cluster analysis computer graphics cluster analysis numerical taxonomy hierarchical clustering factor analysis
2495 adapting optimal code generation arithmetic expressions instruction sets present day computers arithmetic expressions code generation compilers object code optimization register assignment trees
2496 optimality shortest latency time drum scheduling discipline computer systems practical determine instantaneous drum position popular discipline determining sequence records accessed called shortest latency time sltf discipline collection varying length records accessed drum positions sltf discipline necessarily minimize drum latency time show total time access entire collection sltf schedule drum revolution longer minimum latency schedule drum scheduling shortest access time minimal latency scheduling shortest latency time
2497 synchronizing processors memory content generated interrupts implementations lock unlock method synchronizing processors multiprocessor system require uninterruptable memory pause type instructions interlock scheme called read interlock require memory pause instructions developed dual dec pdp system real time requirements read interlock method require special read interlock instruction repertoire processors special read interlock cycle repertoire memory modules processor examines lock memory location read interlock instruction interrupted lock set examining lock immediately sets set event sequence read interlock cycle writing lock clears processor interrupted encountering set lock branching advantageous branch resulted effective interrupt interrupts supervisors monitors debugging parallel processing associative memories microprogramming
2498 minimizing wasted space partitioned segmentation paged virtual memory system finite number page sizes considered algorithms assigning pages segments discussed algorithm simple implement problem choosing page sizes minimize expected total wasted space internal fragmentation page table segment solved probability density function segment size expressed convex combination erlang densities dynamic storage allocation virtual memory paging multiple page sizes fragmentation segmentation
2499 efficient multiprogramming resource allocation accounting thought component time sharing operation multiprogramming involve broader questions resource allocation fairness required meet response criterion multiprogrammed system serve maximal resource unfair holding input output channel idle program completes small amount processor usage enabling channel applications principle suggested multiprogramming executive dynamically adjust allocation algorithms gain efficiency allocation resources closely connected accounting resources raising problems repeatability minimal uncharged overhead relative weighting charges dependent resources weightings depend allocation algorithms arbitrary accounting parameters repeatable accounting omits extensive overhead paid multiprogramming prove efficient overcharges result multiprogramming turns allocation memory resource essential control resources general suggestions allocation accounting applied question details provided case monitor controls virtual memory machine monitor executive multiprogramming efficiency resource allocation resource accounting
2500 practical approach managing resources avoiding deadlocks resource scheduling allocation expensive regard time space multiprogramming time sharing environments involving large numbers tasks resources conflicting requirements detection prevention deadlocks require massive amounts additional overhead efficient usage resources maintained resource management program linked lists techniques overcome large portion overhead program running part large scale general purpose operating system resources active detect prevent deadlocks implemented state permit comprehensive levels deadlock prevention detection additional cost incorporated running system due infrequency deadlock situations deadlock resource allocation scheduling resource management multiprogramming time sharing multiprocessing deadly embrace
2501 wylbur interactive text editing remote job entry system wylbur comprehensive system manipulating kinds text computer programs letters manuscripts typewriter terminals connected computer facilities remote job entry retrieval facilities text alignment justification powerful method addressing text content provided paper describes external appearance wylbur internal structure short description major features orvyl general purpose time sharing system operates conjunction wylbur included text editing time sharing line text editing interactive text editing terminal remote terminal terminal system interactive terminal remote job entry remote job retrieval program preparation document preparation data entry content addressing
2502 comment practical aspects computer science education education computer engineering computer sciences curriculum systems design
2503 comment computer music
2504 music computer composition computational linguistics artificial intelligence heuristic programming models cognitive processes computer music computer composition music theory
2505 reflection free permutations rosary permutations adjacent transposition algorithms permutation permutation generation scheduling combinatorial analysis
2506 sparse matrix package algorithm matrix sparse matrix matrix manipulation fortran standards
2507 exact solution linear equations residue arithmetic algorithm residue arithmetic symmetric residue modulus mixed radix representation symmetric mixed radix representation mixed radix conversion prime number linear equations gaussian elimination matrix inversion determinant adjoint matrix ill condition
2508 increasing efficiency quicksort algorithm sorting quicksort
2509 minit algorithm linear programming algorithm
2510 minit algorithm linear programming algorithm
2511 maxflow algorithm
2512 coulomb wave functions algorithm coulomb wave functions wave functions special functions function evaluation
2513 nonrecursive list moving algorithm efficient nonrecursive algorithm moving lisp type list algorithm requires storage nodes list moved additional bits node marking algorithm runs time proportional number nodes list original list structure destroyed moved list moving list copying list traversal garbage collection lisp
2514 array grammar programming system package fortran programs developed permits user interactively design test array grammars user control rule selection procedure derivation parse weighted programming matrices choice instance selection schemes raster random parallel examples involving array languages consisting simple geometrical patterns language neuron pictures picture grammars array grammars
2515 minimal event node network project precedence relations procedure constructing minimal event node network represent set precedence relations parallel activities presented minimal event node network event node network number nodes number arcs minima preserve precedence relations counterexamples show algorithm presented fisher liebman nemhauser produces event node networks minimal procedure includes set covering problem time required grow exponentially number activities network project event node network activity node network minimal event node network dummy activity project precedence relations
2516 hierarchical storage information retrieval probabilistic analysis employed determine effect hierarchical storage organizations information retrieval operations data storage hardware assumed consist levels linearly connected memory hardware increasing data access times increasing data storage capabilities system consist fast semiconductor memory computer core memory extended core storage disk memory data cells equations derived predict effect system data access times sequential files random access files structured files employing multiple hierarchical linked lists information retrieval hierarchical storage
2517 comments ambiguous decision tables conversion computer programs paper comments recently published work decision table translation methods similar rule mask technique applicability methods conventions table meaning discussed argued place multi rule single rule action set convention decision tale usage decision tables systems analysis programming
2518 programming questionnaire effective decision tables programming questionnaire combines aspects decision table programming general purpose programming decision tables construct application program selection source statements predefined file proposed programming questionnairies compromise general special purpose programming significant class large scale problems elements approach discussed existing application customizing modeling applications development programmer productivity simulator generation automatic program generation reprogramming
2519 problem communicating complex information nature difficulty involved communicating mathematical results scientists computer based information retrieval system examined problem analyzed terms psychological information processing processes turns vicious circle effects include ways augmenting written natural language notational linguistic devices exhibition structure inherent information communicating sophisticated interactive system controlled computer complex information information communication mathematics proof interactive system language
2520 greatest common divisor integers multipliers algorithm proof algorithms greatest common divisor euclidean algorithm inductive assertion method
2521 ten subroutines manipulation chebyshev series algorithm chebyshev series differentiation integration curve fitting approximations negative powers
2522 design implementation evaluation working set dispatcher behavior computer system largely dependent algorithms employed allocate system resources processes competing recent research time sharing paging systems developed working set model program behavior source allocation strategy based model proposed implementations principles reported case results announced report discusses design implementation dispatcher based working set principle presents data permit analysis behavior future directions research methods controlling computer system working set dispatcher scheduler time sharing systems resource allocation software evaluation operating systems supervisory systems
2523 region coloring technique scene analysis method converting picture cartoon map regions correspond differently textured regions texture edges picture detected solid regions surrounded broken edges colored propagation process resulting map cleaned comparing region colors textures regions picture merging regions criteria based topology size method applied construction cloud cover maps cloud cover pictures obtained satellites picture processing scene analysis edge detection
2524 approaches match file searching problem searching set keys file find key closest query key discussed closest terms metric key space suitably defined file structures presented search algorithms intended reduce number comparisons required achieve desired result methods derived inequalities satisfied metrics graph theoretic concepts empirical results presented compare efficiency methods matching file structuring file searching heuristics match
2525 statistical study accuracy floating point number systems paper presents statistical results tests accuracy arithmetic systems evaluating sums products products analytic error estimates computations arithmetic systems studied digit hexadecimal digit binary floating point number representations combined usual chop round modes arithmetic numbers guard digits modified round mode guard digits sense arithmetic systems differing binary hexadecimal number representations shown approximately statistically equivalent inaccuracy usual round mode guard digits shown statistically superior accuracy usual chop mode cases save modified round mode found superior chop mode cases error analysis floating point arithmetic rounding guard digits number representation
2526 asymmetric memory hierarchies study presented system implications memory hierarchies backing secondary store small read time relative time required writing read time conventional backing storage devices analytic models introduced shown hierarchies operate ways differ conventional hierarchies shown multiprogram situation past backing storage devices roughly symmetric respect read write times situation continue devices development small read time write time ratio study places emphasis system rca read write holographic optical memory asymmetric memory hierarchy demand paging holographic optical memory memory device memory hierarchy paging storage device storage hierarchy virtual memory
2527 implementation high level language machine computing machines directly execute statements high level language proposed past report describes actual implementation machine computer machine language apl machine fully operational correctly executes apl operations scalars vectors arrays machine automatically allocates memory executes statements calls functions converts numbers type checks subscripts automatically detects types programmer errors computer architecture high level language machine emulators microprogramming interpreters execution speed apl
2528 binary pattern reconstruction projections algorithm pattern reconstruction image reconstruction data compression picture processing
2529 binary pattern reconstruction projections algorithm pattern reconstruction image reconstruction data compression picture processing
2530 algorithm extracting phrases space optimal fashion algorithm information retrieval coding text compression
2531 graduate education ph glut graduate education ph production accreditation
2532 harrison substring testing technique string substring hashing information storage retrieval
2533 gray code sign sequence ordered gray code sign sequences ordering positive monotonic functions binary system galois sum
2534 design implementation diagnostic compiler pl pl compiler dialect pl design objective provide maximum degree diagnostic assistance batch processing environment part assistance implicit provided automatically compiler remarkable characteristic pl perseverance completes translation program submitted continues execution user established error limit reached requires compiler repair errors encountered translation execution design pl dominated consideration pl introduces explicit user controlled facilities program testing accommodate extensions pl abandoning compatibility ibm compiler pl permits pseudo comments constructions contents optionally considered source test comment spite diagnostic effort pl fast efficient processor effectively demonstrates compilers provide diagnostic assistance customarily offered sophisticated source language employed assistance prohibitively costly compilers debugging pl programming languages
2535 effects multiplexing computer communications system study made asynchronous time division multiplexing stochastic nature arrival process user computer affects performance time shared computer communications system concluded values system parameters noticeable improvement performance computer model sense time shared scheduling delays reduced improvements offset transmission delays imposed multiplexing change computer communications system performance analytical simulation results based model computer communications system queue multiplexor tandem single exponential server computer analytical results include general description output process queue conditions output process approximately poisson computer communications time sharing multiplexing scheduling algorithms operating systems
2536 telecommunications front end minicomputer front end minicomputer provide varied remote terminal access large scale computer considered problems embedding telecommunications operating system discussed shown decentralization intelligence acquired front end processing vastly simplifies problem specific implementation discussed emphasis main processor minicomputer link hardware software implementation effect main processor operating system assessment advantages hard wired line controller telecommunications minicomputer front end processor remote job entry remote terminals
2537 common phrases minimum space text storage method saving storage space text strings compiler diagnostic messages method relies hand selection set text strings common messages phrases stored storage technique rise mathematical optimization problem determine message phrases minimize storage requirement problem nontrivial phrases overlap exist dynamic programming algorithm presented solves problem time grows linearly number characters text algorithm applies paper diagnostic messages error messages common phrases minimum space text storage optimization dynamic programming
2538 computer science program small colleges acm subcommittee small college programs committee curriculum computer science cccs appointed unique problems small colleges universities make recommendations computer science programs schools report authorized subcommittee cccs supplies set recommendations courses resources implementation problems discussed specifically constraints limited faculty purposes satisfying wide variety objectives detailed description courses suggestions made advanced work extensive library list included computer science education proposals small colleges programming social implications computer organization file organization bibliographies
2539 solution transcendental equation exp algorithm transcendental function evaluation solution transcendental equation
2540 properties working set model corrigendum
2541 overview ispl computer system design paper explores advantages concurrent design language operating system machine microcode create interactive programming laboratory describes synergistic effect freedom move alter features domains design system implemented freedom simplified incremental compilation system addressing structure centralized communication mechanisms enabling construction hierarchical subsystems suggested important concept operating systems separation scheduling maintenance functions resource allocation separation enables incorporation scheduling algorithms decision endangering system integration correctly performing scheduling decisions concurrent design operating system scheduling interprogram communication incremental compilation virtual addressing debugging hierarchical subsystems
2542 software design evaluation system critical failure current software system design implementation methodology performance proposed design evaluated implemented paper reasons failure explored methodology overcomes difficulties proposed system integrates performance evaluation design implementation system based simple high level language describe evolving system stages development source language description direct input performance analysis simulation routines performance information obtained routines feedback problems adversely affect performance detected early corrected costly major reimplementation proposed system operating system development language processing software evaluation compilers system programming supervisory systems debugging program maintenance modeling system integration simulation
2543 reducing retrieval time scatter storage techniques method entering retrieving information hash table method intended efficient entries looked times expected number probes entry predicted theoretically verified monte carlo experiments considerably comparable methods table full fortran implementation address calculation content addressing file searching hash addressing hash code linear probing linear quotient method scatter storage searching symbol table
2544 automatic error bounds simple zeros analytic functions cauchy ostrowski theorem convergence newton iterates analytic function variable extended include computational errors complex interval arithmetic numerical examples polynomials real complex roots bessel function kind real intervals complex intervals real interval arithmetic complex interval arithmetic newton method cauchy ostrowski theorem zeros polynomials zeros bessel functions
2545 theory discrete patterns implementation snobol notion discrete pattern formalized properties deduced pattern shown generalization formal language algorithms implementing kinds patterns snobol general approach create bottom parse top specification patterns snobol pattern theory parsing pattern matching string processing pattern implementation
2546 grammatical inference designing programming languages designing programming language extending existing language designer faced problem deriving natural grammar language proposing interactive approach grammar design problem designer presents sample sentences structures input grammatical inference algorithm algorithm constructs grammar reasonable generalization examples submitted designer implementation presently restricted subclass operator precedence grammars algorithm outlined applies larger class context free grammars grammar design language definition inference identification limit extensible languages
2547 representation contours ad regions efficient computer search computer searchable representation basic pictorial features contour maps region coverage line structures representation practical storage requirements rapid searching large files data geometric position attribute application representation handling terrain information illustrates utility algebraic properties data structure make computationally easy determine point lies closed boundary compute area contained closed boundary generate closed boundary representing union intersection closed boundaries determine neighboring boundaries point minimum distances point contour map representation region boundary representation computer search structure graphic data retrieval graphic language dimensional patterns computer graphics graphic display
2548 normal deviate algorithm normal distribution inverse probit transform taylor series approximation
2549 random deviates dipole distribution algorithm random number probability density probability distribution dipole distribution cauchy distribution simulation monte carlo
2550 multidimensional monte carlo quadrature adaptive stratified sampling algorithm monte carloquadrature stratified sampling adaptive quadrature sequential stratification
2551 mutual recursion algol restricted compilers algol mutual recursion compiler restrictions
2552 note chain overflow items direct access table hash code open hash chaining information retrieval collision
2553 practical aspect computer science education discussion education computer engineering computer science curriculum systems design
2554 reduction band symmetric generalized eigenvalue problem algorithm reducing generalized eigenvalue problem ax lambda bx ordinary problem case symmetric band matrices positive definite order matrix bandwidth matrices partitioned blocks algorithm terms blocks algorithm reduces generalized problem ordinary eigenvalue problem symmetric band matrix bandwidth algorithm similar rutishauser schwartz reduction symmetric matrices band form calculation requires order mn operation round error calculation order sum errors steps algorithm errors largely determined condition respect inversion generalized eigenvalues symmetric band matrices
2555 variable precision exponentiation previous paper presented efficient algorithm called recomputation algorithm evaluating rational expression desired tolerance computer performs variable precision arithmetic operations recomputation algorithm applied expressions involving variable precision operations sum ei error bounds denotes operation precision ei denotes error operation ith argument paper presents efficient variable precision exponential operation error bound order operations log sin cos simple series expansions handled similarly variable precision exponential function error analysis interval arithmetic
2556 adaptive correction program statements method analyzing statements programming language tolerate considerable inaccuracy specification proposed method involves principles present confined studies area artificial intelligence feature extraction approximate tree matching strategy improvement feedback matching process pilot program incorporating principles preliminary operating results presented final section surveys principles investigated adaptive linguistic pattern matching automatic parsing approximate match compiler program statement analysis syntax analysis
2557 time required sequence matrix products paper discusses multiplication conformable sequences row vectors column vectors square matrices minimum time required evaluate products ordinary serial computers parallel computers discussed algorithms presented properly parse matrix sequences subject constraints machine organization matrix expressions matrix multiplication operation minimization parallel machine time minimization
2558 protection programming languages linguistic mechanisms protect subprogram malfunctioning function producing functions type tagging schemes considered attempt made distinguish access limitation authentication protection types environments trademarks seals access keys access control authentication secrecy
2559 reallocation hash coded tables space allocation hash coded table altered table entries rescattered space technique accomplishing rescattering presented technique independent length table hashing function utilized conjunction linear reallocation table rescattered eliminate previously flagged deletions hash coded table change hashing method efficiency technique discussed theoretical statistics reallocation dynamic storage hash code scatter storage deletions
2560 queuing model multiprogrammed computer level storage system results presented analysis probabilistic model multiprogrammed computer system level storage system sequential dependency accesses devices expressions obtained long run probability cpu storage devices busy numerical results quantify gains cpu utilization obtainable multiprogramming presence type storage system multiprogrammed computer system storage system hierarchical index sets
2561 heuristic approach inductive inference fact retrieval systems heuristic procedures presented developed perform inferences generalizing information procedures make similarity structure imposed data base nonnumerical clustering algorithms implemented model fact retrieval system formal query language property list data structure program experiments procedures test data bases altered deleting part data purposely introducing false data found system infer correct response variety conditions involving incomplete inconsistent data inference inductive inference clustering fact retrieval heuristics
2562 routing problem algorithm
2563 merge sort algorithm
2564 hidden line plotting program algorithm
2565 gaussian pseudo random number generator algorithm random numbers pseudo random numbers gaussian distribution normal distribution
2566 exact cumulative distribution kolmogorov smirnov statistic small samples algorithm kolmogorov smirnov test statistic goodness fit testing
2567 exponential method solution systems ordinary differential equations explicit coupled single step method numerical solution initial problems systems ordinary differential equations presented method designed general purpose nature efficient dealing stiff systems differential equations general order case linear system constant coefficients linear forcing terms case method order implemented put routine usage biological applications stiffness frequently appears favorable results compared standard fourth order runge kutta implementation computation time required method ranged comparable nonstiff problems orders magnitude faster highly stiff systems numerical solution ordinary differential equations initial problems stiff systems
2568 graph formulation school scheduling algorithm problem classically titled examination schedule problem takes forms literature formulations presented terminology classical network theory formulation nondirected network partition nodes minimal number subsets members subset connected anarc obvious lower limit number size largest strongly connected subgraph kirchgassner proved upper limit size logical extension previous work introduction variable length examinations number periods exam object paper generalize definition largest strongly connected subgraph include weighting nodes present approximate algorithm finds largest strongly connected subgraph discuss application algorithm solution school scheduling exam scheduling problems scheduling school scheduling examination scheduling nondirected network graph subgraph strongly connected subgraph
2569 computer generation gamma random variates integral shape parameters shape parameter integral generating gamma random variables digital computer straightforward simple method generating gamma random variates integral shape parameters common procedure approximately generate random variables called probability switch method procedure exact due johnk paper presents rejection method generating gamma random variables greater efficiency rejection method shown efficiency johnk method paper concludes integral mix procedures yields combination accuracy efficiency johnk method rejection method greater probability switch method simulation gamma random variables probability distribution random numbers
2570 comparison list schedules parallel processing systems problem scheduling processors minimize execution time program consists set partially ordered tasks studied cases task execution times deterministic execution times random variables analyzed shown algorithms suggested literature vary significantly execution time schedule coffman graham optimal dynamic programming solution case execution times random variables presented parallel processing precedence graphs scheduling list scheduling optimization dynamic programming
2571 analytic model hasp execution task monitor hasp execution task monitor periodically rearranges os dispatching chain give tasks preemptive execution priority inverse order cpu utilization history effect bound tasks active prevent cpu bound tasks locking tasks paper develops simple model execution task monitor employs study effectiveness monitor improving system performance modified strategy monitor control investigated case task execution memory hierarchy varying speeds hasp os dispatching scheduling modeling performance evaluation
2572 arguments moratorium construction community information utility article author urges prudent decentralized approach question design desirability computerized community information utilities accepting inevitability desirability technology feasibility internally externally proposed project wait complementary techniques evaluate current projected supplementary techniques establish existence demand proposed steps involve representative group ultimate users systems design carefully side effects man world view current proposals community information utilities examined framework conclusion drawn society position justify construction information utility prototype community acceptance policy favor widespread implementation community information utilities social implications public policy
2573 computer programming art
2574 multiple exists loop labels goto free programming control structures multiple exists loops exit statement
2575 match problem document retrieval document retrieval match clustering file searching matching dissimilarity hierarchy classification
2576 simple technique representing strings fortran iv string processing fortran iv string representation structured programming data structures
2577 site data management system application field archaeology apl archaeology koster prehistoric site data management retrieval systems
2578 stabilizing systems spite distributed control multiprocessing networks stabilization synchronization mutual exclusion robustness sharing error recovery distributed control harmonious cooperation repair
2579 register allocation usage counts paper introduces notion usage counts shows usage counts developed algorithms eliminate redundant computations describes usage counts provide basis register allocation paper compares register allocation based usage counts commonly register allocation techniques presents evidence shows usage count technique significantly techniques optimization redundant computations common subexpressions register allocation compilers programming languages virtual memory demand paging
2580 method composing simple traditional music computer method composing musical rounds computer method music theory additional heuristics fundamental method set productions sets applicability rules weight rules operate productions deciding extent rounds generated computer implementation method presented generally resultant music sounds mediocre professional pleasing layman appears full blown music theory needed rounds hardware required structural levels pieces author address musicians computer scientists artificial intelligence heuristic programming models cognitive processes computer music computer composition music theory formal languages probabilistic grammars
2581 locally organized parser spoken input paper describes lpars locally organized parsing system designed continuous speech recognizer lpars processes string phonemes ambiguity error system locally organized sense builds local parse structures reliable word candidates recognized input utterance local structures islands reliability guide search highly garbled words complete utterance parsing speech recognition speech understanding augmented transition network local parsing
2582 improving locality critical working sets approach program locality improvement restructuring method suited systems primary memory managed working set strategy based concept critical working set working set memory reference data method operates extracted trace program restructured shown special cases method optimum experimental results obtained method restructure interactive text editor file system module operating system shown substantial superiority methods proposed literature program restructuring program segmentation locality improvement memory hierarchies virtual memory multiprogramming restructuring techniques static restructuring dynamic restructuring working set strategy critical working set
2583 guidelines humanizing computerized information systems report stanley house humanization social implication management information systems regulations social behavioral sciences philosophy
2584 enumerating full time programmers data census department labor area wage surveys derive estimates number full time programmers employed years figure considerably suggested earlier reports recommended educational administrators courses aimed training programmers justified vocational basis programmer employment census area wage survey
2585 efficient implementation variable projection algorithm nonlinear squares problems errata
2586 adapting optimal code generation arithmetic expressions instruction sets present day computers errata
2587 construction representative synthetic workload errata
2588 rosenbrock function minimization algorithm
2589 computer routine quadratic linear programming problems algorithm
2590 hypergeometric algorithm
2591 numerical inversion laplace transform algorithm laplace transform inversion
2592 generation test problems linear programming codes users linear programming computer codes realized necessity evaluating capacity effectiveness accuracy solutions provided codes large scale linear programming codes installations assumed generating correct solutions bench marked test problems solutions reason failure adequately test codes rarely large problems solutions readily paper presents theoretical justification illustrative implementation method generating linear programming test problems solutions method permits generation test problems arbitrary size wide range numerical characteristics linear programming test problem generation lp program evaluation lp program validation
2593 back end computer data base management proposed data base management function dedicated back end computer accepts commands high level language codasyl data base task group april report host computer accesses data base secondary storage returns results advantages configuration discussed experimental implementation called experimental data management system xdms conclusions back end approach drawn implementation data base management information retrieval computer configurations computer networks data base task group language data base protection data base portability back end computer
2594 structured data structures programming systems permit arbitrary linked list structures enable user create complicated structures sufficient protection deletions result unreachable data elements guarantee additions performed properly remedy situation paper proposes gauge creation restricted class data structures ensures correctness program accomplished explicit structure declaration facility restriction permissible operations execution time checks structured programming data structures data base management system
2595 note calculation working set size finite length reference string arbitrary structure considered exact expression average working set size terms corrected interreference interval statistics derived discussed upper lower bounds obtained average working set size function shown efficiently obtained set page sizes single pass reference string work developments paper denning schwartz infinite length reference strings satisfy statistical properties derive expression relating asymptotic average working set size asymptotic missing page rate function working set replacement working set model paging program behavior
2596 weighted buddy method dynamic storage allocation extension buddy method called weighted buddy method dynamic storage allocation presented weighted buddy method block sizes original buddy method allowed block sizes extension achieved additional cost bits block simulation results presented compare method buddy method results uniform request distribution buddy system total memory fragmentation weighted buddy algorithm total fragmentation smaller weighted buddy method requests exponentially distributed block sizes weighted buddy algorithm buddy systems memory allocation dynamic storage allocation
2597 monitors operating system structuring concept paper develops brinch hansen concept monitor method structuring operating system introduces form synchronization describes method implementation terms semaphores suitable proof rule illustrative examples include single resource scheduler bounded buffer alarm clock buffer pool disk head optimizer version problem readers writers monitors operating systems scheduling mutual exclusion synchronization system implementation languages structured multiprogramming
2598 extending information theory approach converting limited entry decision tables computer programs paper modifies earlier algorithm converting decision tables flowcharts minimize subsequent execution time compiled computer program algorithms considered paper perform limited search necessarily result globally optimal solutions greater search effort needed obtain globally optimal solution complex decision tables justified sufficient savings execution time analogy problem converting decision tables efficient flowcharts understood problem information theory noiseless coding results noiseless coding literature explore limitations algorithms solve decision table problem analogy problems develop improvements information algorithm extending depth search conditions proposing additional conditions added decision table finally information algorithm compared algorithm proposed recent paper verhelst coding decision tables flowcharting information theory noiseless channel sorting
2599 order approximation optimum checkpoint interval checkpoint job failure operations programming checkpoint random failure operations programming
2600 computation splines factorization method algorithm approximation spline approximation
2601 evaluation modified bessel functions complex arguments algorithm bessel functions hankel functions modified bessel functions gauss hermite quadrature
2602 masked dimensional plot program rotations algorithm plotting dimensional plotting
2603 equivalence reducing transition languages deterministic languages class reducing transition languages introduced eickel paul bauer samelson shown morris proper superclass simple precedence languages paper result extended showing fact class equivalent class deterministic context free languages reducing transition languages syntax controlled generators deterministic context free grammars
2604 interactive graphic display region partitioning linear programming linear programming interactive graphic display system implemented solve region design problem partitioning region nonoverlapping subregions areas proportions total cost servicing minimum conversational manner user easily obtain partitionings modifying boundary service centers locations area proportions cost functions examples included interactive graphic display region partitioning area specification linear programming
2605 precise numerical analysis program description program computing solution small number standard numerical analysis problems accuracy limit correct decimal places computed number bounded interval multiple precision midpoint arithmetic operations involving numbers executed interval arithmetic concepts significant digits automatically discarded details supplied problem specification problem computation interval arithmetic multiple precision list structure error control
2606 integration algorithm ordinary differential equations based continued fraction approximations integration algorithm found implementation compared programmed algorithms algorithm step step procedure solving initial problem ordinary differential equations designed approximate poles small integer order solutions differential equations continued fractions obtained manipulating sums truncated taylor series expansions method compared gragg bulirsh stoer taylor series method taylor series method method shown superior speed accuracy method shown superior solution required singularity method finally pass automatically singularities methods discussed failed ordinary differential equations initial problem integration taylor series singularities continued fractions program comparison
2607 problem list issues computers public policy economic sociological effects public computers
2608 recurrence relations fresnel integral similar integrals recurrence relations fresnel integral exponential integral
2609 interpolation rounded ramp functions interpolation function introduced infinitely continuous derivatives composition ramp functions smoothed bends called rounded ramp functions interpolation function extended variable shown efficient fortran program interpolation function obtained point set interpolation approximation smooth interpolation multi variable interpolation interpolation function approximation function spline function
2610 gauss harmonic interpolation formulas open bounded simply connected region plane point assuming starlike respect discuss method computing gauss harmonic interpolation formulas point formulas approximate harmonic function terms linear combination values selected points boundary formulas approximating solution dirichlet problem interpolation quadrature harmonic interpolation harmonic quadrature dirichlet problem
2611 complex method constrained optimization algorithm
2612 rosenbrock function minimization algorithm
2613 transitivity sets algorithm transitivity sets
2614 arrow precedence network transformation algorithm critical path networks precedence networks
2615 procedures computing smoothing interpolating natural splines algorithm approximation interpolation spline natural spline spline smoothing
2616 conversion programs decision tables method objectives problems converting programs decision tables investigated objectives conversions program debugging optimization practice extensions theory computation computability suggested decision tables program optimization debugging semantics theory programming systems analysis
2617 note subexpression ordering evaluation arithmetic expressions
2618 solution dijkstra concurrent programming problem simple solution mutual exclusion problem presented system continue operate failure individual component critical section concurrent programming multiprocessing semaphores
2619 graph coloring conditions existence solutions timetable problem sufficient condition presented existence solution gotlieb class teacher timetable problem relationships established class teacher timetable problem graphs preconditions preconditions place additional restrictions coloration graph preconditions correspond unavailability constraints preassigned meetings class teacher timetable problem recent results convert graphs preconditions graphs shown existence coloration graph required sufficient condition graphs coloration preassignment prevention assignment class teacher timetables
2620 execution time requirements encipherment programs encipherment discussed means protect computer data costs established experiments conducted measure cpu time cdc required additive ciphers programmed assembly language fortran null transformation measure time move data encipherment encipherment word key encipherment word key double key encipherment encipherment pseudo random key results analyzed consistency runs effects constant intermittent errors considered timing rates assembly language encipherment ranged characters pseudo random key cipher characters constant word key cipher equivalent rate required simply move data encipherment fortran tests required times cpu time paper introduces idea enciphering time coefficient ratio enciphering time time fetch store data encipherment encipherment ciphers security privacy transformations protection cryptography cryptology
2621 high security log procedure protection time sharing systems unauthorized users achieved passwords ciphers code passwords risks involved storing passwords computer avoided discuss selection suitable cipher suggest purpose polynomials prime modulus superior ciphers derived sannon codes operating systems time sharing systems security cryptography
2622 user authentication scheme requiring secrecy computer computer operating systems user authenticates entering secret password solely system system compares password recorded password table authentication program integrity system depends keeping table secret paper password scheme presented require secrecy computer aspects system including relevant code data bases attempting intrude scheme based function intruder unable invert function applied user password result compared table entry match interpreted authentication user intruder access table penetrate system invert determine input produces output paper discusses issues surrounding selection suitable plausible arguments penetration exceedingly difficult argued rigorous results finally human engineering problems relating scheme discussed operating system security security authentication passwords encryption cryptology
2623 technique compression storage data widespread tendency storage large programs blocks text produced efficient methods compressing storing data paper describes techniques cases decrease storage size factor techniques involve special handling leading trailing blanks encoding symbols groups fixed size unique fixed point numbers efficiency system considered pertinent statistics compared statistics information coding techniques file maintenance information retrieval utility programs text compression coding techniques data storage data management
2624 formal requirements virtualizable generation architectures virtual machine systems implemented limited number generation computer systems cp ibm previous empirical studies generation computer systems dec pdp support virtual machine system paper model generation computer system developed formal techniques derive precise sufficient conditions test architecture support virtual machines operating system generation architecture sensitive instruction formal requirements abstract model proof virtual machine virtual memory hypervisor virtual machine monitor
2625 capability based addressing addressing schemes making segment tables examined inadequacies schemes dealing shared addresses explained inadequacies traced lack efficient absolute address objects systems direct capability address shown overcome difficulties needed absolute address implementation capability based addressing discussed predicted tags identify capabilities dominate hardware address translation scheme requires modification representation capabilities suggested scheme main memory hash table obtaining segment location main memory unique code hash table avoided recently accessed segments means set associative registers computer capability based addressing substantially superior present systems basis protection simplicity programming conventions efficient implementation addressing capabilities addressing hardware protection protection hardware shared addresses information sharing operating systems computer utility segmentation tagged architecture
2626 protection control information sharing multics design mechanisms control sharing information multics system design principles provide insight tradeoffs designs key mechanisms include access control lists hierarchical control access specifications identification authentication users primary memory protection paper ends discussion weaknesses current protection mechanism design multics protection security privacy access control authentication computer utilities time sharing systems proprietary programs protected subsystems virtual memory descriptors
2627 scheduling independent tasks reduce finishing time sequencing minimize finishing time time system desirable user minimize point time storage required hold incomplete tasks paper deterministic model independent tasks introduced results derived extend generalize algorithms minimizing finishing time addition presenting analyzing algorithms shown general finishing time problem independent tasks polynomial complete admit enumerative solution minimizing finishing time minimizing flow time sequencing algorithms optimal scheduling algorithms deterministic scheduling models
2628 minimal total processing time drum disk scheduling disciplines article investigates application minimal total processing time mtpt scheduling disciplines rotating storage units random arrival requests allowed fixed head drum moving head drum moving head disk storage units considered emphasis relative merits mtpt scheduling discipline respect shortest latency time sltf scheduling discipline results simulation studies presented show scheduling discipline unconditionally superior fixed head drum applications sltf discipline preferable mtpt intra cylinder disk scheduling mtpt discipline offers distinct advantage sltf discipline computational requirements algorithm implements mtpt scheduling discipline shown comparable sltf algorithms cases sorting procedure time consuming phase algorithm drum scheduling disk scheduling shortest latency time sltf minimal total processing time mtpt rotating storage units
2629 unix time sharing system unix general purpose multi user interactive operating system digital equipment corporation pdp computers offers number features seldom found larger operating systems including hierarchical file system incorporating demountable volumes compatible file device inter process ability initiate asynchronous processes system command language selectable user basis subsystems including dozen languages paper discusses nature implementation file system user command interface time sharing operating system file system command language pdp
2630 computing sets shortest paths graph algorithms presented construct shortest paths pair vertices directed graph algorithms generalize floyd algorithm dantzig algorithm finding shortest path pair vertices directed graph graph network shortest path algorithm
2631 information theoretic approach text searching direct access systems direct access computer files bibliographic information attempt made overcome problems information retrieval maintenance large dictionaries greater part infrequently method presented maps hyperbolic frequency distribution suited implementation storage devices method treats text string characters words bounded spaces chooses subsets strings frequencies occurrence word types members subset index keys retrieval rectangular distribution key frequencies results simplified file organization promises considerable cost advantages text searching information theory file organization direct access information retrieval character string bit vector
2632 hydra kernel multiprocessor operating system paper describes design philosophy hydra kernel operating system mmp carnegie mellon multi mini processor philosophy realized introduction generalized notion resource physical virtual called object mechanisms presented dealing objects including creation types specification operations applicable type sharing protection reference object improper application operations defined respect type object mechanisms provide coherent basis extension system directions introduction facilities creation highly secure systems operating system kernel nucleus protection security
2633 compact representation contour plots phone line transmission methods compact representation contour plots tested intended reduce cost transmitting contour plots phone lines feel methods transmit contour plots voice grade phone lines contour plotting data transmission remote terminal data compaction
2634 evaluation statistical software social sciences hundred college university computer installations offer types statistical packages general widely osiris spss bmd data text tsar order provide users basis selection tests made systems results summarized cost performance statistical computation statistical software descriptive statistics bivariate tables pearson correlation regression factor analysis analysis variance
2635 exact probabilities contingency tables algorithm
2636 generation random correlated normal variables algorithm
2637 hidden line plotting program algorithm
2638 hidden line plotting program algorithm
2639 calculation fourier integrals algorithm
2640 modified havie integration algorithm
2641 minimal spanning tree clustering method algorithm clustering pattern recognition feature selection minimal spanning trees
2642 solution overdetermined system equations norm algorithm approximation norm overdetermined system equations linear programming simplex method
2643 minimization spatially multiplexed character sets paper describes technique compacting character sets digital computer retaining fast access individual bits considers problem minimizing storage needed tables reduction techniques developed problem shown reduce covering problem parsing lexical analysis scanning string processing spatial multiplexing
2644 theorem proving language experimentation large number strategies inference rules presently consideration automated theorem proving developing language oriented automated theorem proving paper discusses features instructions language language permits easy extension automated theorem proving programs include strategies inference rules extend ability permit general experimentation alternative systems theorem proving resolution factoring paramodulation programming languages
2645 languages estimating program efficiency languages enabling users estimate efficiency computer programs presented program efficiency wishes estimate written language programming language includes features algol language consists interactive commands enabling users provide additional information program written language output results estimating efficiency processors languages processor syntax directed translator compiles program symbolic formula representing execution time program sound processor set procedures program processor set procedures algebraic manipulation called user operate formula produced processor examples usage languages included limitations present system relation knuth work analysis algorithms directions research discussed programming languages syntax directed translation symbolic manipulation program efficiency analysis algorithms
2646 model masking rotational latency dynamic disk allocation paper presents background algorithms masking rotational latency disk drum discusses anticipatory input output blocks data buffer primary memories mono programmed computer system basic permutation algorithm variations anticipatory nature scheduling algorithms restricted classes programs predictable behavior methods restricted numerical computations matrix partial differential equation methods typical examples shown latency masked small amount buffer memory methods discussed independent size data base considered buffer memory memory hierarchy permutation algorithm rotational latency staging storage allocation
2647 algorithms reveal properties floating point arithmetic units floating point arithmetic high level languages philosophy language design
2648 design number theory package optimized trial division routine number theory package doubly linked list structures storing multiprecise integers package coded ibm basic assembly language makes heavy macro language conditional assembly optimally coded trial division routine determine unique factorization large integers number theory package trial division multiprecise arithmetic factorization doubly linked lists pseudoprime
2649 distributions significant digits roundoff errors generalized logarithmic law derived distribution significant digits random digital integer result determine distribution roundoff errors floating point operations mixture uniform reciprocal distributions significant digits floating point operations roundoff errors uniform distribution reciprocal distribution variance valve
2650 order correction regular languages method presented calculating string belonging regular language nearest number edit operations input string viewed reasonable correction possibly erroneous string originally intended string calculation method presented requires time proportional number characters method find applications information retrieval artificial intelligence spelling correction systems error correction regular languages regular events finite state automata compiler error recovery spelling correction string match problem correction corrector errors nondeterministic finite state automata
2651 treatment data types el constructing general purpose programming language key issue providing sufficient set data types operations manner permits natural problem oriented notation efficient implementation el language number features specifically designed simultaneously satisfy requirements resulting treatment data types includes provision programmer defined data types data types generic routines programmer control type conversion flexible data type behavior context efficient compiled code compact data representation data types modes mode unions type conversion coercion generic functions extensible languages data type definition data description language compilation
2652 reduction compilation costs language contraction programming languages tailored groups users constructed removing unwanted features general purpose language paper describes simulation techniques predict savings compilation cost achievable approach results suggest function describes effect power language compilation cost algorithm expressed language features algorithm removed language cost compiling algorithm decreases moderately features needed removed compilation cost increases sharply design programming languages language contraction compiler design compilation cost algol
2653 solution transcendental equation exp algorithm
2654 generator set partitions subsets algorithm partitions subset generation permutations
2655 subprograms curve fitting splines tension algorithm interpolation splines contouring curve fitting
2656 scalar planar valued curve fitting splines tension spline tension introduced schweikert attempt imitate cubic splines avoid spurious critical points induce defining equations presented efficient method determining parameters computing resultant spline standard scalar valued curve fitting problem discussed fitting open closed curves plane curves importance tension fitting contour lines mentioned application interpolation splines contouring curve fitting
2657 improved program synthesizing algorithm correctness improved program synthesizing algorithm based algorithm proposed waldinger lee algorithm program synthesizing problem translated theorem proving problem program obtained analyzing proof improved algorithm analysis program obtained proof completed achieved modified variable tracing mechanism invented green correctness improved algorithm proved program obtained satisfies specification program synthesizing algorithms theorem proving consequence finding primitive resolutions
2658 alternative approach mutual recursion algol restricted compilers algol mutual recursion compiler restrictions
2659 remarks lookup structured variables pl symbol table structured variables qualified references compilers
2660 addendum patrick paper parallelism polynomial root finding real zeros
2661 ideal teaching machines solution pedagogic language problem education programming languages simulators
2662 graduate education ph glut response rebuttal graduate education ph production accreditation
2663 study computer graduate school business education management business schools
2664 parallelism tape sorting methods employing parallelism tape sorting presented method natural parallelism method approximately achieve goal reducing processing time divisor number processors tape sorting parallelism external sorting queues stacks
2665 copying list structures bounded workspace algorithms presented list structure copying bounded workspace primarily theoretical interest shows cell tag bits task performed time algorithm assuming tag bit cell delivers attractive practical speed noncyclic structure copied linear speed cyclic structures copied average time nlogn foreknowledge cycle absence achieve linear speed variation algorithm solves open problem list structure marking result demonstrates marking average time nlogn aid supplemental tag bits stacks list processing copying marking space complexity
2666 lions counter gotlieb method construction school timetables timetable problem essentially discrete problem discrete problem feasible solution exist solution equivalent continuous problem nondiscrete solution interpreted set timetables differing week week satisfy long term requirements timetable problem combinatorial multi index problem conditions schedule school timetable timetable
2667 execution characteristics programs page demand system data presented show execution characteristics types commonly programs large scale time shared computer system software monitoring facility built supervisor data collection normal system operation data analyzed results analysis presented fortran compiler interactive line file editor probability distribution functions data things cpu intervals intervals number intervals execution empirical distributions compared simple theoretical distributions exponential hyperexponential geometric data show paging characteristics tasks function number pages tasks core program behavior virtual memory paging demand paging software monitor program execution characteristics compiler execution behavior editor execution behavior
2668 computation page fault probability program transition diagram algorithm calculating page fault probability virtual memory system operating demand paging memory sizes replacement rules order markov model program behavior assumed representation system based memory states control states memory substates presented algorithm general sense page fault probabilities calculated nonpredictive replacement rules applied program represented step markov chain detailed illustrate algorithm random recently lru replacement rules virtual memory demand paging replacement rule program model program behavior markov model page fault page fault probability
2669 simple linear model demand paging performance predicting performance proposed automatically managed multilevel memory system requires model patterns programs refer information stored memory recent experimental measurements multics virtual memory suggest rough approximations remarkably simple program reference model suffice simple model combines effect information reference pattern effect automatic management algorithm produce single composite statement number memory references paging exceptions increases linearly size paging memory resulting model easy manipulate applicable diverse problems choosing optimum size paging memory arranging reproducible memory usage charges estimating amount core memory sharing paging demand paging memory models program models performance measurement multilevel memory systems virtual memory associative memory memory usage accounting multics
2670 efficient implementation variable projection algorithm nonlinear squares problems nonlinear squares frequently arise variables solved separated linear nonlinear part variable projection algorithm developed recently designed advantage structure problem variables separate paper slightly efficient slightly general version algorithm appeared earlier nonlinear squares parameter estimation variable projection
2671 note combinatorial problem burnett coffman memories interleaving derangements rencontres combinatorial analysis
2672 emotional content considered dangerous artificial intelligence heuristic programming models cognitive processes computer music computer composition music theory
2673 quadratic search hash tables size hashing quadratic search
2674 scan conversion algorithms cell organized raster display raster scan computer graphics real time character generators previously limited alphanumeric characters display extends capabilities organization include general graphics fundamentally scan conversion algorithms developed support display presented suitable interactive applications interactive applications algorithms implemented fortran cdc computer results obtained implementations show noninteractive algorithms significantly reduce display file storage requirements cost execution time conventional raster display interactive algorithm improve response time reduce storage requirements graphics scan conversion raster display line drawing discrete image dot generation matrix displays
2675 computer routine quadratic linear programming problems algorithm
2676 zeros complex polynomial algorithm
2677 incomplete beta ratio algorithm
2678 visible surface plotting program algorithm hidden line problem computer graphics contour surface
2679 performance tests quicksort descendants detailed performance evaluations presented acm algorithms quicksort shellsort stringsort treesort quickersort qsort algorithms refinements algorithm discussed detail evidence demonstrates qsort requires comparisons author claims algorithms quickersort requires fewest comparisons sort random arrays sorting place sorting sorting efficiency sorting performance tests quicksort quickersort qsort shellsort stringsort treesort utility sort algorithm general purpose sort algorithm sorting algorithm documentation
2680 optimal space allocation disk storage devices amount space required file storage exceeds amount line decisions made files permanently resident mountable decisions affect number mount requests issued operators bottleneck computing facility reducing number mounts decreases turnaround time optimization model assignment files disk packs packs resident nonresident status presented heuristics suggested cases inefficient compute actual optimum disk analysis disk optimization disk files file systems file scheduling space allocation memory hierarchy
2681 dynamic memory repacking probabilistic model multiprogramming system exercised order determine conditions dynamic repacking main memory beneficial expression derived maximum interference repacking process introduce original performance system degraded alternative approaches repacking discussed operating conditions lead improved system throughput repacking delineated dynamic memory repacking memory compaction storage fragmentation multiprogramming system model probabilistic model central processor productivity resource utilization system throughput
2682 construction representative synthetic workload general method constructing drive workload representative real workload real workload characterized demands system resources characteristics real workload obtained system accounting data characteristics drive workload determined matching joint probability density real workload drive workload drive workload realized synthetic program characteristics varied varying parameters calibration experiments conducted determine expressions relating synthetic program parameters workload characteristics general method applied case variables cpu seconds number activities synthetic workload jobs constructed represent month workload consisting jobs benchmarks calibration drive workload input simulation probability distribution representative workload synthetic workload workload characteristics
2683 synthesis loop predicates current methods mechanical program verification require complete predicate specification loop tedious error prone producing program complete correct predicates difficult facilitated machine assistance paper discusses techniques mechanically synthesizing loop predicates classes techniques considered heuristic methods derive loop predicates boundary conditions partially inductive assertions extraction methods input predicates weak interpretations obtain classes loop predicates evaluation weak interpretation program verification loop predicates inductive assertions synthesis loop predicates weak interpretations founded sets property extraction theorem proving
2684 production systems bnf development bnf definition syntax programming languages universally context free requirements numerous interesting difficult issues syntax stem context sensitive requirements notably compatibility declaration identifier correspondence actual formal parameters issues arising block structure paper explores formal notation called production systems providing readable complete formal definition syntax practical illustration small significant subset pl considered detailed presentation application define abstract syntax translations languages previous paper author syntax translation context sensitive grammars compilers formal definition pl standards
2685 parallel execution loops methods developed parallel execution iterations loop asynchronous multiprocessor computers array computers considered practical application design compilers computers discussed parallel computing multiprocessor computers array computers vector computers loops
2686 approximate method generating asymmetric random variables tukey lambda distribution generalized provide algorithm generating values unimodal asymmetric random variables algorithm advantages symmetric random variable generator previously authors addition parameter complicates problem finding parameter values fit distribution simulation monte carlo probability statistics approximations random variables random numbers moments distribution
2687 cell organized raster display line drawings raster scan computer graphics displays real time character generators previously limited alphanumeric characters display extends capabilities organization include general graphics feasibility display shown deriving minimum number patterns required read memory character generator synthesize arbitrary line synthesis process compromise picture quality resulting dot patterns identical conventional raster display time constraints raster display shown satisfied typical design complex line drawings graphics raster display line drawing discrete image dot generation matrix displays
2688 attribute based file organization paged memory environment high cost page accessing implies careful data organization paged memory typical inverted file similar approaches multi key retrieval article analyses cost proposes method called multiple key hashing attempts minimize approach preferable inversion combined method exact specifications combination file data traffic characteristics formulated mathematical program proposed heuristic solution program improve simple inversion technique factor file organization paging retrieval algorithm inverted file multiple key hashing
2689 crt report generating system report generation automated systems design data processing management
2690 numbering systems combinations combinatorics coding system storage mapping function
2691 comments algorithms verhelst conversion limited entry decision tables flowcharts decision table flowcharting preprocessor optimal programs search
2692 reentrant polygon clipping family clipping algorithms algorithms clip polygons irregular convex plane faced volumes dimensions removing parts polygon lie volume dimensions algorithms permit clipping irregular convex windows polygons clipped represented ordered sequence vertices repetition marked contrast representation collection edges heretofore common procedure output polygons identical format vertices introduced sequence describe newly cut edge edges algorithms easily handle difficult problem detecting vertex required corner clipping window algorithms achieve considerable simplicity clipping separately clipping plane window boundary code capable clipping polygon single boundary reentered clip subsequent boundaries reentrant stage clipping store vertex values begin processing output vertex proceeding stage ready code reentered clipping subsequent boundaries clipping complex window shapes practical perspective applications dimentions plane truncated pyramid chosen clipping volume additional planes parallel projection screen serve limit range depth preserved projection perspective projection method arbitrary view angles depth field spite simple fixed clipping planes method ideal subsequent hidden surface computations computer graphics hidden surface clipping
2693 bivariate interpolation smooth surface fitting based local procedures algorithm bivariate interpolation interpolation partial derivative polynomial smooth surface fitting
2694 computation legendre series coefficients algorithm legendre series chebyshev series
2695 tridiagonalization permutations tridiagonalizing matrix similarity transformations important computational tool numerical linear algebra class sparse matrices tridiagonalized row column permutations advantages transformation include absence round errors improved computation time compared standard transformations graph theoretic algorithm examines arbitrary matrix determines permuted tridiagonal form algorithm requires arithmetic number comparisons number assignments number increments linear compares favorably standard transformation methods matrix permutable tridiagonal form algorithm explicit tridiagonal form early rejection occur tridiagonal matrix permutation algorithm eigenvalues graph bandwidth sparse matrix
2696 method bivariate interpolation smooth surface fitting based local procedures method designed interpolating values points rectangular grid plane smooth bivariate function interpolating function bicubic polynomial cell rectangular grid emphasis avoiding excessive undulation grid points proposed method extension method univariate interpolation developed earlier author likewise based local procedures bivariate interpolation interpolation partial derivative polynomial smooth surface fitting
2697 fast method solving class tridiagonal linear systems solution linear systems real symmetric diagonally dominant tridiagonal coefficient matrices constant diagonals considered proved diagonals lu decomposition converges floating point precision proved computed lu decomposition converges floating point arithmetic limits lu diagonals floating point roughly machine precision limits real arithmetic fact exploited reduce number floating point operations required solve linear system order matrix elements subdiagonals superdiagonals operations needed entire lu decomposition takes words storage considerable savings array subscripting achieved upper lower bounds obtained terms ratio coefficient matrix diagonal constants parameters floating point number system generalizations results discussed numerical linear algebra linear systems toeplitz matrices tridiagonal matrices
2698 syntax directed errors analysis context free languages practical approach errors recognizer developed informally recognizer earley elements bellman dynamic programming analyzer takes general class context free grammars drivers finite string input recognition consists errors count corrected version input relative driver grammar algorithm design emphasizes practical aspects programming arbitrary input strings context free grammars parsing dynamic programming stored subanalyses separability state merging errors correction
2699 automatic data structure choice language high level setl set theoretically oriented language high level repertoire semantic objects includes finite sets ordered tuples sets ordered tuples usable mappings paper describes structure optimizer language methods interest optimizer techniques relations inclusion membership established domains ranges tabulated mappings estimated single valuedness tabulated mappings proved facts kind established automatic choice data structures methods employed based extend techniques data flow analysis program optimization automatic programming high level languages set theoretic languages data structure choice
2700 reduction method proving properties parallel programs proving parallel program property convenient assume statement indivisible statement interleaved rest program sufficient conditions obtained show assumption statement indivisible relaxed preserve properties halting correctness proofs parallel system greatly simplified deadlock free reduction interruptible indivisible parallel program semaphore verification method process computation sequence
2701 fast linear algorithm global flow analysis abstract complete paper jacm january algorithm global flow analysis reducible graphs presented algorithm shown treat general class function spaces graph edges algorithm worst case time bound log function operations shown programming terms number operations proportional number exits program loops restriction entry exit control structures linearity algorithm extended larger classes function spaces graphs relaxing time bound examples code improvement problems solved algorithm global flow analysis data flow code optimization common subexpression elimination live dead analysis information propagation flow graph reducibility programming depth search path compression
2702 complexity lr testing problem determining arbitrary context free grammar member easily parsed subclass grammars lr grammars considered time complexity problem analyzed considered fixed integer considered parameter test case shown exists algorithm testing lr property size grammar question hand subject grammar problem parameters complexity problem depends strongly representation chosen specifically shown problem np complete expressed unary expressed binary problem complete nondeterministic exponential time results carry parameterized classes grammars strong slr lc strong lc grammars computational complexity context free grammars parsing lr grammars np complete problems
2703 intrinsically exponential complexity circularity problem attribute grammars attribute grammars extension context free grammars devised knuth mechanism including semantics context free language syntax language circularity problem grammar determine semantics sentences programs fact defined proved problem general computationally intractable specifically shown deterministic algorithm solves problem infinitely cases exponential amount time improved version knuth circularity testing algorithm solves problem exponential time attribute grammars circularity problem context free grammars computational complexity exponential time semantics
2704 exception handling issues proposed notation paper defines exception conditions discusses requirements exception handling language features satisfy proposes language features dealing exceptions orderly reliable proposed language features serve highlight exception handling issues showing deficiencies current approaches remedied multilevel exit goto statement error conditions structured programming conditions programming languages
2705 programming languages natural languages mathematics social aspects programming illuminated analogies similar aspects mathematics natural languages split pure applied mathematics found similarly programming development natural languages flexion word order based language types speaks programming language design based general abstract constructs analogy incidents history artificial auxiliary languages suggested fortran cobol remain dominant long time promising avenues work wide influence high quality program literature programs general utility studies questions related program style analogies related social aspects pure applied mathematics language quality language development artificial auxiliary languages literature style descriptive prescriptive attitudes
2706 note set basis problem related compaction character sets note discusses reduction set basis problem clique cover problem compaction character sets set basis set covering computational complexity polynomial completeness clique cover
2707 backtrack programming techniques purpose paper twofold exposition general backtrack technique history shown macros considerably shorten computation time cases technique allowed solution previously open combinatorial problems computation terms series substantial reduction computation time solution combinatorial problem backtrack depth search exhaustive search macros combinatorial computing attacking queen problem difference preserving codes pentominoes tiling problems squaring square
2708 practical syntactic error recovery paper describes recovery scheme syntax errors automatically generated high quality recovery good diagnostic information low cost previous recovery techniques summarized empirical comparisons made suggestions research topic conclude paper syntax errors error recovery error correction parsing simple precedence compilers debugging
2709 genealogy control structures issue program control structures history heated controversy put issue solid footing paper reviews numerous theoretical results control structures explores practical implications classic result bohm jacopini theoretical completeness discussed recent ideas control structures explored include review control structures results time space limitations theorems relating relative power control structures notions equivalence conclusion impact theoretical results practicing programmer importance control structures operational abstractions discussed argued insufficient evidence warrant variants structured programming control structures goto statements language design pascal
2710 queries relational expressions square data sublanguage paper presents data sublanguage called square intended ad hoc interactive problem solving computer specialists square based relational model data shown relationally complete avoids quantifiers bound variables required languages based relational calculus facilities query insertion deletion update tabular data bases syntax suggestions made alternative syntaxes including syntax based english key words users limited mathematical background database data sublanguages relations query languages casual user relational data model tabular data interactive problem solving nonprocedural languages relational completeness
2711 vector space model automatic indexing document retrieval pattern matching environment stored entities documents compared incoming patterns search requests appears indexing property space entity lies circumstances indexing system expressible function density object space retrieval performance correlate inversely space density approach based space density computations choose optimum indexing vocabulary collection documents typical evaluation results shown demonstrating usefulness model automatic information retrieval automatic indexing content analysis document space
2712 horner rule evaluation general closed queueing networks solution separable closed queueing networks requires evaluation homogeneous multinomial expressions number terms expressions grows combinatorially size network direct summation impractical algorithm show combinatorial operation count algorithm based generalization horner rule polynomials shown queue size throughput obtained negligible extra cost normalization constant evaluated queueing networks queueing theory horner rule evaluation multinomial sums load dependent service rate
2713 remark stably updating standard deviation data corrigendum
2714 merging parallel processors linearly ordered sets parallel processors working synchronously paper presents algorithm merging parallel processors requires log log steps integer algorithm requires log steps case order magnitude km constant algorithm requires log steps performances compare favorably previous parallel merging algorithm batcher algorithm requires log steps general case km log special case km parallel processing parallel merging parallel binary insertion
2715 implementation structured english query language relational model data xrm relational memory system sequel language covered previous papers reviewed sequel relational data sublanguages intended ad hoc interactive problem solving computer specialists version sequel implemented prototype interpreter interpreter designed minimize data accessing operations required respond arbitrary query optimization algorithms designed purpose relational model query language nonprocedural language database data structure data organization
2716 optimizing performance relational algebra database interface approach implementing smart interface support relational view data proposed basic idea employ automatic programming techniques interface analyzes efficiently refines high level query specification supplied user relational algebra interface called squiral designed approach detail squiral seeks minimize query response time space utilization performing global query optimization exploiting disjoint pipelined concurrency coordinating sort orders temporary relations employing directory analysis maintaining locality page references algorithms implementing operators codd relational algebra presented methodology composing optimize performance user query relational database database optimization inverted file automatic programming query language data manipulation language high level language
2717 convert high level translation definition language data conversion paper describes high level nonprocedural translation definition language convert powerful highly flexible data restructuring capabilities design based simple underlying concept form enables users visualize translation processes makes data translation simpler task convert chosen conveying purpose language confused language program bearing data conversion data restructuring data translation database reorganization translation definition utility program programming languages nonprocedural languages
2718 preliminary system design dbtg data structures functional approach database design introduced approach goal design derive data structure capable supporting set anticipated queries structure models business operational computer program utilizers functional approach design data structures conforming data base task group specifications automatic programming technology utilized program typically generate procedure generate declaratives network model databases data base task group database design data structure automatic programming translation nonprocedural languages
2719 mechanical program analysis means analyzing program performance deriving closed form expressions execution behavior paper discusses mechanization analysis describes system metric analyze simple lisp programs produce closed form expressions running time expressed terms size input paper presents reasons mechanizing program analysis describes operation metric explains implementation discusses limitations analysis programs performance analysis execution time execution behavior difference equations generating functions list processing lisp algebraic manipulation programming languages analysis algorithms
2720 optimal balancing requests disks determining policy efficient allocation utilization set disk drives differing operational characteristics examined analytical techniques standard queueing theory disk drive characterized queueing model service time disk drive represented probability density function sum uniform distributions total response time set disk models minimized varying load conditions results faster devices higher utilization factors number device types utilized decrease decreasing load specific examples combinations examined disk drive hierarchies system evaluation input output modeling queueing theory balancing scheduling device assignment
2721 digital simulation river plankton population dynamics paper deals development mathematical model digital simulation fortran iv phytoplankton zooplankton population densities river previously developed rate expressions order study relationships ecological mechanisms involved simulation parameters varied illustrating response ecosystem conditions including types chemical thermal pollution investigation accuracy simulation methods simulation actual population dynamics asterionella columbia river made based approximations conditions river totally accurate simulation found predict general annual pattern plankton growth fairly specifically revealed importance annual velocity cycle determining patterns addition study demonstrates usefulness digital simulations examinations aquatic ecosystems environmental planning involving examinations digital simulation mathematical modeling plankton population dynamics phytoplankton zooplankton river ecosystems ecological mechanisms environmental simulation modeling ecosystems pollution environmental impact environmental planning
2722 multidimensional binary search trees associative searching paper develops multidimensional binary search tree tree dimensionality search space data structure storage information retrieved associative searches tree defined examples shown storage requirements significant advantage structure single data structure handle types queries efficiently utility algorithms developed proven average running times record file insertion log deletion root deletion random node log optimization guarantees logarithmic performance searches log search algorithms partial match queries keys proven maximum running time nearest neighbor queries empirically observed average running time log performances surpass algorithms tasks algorithm presented handle general intersection query main focus paper theoretical felt trees applications examples potential associative retrieval binary search trees key attribute information retrieval system nearest neighbor queries partial match queries intersection queries binary tree insertion
2723 multiprocessing compactifying garbage collection algorithms multiprocessing compactifying garbage collector presented discussed simple case processors performing lisp list operations performing garbage collection continuously examined capabilities processor defined interprocessor communication interlocks complete procedures garbage collection standard list processing primitives presented explained attention problems marking relocating list cells processor operating primary aim list processor run unimpeded processor reclaims list storage complex cases involving list processors garbage collection processors briefly discussed garbage collection storage reclamation reclaimer storage allocation multiprocessing synchronization semaphores parallel processing compactification relocation lisp list processing free storage pointers data structures gc processor
2724 lemniscate constants corrigendum
2725 comparison simulation event list algorithms corrigendum
2726 combining decision rules decision table techniques minimizing logic circuits applied simplification decision tables combining decision rules method logically equivalent quien mccluskey method finding prime implicants decision rules implied rule occur low frequency rule simplify decision table objectives merit consideration optimizing decision table reducing machine execution time reducing preprocessing time reducing required machine memory reducing number decision rules improves clarity decision table human reader shown objectives furthered methods objective attained overspecified decision rules combined objective compared potential benefits objectives deciding methods quine mccluskey method prime implicants minimization maximization logic circuit boolean method coding decision tables flowcharting sorting
2727 multiple byte processing full word instructions method parallel processing packed data items ordinary full word computer instructions processing requires operations execution contingent datum technique processing small data items alphanumeric characters byte processing character processing packed data
2728 consecutive storage relevant records redundancy paper studies properties class file organizations crwr records relevant query stored consecutive storage locations organizations redundancy theorems provide tools reducing redundancy crwr organizations developed redundancies obtained application theorems compared query inverted file organizations crwr organization minimum redundancy developed queries sets keys consecutive retrieval storage file records query redundancy key
2729 comments paper chen ho binary coded decimal digits decimal data storage data compression huffman codes variable length codes
2730 interactive consulting natural language interactive programming systems commands give programmer line instruction systems commands argued easy make commands significantly helpful accept requests natural language demonstration weizenbaum eliza program provided script turns natural language system consultant interactive programming time sharing systems natural language processing computer assisted instruction
2731 remark stably updating standard deviation data standard deviation
2732 guarded commands nondeterminacy formal derivation programs called guarded commands introduced building block alternative repetitive constructs nondeterministic program components activity evoked final state necessarily uniquely determined initial state formal derivation programs expressed terms constructs calculus shown programming languages sequencing primitives program semantics programming language semantics nondeterminacy case construction repetition termination correctness proof derivation programs programming methodology
2733 deterministic parsing ambiguous grammars methods describing syntax programming languages ways flexible natural conventional bnf descriptions considered methods involve ambiguous context free grammars rules resolve syntactic ambiguities shown efficient lr parsers constructed directly classes specifications programming language specification parser generation translator writing systems syntax analysis lr parsing parsing ambiguous grammars
2734 external storage fragmentation produced fit fit allocation strategies published comparisons external fragmentation produced fit fit memory allocation consistent simulation series experiments performed order obtain data relative performance fit fit understanding reasons underlying observed differences time memory product efficiencies fit fit generally percent small populations size request population effect allocation efficiency exponential hyperexponential distributions requests fit outperformed fit normal uniform distributions exponential distributions distorted ways fit outperformed fit hypothesized fit outperforms fit fit preferentially allocating end memory encourages large blocks grow end sufficient contiguous space large requests results simulation experiments supported hypothesis showed relative performance fit fit depends frequency request coefficient variation request distribution greater approximately equal unity fit outperformed fit storage fragmentation dynamic memory allocation fit fit
2735 discrimination employment women computer industry discrimination women salaries employment programmers systems analysis keypunch operators machine operators
2736 note hash linking hash search address space extension implicit pointers monitor conditions
2737 determining minimum area encasing rectangle arbitrary closed curve paper describes method finding rectangle minimum area arbitrary plane curve contained method interest packing optimum layout problems consists determining minimal perimeter convex polygon encloses curve selecting rectangle minimum area capable polygon theorems introduced show side minimum area rectangle colinear edge enclosed polygon minimum area encasing rectangle convex polygon minimum area rectangle curve enclosed curve optimum layout optimum packing minimum area encasing rectangle
2738 concept transparency design hierarchically structured systems paper deals design hierarchically structured programming systems develops method evaluating cost requiring programmers work abstraction real machine number examples hardware software illustrations method hierarchical systems bottom design levels abstraction synchronization primitives
2739 restriction language computer grammars natural language past years number systems computer analysis natural language sentences based augmented context free grammars context free grammar defines set parse trees sentence group restrictions tree conform order valid sentence analysis coverage grammar increased efficient representation essential development paper presents programming language designed specifically compact perspicuous statement restrictions natural language grammar based ten years experience parsing text sentences comprehensive english grammar linguistic string project embodies syntax routines relations found adequate computerized natural language analysis language current implementation linguistic string parser natural language parsing grammar programming languages
2740 large semaphore based operating system paper describes internal structure large operating system set cooperating sequential processes processes synchronize means semaphores extended semaphores queue semaphores number parallel processes carefully justified semaphore constructions explained system proved free deadly embrace deadlock design principle alternative dijkstra hierarchical structuring operating systems project management performance discussed operating system large rc multiprogramming system cooperating processes operating system semaphores semaphore applications queue semaphores deadlock deadly embrace hierarchical structuring multiprogramming operating system structure asynchronous structuring buffering parallel processes synchronizing primitives reentrant code rc project management time schedule debugging project planning project scheduling reliability program proving coroutines correctness program maintenance software paging
2741 decomposability instabilities saturation multiprogramming systems step step approach model dynamic behavior evaluate performance computing systems proposed based technique variable aggregation concept decomposable system borrowed econometrics approach order identify multiprogramming paging systems unstable regimes operations ii critical computing loads bring system states saturation analysis leads complete definition circumstances thrashing set multiprogramming paging performance evaluation saturation instabilities thrashing aggregation system levels hierarchy networks queues
2742 improved event scanning mechanisms discrete event simulation simulation models large complex real world applications occasionally earned reputation eating hours computer time problem attributed part difficulties slow stochastic convergence additional problem lies fact significant amount bookkeeping time required future events proper sequence paper presents method significantly reducing time spent scanning future event lists discrete event simulations models presented improve effectiveness events list scan problem burdensome discrete event simulation simulation event scanning mechanisms
2743 sorting merge sorting computational complexity data modeling computing models binary comparisons
2744 addition arbitrary base radix conversion paper presents generalization programming technique add subtract numbers represented radix including mixed radix stored digit byte bytes sufficient size radix conversion unnecessary looping required numbers stored display format applications cobol mix hexadecimal sums discussed addition subtraction decimal arithmetic arbitrary radix arithmetic radix conversion mix arithmetic cobol display arithmetic mixed radix arithmetic
2745 linear space algorithm computing maximal common subsequences problem finding longest common subsequence strings solved quadratic time space algorithm presented solve problem quadratic time linear space subsequence longest common subsequence string correction editing
2746 efficient string matching aid bibliographic search paper describes simple efficient algorithm locate occurrences finite number keywords string text algorithm consists constructing finite state pattern matching machine keywords pattern matching machine process text string single pass construction pattern matching machine takes time proportional sum lengths keywords number state transitions made pattern matching machine processing text string independent number keywords algorithm improve speed library bibliographic search program factor keywords phrases string pattern matching bibliographic search information retrieval text editing finite state machines computational complexity
2747 simplified recombination scheme fibonacci buddy system simplified recombination scheme fibonacci buddy system requires tables repetitive calculations additional bits buffer presented fibonacci buddy system dynamic storage allocation buddy system
2748 indirect threaded code efficient arrangement interpretive code related bell notion threaded code requires space amenable machine independent implementations threaded code snobol interpretors code generation
2749 significant event simulation paper compares method simulation organization called significant event method called clock pulse method examples automobile traffic models significant event method found efficient clock pulse method low levels system interaction efficient high levels simple mathematical model trade relative running time methods developed model aids choosing simulation methods experiment concluded significant event method simulation systems computational efficiency sufficient importance simulation organization event simulation clock pulse simulation significant event simulation
2750 cost oriented algorithm data set allocation storage hierarchies data set allocation today multilevel storage systems based qualitative ad hoc decisions desirable obtain optimal solution allocation problem clear number parameters involved makes intractable straight forward solution situation find set assumptions simplify problem greatly provide basis significant cost elements paper presents quantitative allocation step considers significant detailed costs system utilization data storage data staging data migration avenues improvement present algorithm usefully accurate aid quantifying problems data set allocation storage system configuration device designs data set allocation hierarchical storage storage system configuration data staging data migration storage allocation analysis
2751 illumination computer generated pictures quality computer generated images dimensional scenes depends shading technique paint objects cathode ray tube screen shading algorithm depends part method modeling object determines hidden surface algorithm methods object modeling shading hidden surface removal strongly interconnected shading techniques methods object modeling related hidden surface algorithms presented human visual perception fundamental laws optics considered development shading rule quality increased realism generated images computer graphics graphic display hidden surface removal
2752 generation cycles graph set basic cycles algorithm basic cycle cycle graph
2753 heuristic problem solving design system equipment furniture layouts designer problem solver dps demonstrates computer perform simple design tasks designs furniture equipment layouts task chosen simple defined characteristic design tasks architecture engineering urban planning natural resource management space planning tasks involve manipulating dimensional representations objects create feasible optimal solutions problems involving topological metric spatial constraints paper describes extensive tests performed program dps heuristic problem solver planning phase prefixed planning process give sense direction diagnostic procedures locate difficulties remedial actions recover difficulties convex polygon representation accurately describe objects layout representation topological metric constraints tested design easily updated dps applied problems slow limited scope ideas general demonstrates selectivity controlling search methods achieve task specific information planning diagnostic procedures remedial actions selective alternative generators artificial intelligence computer aided design design synthesis diagnostic search heuristics planning problem solving representations search strategies space planning spatial representations
2754 syntactic algorithm peak detection waveforms applications cardiography peaks digitized waveform detected algorithm incorporating piecewise linear approximation tabular parsing techniques parameters serve identify waveform context enabling accurate measurement peak amplitude duration shape algorithm sufficient speed line real time processing application demonstrated electrocardiogram peak detection digitized waveform piecewise linear approximation context free grammar bottom parsing electrocardiogram
2755 math computer programming corrigendum
2756 problem list public policy issues computers health care economic social implications public computing medicine health care
2757 kth shortest paths networks kth shortest paths
2758 note lu factorization symmetric matrix symmetric matrices factorization test matrices matrix inversion separable systems
2759 solution overdetermined system equations norm algorithm
2760 visible surface plotting program algorithm
2761 visible surface plotting program algorithm
2762 ten subroutines manipulation chebyshev series algorithm
2763 basic cycle generation algorithm graph basic cycles fundamental cycle spanning tree vertex adjacency matrix
2764 intelligent analyzer understander english paper describes working analysis generation program natural language handles paragraph length input core system preferential choice deep semantic patterns based call semantic density system contrasted syntax oriented linguistic approaches theorem proving approaches understanding problem artificial intelligence computational linguistics template paraplate stereotype machine translation understanding natural language processing semantic preference semantic density
2765 analysis performance inverted data base structures envision architecture data base systems hierarchical level level framework stressed inverted data base file organization analyzed implementation oriented aspects inverted directory viewed realistically large data base subjected inversion formulations derived estimate average access time read storage requirements formalizing interaction data base content characteristics logical complexity queries machine timing blocking specifications identified order effect performance formulations presented conjunction index selection criteria determine optimum set index keys data base architecture inverted file organization data base performance measurement secondary index organization information storage retrieval query answering
2766 copying cyclic list structures linear time bounded workspace bounded workspace copying algorithm arbitrary list structures algorithm operates linear time require tag bits previous bounded workspace copying algorithms achieved time tag bits log time tag restriction algorithm copy contiguous section memory method applicable fixed variable size nodes list processing copying linear time space complexity
2767 comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system algorithms based end order tree structure event notices indexed linear list algorithms tested set typical stochastic scheduling distributions chosen show advantages limitations algorithms end order tree algorithm shown advantageous replacement algorithm current simulation languages promising algorithm indexed list concept require adaptive routine employed general purpose simulators performance study fruitful simulation time flow mechanisms event list algorithm simulation time flow mechanisms event list algorithm simulation executive event scheduling routine discrete system simulation sorting
2768 algorithm locating adjacent storage blocks buddy system simple scheme determination location block storage relative blocks scheme applicable buddy type storage allocation systems dynamic storage allocation buddy system generalized fibonacci sequences
2769 modification warshall algorithm transitive closure binary relations algorithm computing transitive closure binary relation represented boolean matrix algorithm similar warshall executes faster sparse matrices computers paging environment warshall algorithm transitive closure reachability matrix directed graph digraph boolean matrix binary relation
2770 quadratic hash method table size prime number previous work quadratic hash methods limited case table size prime number results derived composite numbers shown composite numbers square component primes full period integer coefficient quadratic hash functions quadratic search hash code scatter storage table size
2771 synthesis solids bounded faces technique presented class solid objects synthesized stored computer synthesis begins primitive solids cube wedge cylinder solid moved scaled rotated solids added subtracted algorithms perform addition practical designers technique advantage operations concise readily composed terms easily imagined solids short sequences operations suffice build complex solids bounded faces computational geometry computer aided design graphics machined components polyhedra shape synthesis dimensional modeling
2772 maintenance opportunity list class teacher timetable problems principal components procedures solution class teacher timetable problems maintenance opportunity list opportunity list maintenance methods based conditions existence solution general framework conditions specific sets conditions combinatorial conditions opportunity list schedule school timetable timetable
2773 weighted buddy method dynamic storage allocation corrigendum
2774 remark algorithm
2775 dilogarithm function real argument algorithm dilogarithm
2776 computer networks higher education socio economic political factors study presents results nationwide survey computer networks higher education conducted major minor networks identified major networks included arpa net california state college network university iowa iowa state university network michigan educational research information triad triangle universities computation center network north carolina depth studies conducted nets based experiences operating networks number factors identified consideration developing networks finally recommendations advanced development networks higher education future networks higher education
2777 solution cigarette smoker problem conditional statements report discusses problem introduced patil claimed cigarette smoker problem solved operations introduced dijkstra conditional statements examination patil proof shows established claim strong restrictions restrictions eliminate programming techniques dijkstra introduction semaphore concept paper solution problem discusses generalized operators suggested patil operating systems operating processes process synchronization primitives
2778 perturbations eigenvalues normal matrices corrigendum
2779 discrete squares polynomial fits recurrence relation orthogonal polynomials widely discrete squares data fitting variant classical algorithm numerical properties presented reason improved performance explained orthogonal polynomials data fitting squares recurrence relation orthogonal polynomials residual
2780 computing elements inverse sparse matrix recursive algorithm computing inverse matrix lu factors based relationships takahashi al examined formulas algorithm dependency relationships derived computational costs developed general comments application stability made sparse matrices triangular factorization elements inverse tridiagonal matrix sensitivities
2781 algorithm sequential access method alternative index sequential keys direct access method sequential access method randomizing information retrieval
2782 reply gentleman marovich high level languages philosophy language design
2783 algorithm select finding ith smallest elements algorithm selection medians quantiles
2784 expected time bounds selection selection algorithm presented shown efficient average theoretically practically number comparisons select ith smallest numbers min lower bound percent formula derived selection computational complexity medians tournaments quantiles
2785 glypnir programming language illiac iv glypnir earliest existing languages designed programming illiac iv computer syntax language based algol extended programmer explicitly parallelism algorithm terms word vectors paper describes characteristics goals philosophy language discusses problems parallel computer architectures glypnir illiac iv programming language parallel computation parallel architecture
2786 system typesetting mathematics paper describes design implementation system typesetting mathematics language designed easy learn people secretaries mathematical typists mathematics typesetting experience language learned hour rules fewer exceptions typical expressions size font positioning line drawing print mathematical conventions automatically input sum infinity pi produces formula syntax language small context free grammar compiler compiler make compiler translates language typesetting commands output produced phototypesetter terminal forward reverse half line motions system interfaces directly text formatting programs mixtures text mathematics handled simply paper typeset authors system typesetting photocomposition compiler compiler graphics printing text processing
2787 matrix reduction efficient method paper describes efficient method reduction binary matrices arise school time tabling problems development john lions generalized adapted fit complete timetabling process compact data representation efficient processing techniques fuller advantage previous knowledge matrix designed structured program readily coded reader high level low level programming language choice practical tests method shown good basis realistic timetabling algorithm binary matrices matrix reduction tight set school timetable construction structured programming
2788 finding circles array accumulators picture processing pattern recognition curve detection line fitting
2789 minimal spanning tree clustering method algorithm
2790 elementary circuits graph algorithm
2791 exact probabilities contingency tables algorithm
2792 jacobi polynomials algorithm
2793 chi square quantiles algorithm
2794 state space problem reduction theorem proving relationships paper suggests bidirectional relationship state space problem reduction representations presents formalism based multiple input multiple output operators basis viewing types representations manner representation language recognition problem based cocke parsing algorithm illustration method representing problems order logic inference system employed resolution based theorem prover determines set clauses interpreted state spacer mode problem reduction mode presented analogous concepts problem reduction theorem proving terminology refer noted relationship problem reduction input resolution linear resolution discussed artificial intelligence state space representation problem reduction representation theorem proving language recognition
2795 sentence paraphrasing conceptual base model natural language based underlying language free representation meaning program based model produce sentence paraphrases demonstrate understanding respect context generator operates conjunction natural language analyzer combined memory inference model generating sentences meaning structures program employs information retrieval deduction capabilities memory model model encompasses diverse classes linguistic knowledge include executable tests conceptual properties stored discrimination nets information relating conceptual syntactic roles stored word sense dictionary surface grammatical knowledge stored formal grammar artificial intelligence natural language processing language generation models cognitive processes semantic representation
2796 monitors operating system structuring concept corrigendum
2797 order approximation optimal checkpoint interval corrigendum
2798 analysis interleaved memory systems blockage buffers model interleaved memory systems presented analysis model monte carlo simulation discussed simulations investigate performance system structures schemes sending instruction data requests memory system performance measured determining distribution number memory modules operation memory cycle important observation investigations separately grouping instruction data requests memory substantially increase average number memory modules operation memory cycle results simulations analytical study displayed system structures interleaved memory systems modular memory systems memory performance analysis blockage buffer conflict buffer simulation monte carolo simulation
2799 stably updating standard deviation data sample set data fit data constant function computational method based matrix formulation givens transformations sample standard deviation updated data accumulates procedure numerically stable require storage data methods dealing weighted data data removal presented updating square standard deviation process requires square roots standard deviation squares givens transformation updating estimates removing data
2800 connections accuracy stability properties linear multistep formulas paper concerned stability accuracy families linear step formulas depending parameters emphasis numerical solution stiff ordinary differential equations upper bound derived order accuracy inf stable formulas criteria stability shown arbitrary inf stability implies conditions stability strict stability meaning extraneous roots psi satisfy psi inf stability constraint implies strict stability parameter classes formulas inf stability implies stability stiff equations parametrized linear multistep formulas order accuracy stability inf stability strict stability
2801 storage efficient representation decimal data decimal digits represented bits computers bcd digits compressed optimally reversibly bits digits bits simple algorithm based fixed length combination variable field length encodings half cases compressed code results conventional bcd code simple removal redundant bits long decimal message subdivided digit blocks separately compressed result differs asymptotic minimum length percent hardware requirement small mappings manually binary coded decimal digits decimal data storage
2802 math computer programming structured programming proved important methodology systematic program design development structured programs identified compound function expressions algebra functions algebraic properties function expressions permit reformulation expansion reduction nested subexpression independently environment modeling stepwise program refinement program execution finally structured programming characterized terms selection solution elementary equations defined algebra functions solutions general formulas involving single parameter display entire freedom creating correct structured programs structured programming algebra functions stepwise refinement program correctness
2803 pseudoinverses conjugate gradients paper devoted study connections pseudoinverses matrices conjugate gradients conjugate direction routines pseudoinverse conjugate gradients hermitian matrix minimization
2804 elementary divisors tensor products elementary divisors tensor product linear transformations years paper short easily accessible proof results points interesting combinatorial consequence proof elementary divisors tensor products linear transformations
2805 perturbations eigenvalues normal matrices problem considered give bounds finite perturbations simple multiple eigenvalues nonnormal matrices bounds terms eigenvalues departure normality frobenius norm perturbation matrix terms eigen system bounds derived shown attainable set matrices perturbation eigenvalues normal matrices departure normality gershgorin circles
2806 hadamard numbers matrices discussion functions entries square matrix related hadamard determinant theorem merits alternatives norm bound condition numbers linear systems eigen systems matrices eigenvalues norms condition numbers error analysis gram schmidt orthogonalization
2807 stability gauss jordan elimination pivoting stability gauss jordan algorithm partial pivoting solution general systems linear equations commonly regarded suspect shown respects suspicions unfounded general absolute error solution strictly comparable gaussian elimination partial pivoting back substitution ill conditioned residual gauss jordan solution greater gaussian elimination solution gauss jordan algorithm gaussian elimination back substitution backward error analysis bounds error solution bound residual
2808 lemniscate constants lemniscate constants methods computing played enormous part development mathematics account methods derivations made elementary methods material teaching purposes relevant interesting historical material acceleration methods developed purpose evaluating constants problems lemniscate acceleration elliptic functions euler transformation
2809 positivity norms lines joint work householder character algebraic methods theory norms demonstrated results norms values archimedian vector lattice necessarily totally ordered generalization order unit norms norms norms application operator norms contraction properties positive operators matrices norms positivity numerical range positivity cones vector lattice absolute monotonic
2810 professionalism computing field term professional means things people general technical social standards professional term generally applied practitioner researcher broad definition computing practitioner regarded professional types institutions academic industry government professional society educate employ regulate mold practitioner contributes nonprofessional status computing practitioner roles institutions examined shortcomings noted recommended suggested analysis professional status bestowed earned universities industry specifically make improvements computing practitioner achieve professional status professional aspects educational programs industry attitudes professional societies licensing certification
2811 structural pattern recognition carotid pulse waves general waveform parsing system general waveform parsing system application structural pattern recognition carotid pulse waves carotid arterial pulse wave medical importance variation structure induced arterial aging cardiovascular disease syntax driven waveform analysis system applied good results pulse waves detect measure structural variations waveform parsing system modeled compiler compiler system user enter application specific information data general applicable waveforms structural pattern recognition parsing waveform analysis pulse waves
2812 computer aided analysis design information systems paper describes computer aided analysis design development integrated financial management system navy material command support activity nmcsa computer aided analysis consists set procedures computer programs specifically designed aid process applications software design computer selection performance evaluation major components problem statement language problem statement analyzer generator alternative designs performance evaluator statement requirements written ads accurately defined systems analyzed problem statement analyzer ads ads problem definition supplemented additional information order create complete problem definition analyzed problem statement translated form soda systems optimization design algorithm program generation alternative specifications program modules logical database structures computer aided analysis information systems logical system design problem statement language problem statement analyzer physical system design accurately defined systems systems optimization design algorithm
2813 computer science engineering research study cosers computer science engineering research study cosers briefly motivation organization schedule nsf supported study reference subject area panel chairmen members steering committee identified computer science research computer engineering research national research study
2814 roster programming languages
2815 high level binding low level linkers easy implement scheme compiler enforce agreement complex data types separately compiled modules scheme designed work existing link editor linking loader matter deficient obscure run time errors caused inconsistent usages forestalled static errors detected linking time separate compilation binding linking strong typing
2816 optimal reorganization distributed space disk files database organizations cost accessing database increase due structural caused updates insertions reorganizing database access costs reduced basic problem establish proper tradeoff performance storage costs reorganization costs paper considers optimum points reorganize database disk file organization distributed free space cost function describing excess costs due physical disorganization defined function minimized obtain optimum reorganization points numerical examples based characteristics existing disk storage devices disk file free space retrieval insertion deterioration reorganization
2817 notions consistency predicate locks database system database systems users access shared data assumption data satisfies consistency constraints paper defines concepts transaction consistency schedule shows consistency requires transaction request locks releasing lock argued transaction lock logical physical subset database subsets predicates implementation predicate locks satisfies consistency condition suggested consistency lock database concurrency transaction
2818 interference multiprocessor computer systems interleaved memory corrigendum
2819 experiments text file compression system compression data files viewed strings characters presented method general applies equally english pl digital data system consists encoder analysis program decoder algorithms encoding string differ slightly earlier proposals analysis program attempts find optimal set codes representing substrings file algorithms operation compared parameters algorithms optimized obtain high degree compression sample texts text compression data file compaction huffman codes gram encoding comparison algorithms
2820 design implementation table driven interactive diagnostic programming system caps highly interactive diagnostic compiler interpreter beginning programmers prepare debug execute fairly simple programs graphics display terminal complete syntax checking semantic analysis performed program entered subsequently edited analysis performed character character remarkable feature caps ability automatically diagnose errors compile time run time errors automatically corrected caps interacts student find error components caps table driven reduce space needed implementation increase flexibility multilingual system students caps learn fortran pl cobolin conjunction computer assisted introductory computer science interactive programming table driven compilers error correction interpreters debugging computer assisted instruction computer science education
2821 cobol control sample set cobol programming standards offered standards constrain code developed structured form data control structures require syntax existing cobol language fact utilize typical limited subset ans cobol standard standards proved extremely valuable practice reduced cost time produce maintain large software systems deployed live multiple customer environments cobol structured programming software development program standards
2822 homilies humble standards copyright association computing machinery general permission republish profit part material granted provided acm copyright notice reference made publication data issue fact reprinting privileges granted permission association computing machinery standards case standards criteria standards standardization
2823 status women minorities academic computer science results survey women minority students faculty computer science years presented analysis data effective affirmative action programs recruitment graduate degree programs needed enlarge number women minorities qualified employment computer science discrimination employment women minority graduate students revealed discrimination women discrimination minorities graduate students undergraduate students academic employment faculty computer science degree programs affirmative action title vii title ix
2824 improvement martin algorithm computation linear precedence functions syntax analysis precedence functions boolean matrices
2825 bmd bmdp series statistical computer programs analysis variance cluster analysis contingency tables data analysis discriminant analysis factor analysis graphics outliers regression time series transformations
2826 interactive skeleton techniques enhancing motion dynamics key frame animation significant increase capability controlling motion dynamics key frame animation achieved skeleton control technique animator develop complex motion sequence animating stick figure representation image control sequence drive image sequence movement simplicity stick figure image encourages high level interaction design stage compatibility basic key frame animation technique permits skeleton control applied selectively components composite image sequence require enhancement interactive graphics computer generated animation key frame animation interactive skeleton control stick figure animation
2827 parametric algorithm drawing pictures solid objects composed quadric surfaces algorithm drawing pictures dimensional objects surfaces made patches quadric surfaces emphasis algorithm calculating intersections quadric surfaces parameterization scheme quadric surface intersection curve qsic represented set coefficients parameter limits parameter represents points easily distinguished scheme find coordinates points quartic fourth order intersection curves equations order methods parameterization type osic discussed surface bounding hidden surface removal computer graphics hidden surface removal quadric surface intersection curves
2828 hierarchical geometric models visible surface algorithms geometric structure inherent definition shapes dimensional objects environments define relative motion placement assist solving problems systems producing pictures computer extension traditional structure information geometric hierarchy significant improvements current techniques range complexity environment greatly increased visible complexity scene fixed upper limit meaningful provided vary amount detail presented scene clipping fast logarithmic search resolvable parts environment field view fourth frame frame coherence clipping define graphical working set fraction total structure present primary store access visible surface algorithm finally geometric structure suggests recursive descent visible surface algorithm computation time potentially grows linearly visible complexity scene visible surface algorithms hidden surface algorithms hierarchical data structures geometric models
2829 texture reflection computer generated images catmull developed algorithm rendering images bivariate surface patches paper describes extensions algorithm areas texture simulation lighting models parameterization patch defines coordinate system key mapping patterns surface intensity pattern picture element computed weighted average regions pattern definition function shape size weighting function chosen digital signal processing theory patch rendering algorithm accurate computation surface normal patch picture element permitting simulation mirror reflections amount light coming direction modeled similar manner texture mapping added intensity obtained texture mapping examples images synthesized techniques included computer graphics graphic display shading hidden surface removal
2830 practitioner guide addressing algorithms corrigendum
2831 analysis pff replacement algorithm semi markov model corrigendum
2832 faster retrieval context trees corrigendum context trees provide convenient storing data viewed hierarchy contexts note presents algorithm improves previous context tree retrieval algorithms based observation typical context infrequent relative retrievals data cached speed retrieval retrieval started position previous retrieval auxiliary structures built make search rapid algorithms addition deletion data garbage collection outlined context trees frame problem variable bindings data structures
2833 efficient incremental automatic garbage collector paper describes solving storage reclamation problem system lisp allocates storage automatically heap require programmer give indication items longer accessible reference count scheme reclaiming referential structures linearizing compacting copying scheme reorganize storage users discretion proposed algorithms designed work systems multiple levels storage large virtual address space depend fact cells referenced reference counts accurate storage reclaimed transaction file stores reference counts multiple reference table stores count items referenced storage management garbage collection lisp
2834 efficient generation binary reflected gray code applications algorithms presented generate bit binary reflected gray code codewords fixed weight code algorithms efficient time required generate element current constant applications generation combinations things time compositions integers permutations multiset discussed gray code combinations subsets compositions combinatorial computing
2835 recursion analysis compiler optimization simple method detection recursive procedures presented compiler optimization implementation considerations discussed modification algorithm improve optimization analysis determine subset values assumed variables small discrete set values common parameters variables assuming values label procedure pascal enumerated type recursion compiler optimization
2836 weighted derivation trees nodes weighted derivation tree weighting functions vocabulary context free grammar algorithm presented constructing optimal derivation tree structure weighted derivation tree addition correctness algorithm established method applied problems involving probabilistic parsing combinatorial optimization derivation tree parse tree probabilistic grammar structural ambiguity combinatorial optimization
2837 upper bounds selection worst case minimum number comparisons complexity vi selection problem considered upper bound vi improves bound standard hadian sobel algorithm generalization kirkpatrick hadian sobel algorithm extends kirkpatrick method wider range application generalization compares favorably recent algorithm hyafil selection problem algorithms comparison problems concrete computational complexity upper bounds worst case analysis
2838 analysis algorithm real time garbage collection real time garbage collection system avoids suspending operations list processor long times garbage collection requires performing garbage collection processor parallel list processing operations single processor time shared algorithms recovering discarded list structures manner presented analyzed determine sufficient conditions list processor wait collector techniques shown require processing power regular garbage collectors efficiently average behavior program shown equal worst case performance sufficient conditions suitable measuring typical behavior algorithm garbage collection storage reclamation list processing lisp time sharing multiprocessing parallel processing real time data structures analysis algorithms
2839 insertion technique sided height balanced trees restriction height balanced binary trees presented restriction reduces extra memory requirements half extra bits node maintains fast search capabilities cost increased time requirements inserting nodes balanced binary search trees
2840 protection operating systems model protection mechanisms computing systems presented appropriateness argued safety problem protection systems model determine situation subject acquire object restricted cases shown problem decidable algorithm determine system configuration safe general surprisingly weak assumptions decided situation safe implications fact discussed protection protection system operating system decidability turing machine
2841 designing surfaces experimental system computer aided design free form surfaces dimensions surfaces represented system parametric basis splines principal features system surfaces rendered isoparametric line drawings head mounted display designed aid dimensional wand movements points controlling shapes surfaces interactions surfaces real time mathematical formulations assume knowledge user system examined features part practical system designing space forms real time graphics computer aided design picture processing splines displays
2842 denotational semantics programming languages paper tutorial introduction theory programming language semantics developed scott strachey application theory formal language specification demonstrated applications surveyed language considered loop elementary definition introduces notation methodology approach semantic concepts environments stores continuations introduced model classes programming language features underlying mathematical theory computation due scott motivated outlined finally paper presents formal definition language gedanken semantics programming language applicative imperative environment store continuation theory computation higher order function recursive definition loop gedanken
2843 tools philosophy software education paper describes set tools philosophy teaching software found mit past years tools include programs simulators graders compilers monitor instructor augment basic concepts relevant exciting economical student project activities software education simulators grading programs student assignments
2844 heaps applied event driven mechanisms discrete event simulation event scanning mechanisms priority queues heaps
2845 buddy system variation disk storage allocation generalization buddy system storage allocation set permitted block sizes size satisfy condition size size size meaningful integral valued function makes force logical storage blocks coincide physical storage blocks tracks cylinders buddy system dynamic storage allocation
2846 compressed paper presents data structure called compressed trie trie information retrieval systems underlying ary tree structure trie parameter trie fields nodes trie large hold key pointer fields trie bit long analysis part paper shown collection keys retrieval time measured terms bit inspections key order logm storage requirement order log bits improvement storage requirements retrieval time achieved cost decreasing flexibility structure updating costs increased trie analyzed data structure methods static databases discussed data structure database ary tree trie retrieval time storage requirement keys
2847 sampling gamma distribution computer paper describes method generating gamma variates appears costly wallace recently suggested method large shape parameter cost computation proportional wallace method proportional experimentation robinson lewis small method suggested dominates methods recently suggested dieter ahrens albeit methods dominate large method suggested rejection technique gamma variates reflection method sampling
2848 synthesis decision rules decision tables effective tool interview record logic processes automated result interview structure complete decision tables sets decision rules purpose paper provide procedure synthesizing decision rules provide aid developing structure complete decision tables decision rules decision tables logical tables logical design system design specification language
2849 ethernet distributed packet switching local computer networks ethernet branching broadcast communication system carrying digital data packets locally distributed computing stations packet transport mechanism provided ethernet build systems viewed local computer networks loosely coupled multiprocessors ethernet shared communication facility ether passive broadcast medium central control coordination access ether packet broadcasts distributed contending transmitting stations controlled statistical arbitration switching packets destinations ether distributed receiving stations packet address recognition design principles implementation based experience operating ethernet nodes kilometer coaxial cable model estimating performance heavy loads packet protocol error controlled communication included completeness computer networks packet switching multiprocessing distributed control distributed computing broadcast communication statistical arbitration
2850 symbolic execution program testing paper describes symbolic execution programs supplying normal inputs program numbers supplies symbols representing arbitrary values execution proceeds normal execution values symbolic formulas input symbols difficult interesting issues arise symbolic execution conditional branch type statements system called effigy symbolic execution program testing debugging interpretively executes programs written simple pl style programming language includes standard debugging features ability manage prove things symbolic expressions simple program testing manager program verifier discussion relationship symbolic execution program proving included symbolic execution program testing program debugging program proving program verification symbolic interpretation
2851 formal verification parallel programs formal models parallel computation presented abstract conceptual model parallel program model model distinguish control data states model includes capability representation infinite set control states allowing arbitrarily instruction pointers processes executing program induction principle presented treats control data state sets ground place variables observed correctness conditions expressed enumeration set control states examples presented induction principle demonstrate proofs mutual exclusion shown assertions oriented proof methods special cases induction principle special case assertions method called parallel place assertions shown incomplete formalization deadlock presented concept norm introduced yields extension deadlock problem floyd technique proving termination discussed extension program model process local variables permits shared global variables correctness forms implementation discussed appendix included relates work previous work satisfiability logical formulas parallel program correctness verification assertions deadlock mutual exclusion petrinet
2852 technology computer center management proposed graduate professional programs computer science information systems mcfarlan nolan made strong case adding information systems administration courses proposed acm curriculum committee computer education management graduate professional programs information systems paper report entitled technology computer center management offered purdue past years suitable graduate professional programs information systems graduate professional programs computer science education information systems administration computer center management computer system performance
2853 numbering system permutations combinations combinatorics coding systems storage mapping functions
2854 multiprocessing compactifying garbage collection corrigendum
2855 efficient list moving algorithm constant workspace efficient algorithm presented moving arbitrary list structures storage program variables required hold original list copy original list destroyed moved mark bits pointers copy distinguishable pointers original algorithm superior execution speed previous algorithms problem variations extensions algorithm discussed list moving list copying lisp space complexity constant workspace
2856 synthetic approach decision table conversion previous approaches problem automatically converting decision tables computer programs based decomposition stage condition selected testing smaller problems decision tables condition created optimal program respect average execution time storage space located implicit enumeration decision trees technique branch bound approach paper dynamic programming synthesize optimal decision tree program created approach efficiency creating optimal program increased substantially permitting generation optimal programs decision tables ten twelve conditions decision tables decision trees dynamic programming optimal programs
2857 referencing lists edge edge reference list structure pair pointers adjacent nodes reference requires additional space yield efficient algorithms instance circular link ends list redundant list referenced edge list traversal easier link null edge references threading nonrecursive lists replace header cells enhance famous exclusive trick double link lists list processing circular doubly linked overlapping sublist header cell pointer cursor
2858 process determination addresses variable length addressing algorithm presented assignment instruction addresses formats conditions length instruction varies function distance instruction target exists optimality criterion implies preferential choices subject addressing constraints achieving smallest number long instructions case total code length minimized minimizing assigned address point program algorithm suitable arbitrary program structure choice optimization criteria variable length addressing assembler paging
2859 interference multiprocessor computer systems interleaved memory paper analyzes memory interference caused processors simultaneously memory modules exect results computed simple model system limiting derived relative degree memory interference system size increases model limiting behavior system yields approximate results simple model suggests results valid larger class models including real systems simple model tested measurements program behavior simulations systems memory references real programs model results provide good indication performance expected real system type memory memory interference multiprocessing interleaved memory trace driven simulation
2860 practitioner guide addressing algorithms paper consolidates number popular rules thumb suggested design record addressing algorithms discusses applicability rules large commercial databases guidelines selecting identifier transformations overflow techniques loading factors bucket sizes loading order considered attention focused reasonableness common heuristics determining primary secondary bucket sizes mathematical model explicitly considers storage device characteristics time space cost tradeoffs analyze effect design parameters system costs specific design presented solved data management file retrieval searching addressing techniques hashing functions synonym resolution loading factor bucket size heuristic design rules thumb
2861 production employment ph computer science
2862 analysis pff replacement algorithm semi markov model analytical model presented estimate performance page fault frequency pff replacement algorithm model program behavior represented lru stack distance model pff replacement algorithm represented semi markov model models parameters inter page fault interval distribution probability number distinct pages referenced inter page fault interval analytically determined models evaluate parameter values permits study performance replacement algorithm simulating page fault events page reference event significantly reduces required computation time estimating performance pff algorithm pff replacement algorithm semi markov model simulation replacement algorithm
2863 vmin optimal variable space page replacement algorithm criterion comparing variable space page replacement algorithms presented optimum page replacement algorithm called vmin shown optimum respect criterion results simulating vmin denning working set page partitioning replacement algorithms virtual memory programs presented demonstrate improvement realizable variable space algorithms demand paging performance measurement multilevel memory systems virtual memory working set page replacement algorithms optimal page replacement
2864 characteristics program localities term locality denote subset program segments referenced phase execution program behavior characterized terms residence localities sizes lifetimes transitions localities paper concept locality made explicit formal definition constitutes phase localized reference behavior mechanism detection localities actual reference strings definition existence hierarchy localities time reasonableness definition supported examples actual programs empirical data sample production algol programs display distributions locality sizes lifetimes results discussed terms implications modeling program behavior memory management virtual memory systems program behavior memory management locality
2865 verifying properties parallel programs axiomatic approach axiomatic method proving number properties parallel programs presented hoare set axioms partial correctness strong cases paper defines powerful deductive system sense complete partial correctness crucial axiom auxiliary variables added parallel program aid proving correct information partial correctness proof prove properties mutual exclusion freedom deadlock program termination techniques verifying properties presented illustrated application dining philosophers problem structured multiprogramming correctness proofs program verification concurrent processes synchronization mutual exclusion deadlock
2866 proving monitors interesting scheduling sequential properties monitors proved state variables record monitor history defining extended proof rules wait signal operations techniques defined discussed applied examples prove properties freedom indefinitely repeated overtaking unnecessary waiting upper bounds queue lengths historical behavior monitors correctness proof rules historical variables concurrency scheduling bounded buffer semaphores alarm clock disk head
2867 modularization hierarchy family operating systems paper describes design philosophy construction family operating systems shown concepts module level coincide hierarchy functions family members share software result implementation run time modules lowest system level incremental machine design module data type address space virtual memory
2868 reflections operating system design main features general purpose multiaccess operating system developed cdc berkeley presented good bad points discussed retrospect distinctive features design capabilities protection organization system sequence layers building facilities provided earlier protecting malfunctions problems maintaining protection layers levels added memory hierarchy problems discussed solution operating system protection capabilities layering domains memory hierarchy faults
2869 security kernel validation practice security kernel software hardware mechanism enforces access controls computer system correctness security kernel pdp proved paper describes technique carry step proof validating formal specification program respect axioms secure system validation verification correctness security kernel formal specification protection
2870 lattice model secure information flow paper investigates mechanisms guarantee secure information flow computer system mechanisms examined mathematical framework suitable formulating requirements secure information flow security classes central component model lattice structure derived security classes justified semantics information flow lattice properties permit concise formulations security requirements existing systems facilitate construction mechanisms enforce security model unifying view systems restrict information flow enables classification security objectives suggests approaches leads construction automatic program certification mechanisms verifying secure flow information program protection security information flow security class lattice program certification
2871 logical analysis programs present systems verification computer programs incomplete intermediate inductive assertions provided manually user termination proven incorrect programs treated unified solution problems paper suggests conducting logical analysis programs invariants express occurring program part paper devoted techniques automatic generation invariants part criteria invariants check simultaneously correctness including termination incorrectness part examines implications approach automatic diagnosis correction logical errors logical analysis invariants program verification correctness incorrectness termination automatic debugging
2872 counterintuitive computer paging corrigendum
2873 lg language analytic geometry conversational programming language analytic geometry aspects implementation language flexible definition geometric objects elements computes parameters displays results capability geometric figure collection parameters displaying loci parameters characteristic consists possibility language design user oriented languages lg specifically designed nonprogrammers easy learn close natural language geometry interactive programming problem oriented languages computer graphics interpreters analytic geometry
2874 comparative evaluation versions basic inception basic language grown terms usage scope usage features article compares ten current versions basic earlier versions proposed standard minimal basic comparison arranged features versions computational comparison computation times processing costs basic interpretive language summary
2875 development international system legal protection computer programs copyright software patenting software legal protection software
2876 intentional resolution privacy protection database systems traditionally privacy protection database systems understood control information user database paper concerned independent dimension privacy protection control user allowed piece information supplied database ability condition supply information intended called intentional resolution privacy protection practical importance intentional resolution demonstrated examples realization discussed shown intentional resolution achieved involves radical change traditional approach process user database interaction appears database impose amount control internal behavior users programs interact model user database interaction admits control developed protection database protection programming languages privacy security intentional resolution privacy interaction databases
2877 program data flow analysis procedure global data relationships program exposed codified static analysis methods paper procedure determines definitions possibly reach node control flow graph program definitions live edge graph procedure interval ordered edge listing data structure handles reducible irreducible graphs indistinguishably program optimization data flow analysis flow graphs algorithms compilers
2878 joining policies multipriority multiclass batch computer system multipriority batch computer system users classes join toll service waiting charges system formulated semi markov decision process aim arriving users minimize expected loss optimal joining policy arriving users join system queues control limit policy single control number queue user class newly arriving user join queue filled control number queue user class paper control numbers lower upper bounds control numbers capacities system queues derived priority queues semi markov process price scheduling operating system
2879 computer science empirical inquiry symbols search symbols search science computer science empirical turing artificial intelligence intelligence list processing cognition heuristics problem solving
2880 fast division technique constant divisors fast algorithm division constant divisors presented method proved implemented microcode ona binary machine adapted directly hardware mathematical foundations algorithm presented performance measures constant divisors division algorithms bit addressable memory microprogram
2881 counterintuitive computer paging counterexample exhibited natural conjecture optimal group records pages independent reference model computer paging organization optimal recently miss ratio minimized recently independent reference model storage organization record allocation
2882 stochastic evaluation model database organization data retrieval systems experimental work valuation large scale data retrieval systems scarce due difficulty prohibitive cost paper discusses simulation model data retrieval system effect significantly reducing cost experimentation enabling research attempted model designed estimate retrieval workload alternative data retrieval systems data retrieval systems organized database organizations including inverted list threaded list cellular list organizations hybrid combinations systems effectiveness methodology demonstrated model study effect database organizations data retrieval systems impact query complexity analyzed database architecture database performance evaluation invented list threaded list cellular list information retrieval database organizations query complexity stochastic model monte carlo simulation
2883 application heuristic search methods edge contour detection paper presents method detecting edges contours noisy pictures properties edge embedded figure merit edge detection problem problem minimizing figure merit problem represented shortest path problem graph solved graph search algorithms relations representation minimization problem dynamic programming approach discussed showing graph search method lead substantial improvements computing time heuristic search methods computing time depend amount noise picture experimental results show information shape contour object embedded figure merit allowing extraction contours noisy picture separation touching objects picture processing pattern recognition edge detection contour detection contour optimization problems dynamic programming shortest path heuristic search methods problem solving methods
2884 permutation enumeration permutation algorithms classical permutation enumeration algorithms encounter special cases requiring additional computation nth permutation generating permutations marks algorithms attribute special cases occur permutations algorithms produce permutation single exchange marks algorithms infrequently exchange marks rules generating permutation simple performance tests counted execution assignment statements comparisons arithmetic operations subscripted array references shown superiority algorithms compared boothroyd implementation algorithm ehrlich implementation johnson trotter algorithm permutations loop free algorithms
2885 organizing sequential search heuristics paper examines class heuristics maintaining sequential list approximately optimal order respect average time required search element assuming element searched fixed probability independent previous searches performed move front transposition heuristics shown optimal constant factor transposition rule shown efficient empirical evidence suggests transposition fact optimal distribution search probabilities searching organizing list processing heuristics
2886 semantic evaluation left paper describes attribute grammars definition programming languages compilers formal definition attribute grammars discussion important aspects included paper concentrates evaluation semantic attributes passes left derivation tree program condition attribute grammar assures semantics program evaluated single pass derivation tree algorithm discussed decides passes left general attribute grammar notions explained terms grammar describes scope rules algol practical questions relative efficiency evaluation schemes ease adapting attribute grammar programming language left evaluation scheme discussed attribute grammars semantics programming languages semantic attributes left parsing multipass compilers semantic evaluation semantic conditions
2887 study errors error proneness error diagnosis cobol paper data cobol error frequency correction errors student oriented compilers improvement teaching programming language cobol studied economic importance widespread usage error including design lack research types errors identified pilot study error types found errors classified runs cobol students error density high percent types contained percent total frequency implies high potential effectiveness software based correction cobol surprisingly high frequency errors error prone implies minimal error inducing design percent cobol misspellings classifiable error categories previous researchers implies cobol misspellings correctable existent algorithms reserved word usage error prone implies minimal interference usage reserved words percent error diagnosis found inaccurate feedback optimal users learning user cobol errors programming error correction cobol programming language errors error analysis diagnostics error proneness error frequency spelling errors syntactic errors learning programming teaching programming
2888 information reference coding items business systems identified reference codes data codes file keys data processing system business systems large collections integrated files database vital assign codes methodical control future extension maintaining correct program action principles methodical coding discussed logical connections data items reflected reference code framework shown set theoretic information model data file reference code systems analysis information modeling database
2889 performance height balanced trees paper presents results simulations investigate performance height balanced hb trees shown statistic hb trees avl trees function size tree time search item tree sufficiently large trees execution times procedures maintaining hb trees independent size tree average restructures required insertion average nodes revisited restore hb property average restructures required deletion average nodes revisited restore hb property execution times procedures maintaining hb trees independent size tree average number nodes revisited delete operation order restore hb property trace back cost maintaining hb trees drops sharply allowable imbalance increases analytical experimental results show cost maintaining hb trees function discussed hb trees balanced trees avl trees information storage retrieval searching
2890 quadratic adaptive routing algorithms analytic models store forward communications network constructed find optimal message routing illustrate equilibrium stationary state maintained adaptive routing algorithm models show adaptive routing satisfy conditions optimal routing adaptive routing overuse direct path underuse alternate routes impact current routing decision future state network form optimality conditions suggests modification adaptive algorithm result optimality modification requires substitution quadratic bias term linear routing table maintained network node simulation results presented confirm theoretical analysis simple network routing algorithms adaptive routing quadratic routing alternate routing store forward network distributed network computer network message switching
2891 anomaly disk scheduling comparison fcfs sstf seek scheduling empirical model disk accesses model disk accesses based published measurements developed model show highly probable conditions fcfs seek scheduling superior sstf scheduling sense lower queue length simple arrival sequence illustration anomaly presented disks disk scheduling seek scheduling
2892 study line overhead arpanet form extent effect communication line overhead arpanet considered source head separated levels protocol hierarchy characteristics level summarized line efficiency models system studied measurements line efficiency arpanet presented extrapolation measurements anticipate overhead heavily loaded network similar results derived recently proposed network protocol compared current system arpanet computer communication networks interprocess communication measurement packet switching performance evaluation efficiency resource sharing
2893 computers innovation american local governments computers electronic data processing major technological innovation operations american local government paper establishes substantial variation larger local governments rate adopt computer technology level financial support provide edp extensiveness sophistication automated applications central question addressed explain differences governments extent adopt computers hypotheses tested streams explanatory factors data city county governments findings identify local government milieus conducive higher levels computer innovation unexpected findings reveal significant impact distribution control edp decisions dominant political values government important factors include measured computer applications presence external funding support computing finally paper suggests framework identifying key determinants technological innovations innovation technological innovation computer utilization computer adoption american local government city government computers county government computers
2894 methodology interactive computer service measurement measurement methodology applicable teractive computer service primary purpose enable external user oriented assessment computer performance frequently ternal system measurement techniques nbs network measurement system employed external measurement tool data collected analyzed demonstration methodology leading pragmatic figure merit evaluation results included teractive system computer service measurement performance external measurement methodology measurement model network measurement system measures figure merit
2895 language formal problem specification language tended behavior communicating parallel processes specifications constrain ts order events computation occur language write specifications readers writers problem writer priority readers writers problem formal specifications program correctness parallel processing synchronization readers writers problem
2896 exercise proving parallel programs correct parallel program dijkstra fly garbage collector proved correct proof method developed owicki fine degree terleaving program makes difficult understand complicates proof greatly difficulties proving parallel programs correct discussed garbage collection multiprocessing program correctness multiprocessing tasks
2897 case study code generation technique compilers recent developments optimizing techniques allowed design compilers emerge compiler translates parsed source code lower level code sequence steps step expands higher level statements blocks lower level code performs optimizations result statement expansion task tailoring code advantage special cases optimizations paper evidence strategy result good object code traditionally difficult pl concatenate statement investigated detailed set fairly simple optimizations identified compiler produce good code elaborate optimizations improve object code contexts concatenate statement code produced compiler expansion optimization strategy compares favorably code produced conventional pl optimizing compiler compiler structure optimizing compiler code generation pl compiler concatenation program optimization optimization techniques data flow analysis
2898 conceptual framework nonprocedural programming language sequential programming language forces programmer prescribe explicitly order operations program executed order relevant solution problem requirement irrelevant sequencing removed language facilities task nonprocedural manner general program concurrent evaluation paper describes conceptual framework high level programming language providing nonprocedural sequential facilities program nonprocedural sequential program modules nested freely parallel programming descriptive programming nonprocedural programming definitional language data flow programming applicative programming
2899 survey computer science offerings small liberal arts colleges recent curricular development computer science student terest pursuing topics computer science usual programming courses encouraged small liberal arts colleges expand offerings paper summarizes results survey determine type computer science programs offered colleges results half colleges computer science program offer programming courses computer science education curricula small colleges
2900 theorems aid solving file allocation problem file allocation problem problem finding optimal set network sites locate copies file general polynomial complete heuristics aids finding optimal optimal solutions needed paper present theorems applied priori sites included optimal allocation file allocation computer networks distributed data management
2901 encoding method multifield sorting indexing sequences character strings order relation imposed sequences considered encoding scheme produces single order preserving string sequence strings original sequence recovered encoded string sequence strings precedes encoding precedes encoding strings variable length maximum length restriction symbols reserved control purposes symbol occur string scheme multifield sorting multifield indexing applications ordering field important sorting multifield indexes lexicographic order searching encoding
2902 dynamic memory allocation computer simulation paper investigates performance dynamic memory allocation algorithms service simulation programs represented test cases algorithm performance measured terms processing time memory usage external memory fragmentation algorithms main taining separate free space lists size memory block tended perform compared algorithms simple algorithms operating memory ordered lists free list performed surprisingly algorithms employing power block sizes favorable processing requirements generally unfavorable memory usage algorithms employing lifo fifo memory ordered free lists generally performed poorly compared algorithm performance dynamic memory allocation dynamic memory management dynamic storage allocation garbage collection list processing memory allocation memory management programming techniques simulation simulation memory management simulation techniques space allocation storage allocation
2903 improving programs introduction recursion technique program transformation called recursion troduction applied algorithms solve pattern matching problems recursion troduction algorithms manipulate stack translated recursive algorithms stack operations occur algorithms subjected transformation method recursion elimination called tabulation produce programs efficient running time shown fast linear pattern matching algorithm knuth morris pratt derived steps simple nonlinear stack algorithm program transformation optimization programs recursion elimination pattern matching algorithms stacks computational induction
2904 algorithm reduction operator strength simple algorithm indexed temporary table perform reduction operator strength strongly connected regions presented extensions including linear function test replacement discussed algorithms fit integrated package local optimization algorithms compilers optimization compiled code program analysis operator strength reduction test replacement strongly connected region
2905 perfect hashing functions single probe retrieving method static sets refinement hashing retrieval item static table single probe considered set identifiers methods presented building mechanical perfect hashing functions functions transforming elements unique addresses method quotient reduction method shown complete sense set smallest table elements stored retrieved perfect hashing function constructed method found nonuniformly distributed sets method give sparse tables method remainder reduction method complete sense give minimal minimal tables kind set techniques applicable directly small sets methods extend results larger sets presented rough comparison ordinary hashing shows method conveniently practical applications hashing hashing methods hash coding direct addressing identifier address transformations perfect hashing functions perfect hash coding reduction scatter storage
2906 high level programming language data processing applications application development today labor tensive recent years high level languages increasingly explored solution problem business definition language bdl language aimed business data processing problems concepts bdl mimic evolved years businesses manual methods results sublanguages components defining business forms describing business organization writing calculations high level language nonprocedural language data flow language business application business data processing structured programming modular programming format specification design methodology
2907 optimal approach recursive programs classical fixed poin approach recursive programs suggests choosing defined fixed poin solution recursive program approach troduction optimal fixed point contrast defined fixed poin embodies maximal amount valuable information embedded program practical implications approach discussed techniques proving properties optimal fixed poin presentation informal emphasis examples recursive programs fixed poin ts fixedpoints optimal fixed poin ts proof techniques
2908 note reflection free permutation enumeration permutations reflection free generation
2909 unnecessary diversity notation syntactic definitions syntactic description language extended bnf
2910 equivalence hough curve detection template matching picture processing pattern recognition curve detection hough transformation template matching
2911 anomalous behavior fifty percent rule dynamic memory allocation paper reports simulation data showing dynamic memory allocation average free allocated block ratio differ considerably directions predictions percent rule derivation shown previous derivations make assumption violated frequently basis simulation data derivation hypothesized anomalous behavior results combined effects systematic placement statistics release process additional simulations support hypothesis systematic placement refers natural convention allocating storage requests end free block selected allocation strategy order blocks contiguous groups allocation time degree anomalous behavior depends extent allocated blocks released order allocation markovian release processes extent correlation allocation order release order varies approximately inversely coefficient variation memory residence time distribution simulations show allocation efficiency depends strongly residence time distribution efficiency decreases distribution coefficient variation increases practical implications briefly discussed dynamic memory allocation storage fragmentation fifty percent rule fit simulation
2912 concurrent reading writing problem sharing data asynchronous process considered assumed process time modify data concurrent reading writing permitted general theorems proved algorithms presented illustrate include solution general problem read repeated obtained incorrect result techniques transmitting messages processes solutions assume synchronizing mechanism data written process read processes asynchronous multiprocessing multiprocess synchronization readers writers problem shared data
2913 aliasing problem computer generated shaded images defects jagged edges disappearing detail long annoyance digitally generated shaded images increasing resolution defocusing display attenuate understanding defects leads effective methods paper explains observed defects terms aliasing phenomenon inherent sampled signals discusses prefiltering recognized cure method evaluating filters presented application prefiltering hidden surface algorithms discussed implementation filtering tiler shown accompanied examples effectiveness aliasing computer graphics convolutional filtering hidden surface removal sampling
2914 lru stack depth distribution simulation paging behavior families probability distributions needed virtual memory simulation model headway page fault distributions working set size distributions members families derived lru stack depth distribution simple expressions computation kinds distributions finally examples families distributions computed published stack depth distribution virtual memory paging lru stack working set headway page faults computer system simulation
2915 considerations future programming language standards activities paper reviews current state programming language standards activities respect anomalies exist published proposed standards fortran cobol pl basic proposals made inclusion formalisms future standards extension standards include additional items error conditions documentation programming languages standards formalisms formal descriptions fortran cobol pl basic vienna definition language vdl
2916 fast string searching algorithm algorithm presented searches location occurrence character string pat string string search operation characters pat matched starting character pat information gained starting match end pattern algorithm proceed large jumps text searched algorithm unusual property cases characters string inspected number characters inspected average decreases function length pat random english pattern length algorithm typically inspect characters string finding match algorithm implemented average fewer patlen machine instructions executed conclusions supported empirical evidence theoretical analysis average behavior algorithm worst case behavior algorithm linear patlen assuming availability array space tables linear patlen size alphabet bibliographic search computational complexity information retrieval linear time bound pattern matching text editing
2917 sitar interactive text processing system small computers corrigendum
2918 multiprocessor memory organization memory interference structure shared memory multiprocessor computer system examined attention nonin terleaved memory alternative memory organizations compared shown home memory organization processor memories address space concentrated effective reducing memory terference home memory organization shown suited specialized computation problems possess advantages terms terference reliability general purpose computation results terleaved memory drawn previous work comparison trace driven simulations verify conclusions analysis memory terference interleaving multiprocessing trace driven simulation queueing theory shared memory
2919 programmer workbench machine software development software development projects assumption made program development function machine eventual system run production machine unavailable programming environment totally inadequate alternatives considered paper suggested situations advantageous separate program development main tenance function specialized computer dedicated purpose computer called programmer workbench basic sections paper troduce subject outline general concept discuss areas approach prove beneficial describe operational system utilizing concept computer configurations computer networks software development software engineering software main tenance unix
2920 game interpretation deadlock avoidance problem deadlock avoidance problem defined informally determination priori information processes resources operating system safe situations realized endangering smooth running system process specifies future flowchart defined steps global approach phenomenon terpretation game operating system processes formalization risk safety concepts bipartite graph representation game construct explicitly set safe states study properties operating system multiprogramming time sharing resource allocation deadlock terlock deadly embrace deadlock avoidance flowchart
2921 regular part grammars parsers paper troduces alternative context free grammars called regular part rrp grammars resemble pascal syntax diagrams formally rrp grammars production parts nondeterministic finite state machines fsms special case regular expressions converted fsms rrp grammars describe syntax programming languages concisely understandably cf grammars troduced class parsers rrp lr parsers includes cf lr parsers advantages informally rrp lr parser determine end handle symbols handle left end end found symbols left handle mechanism determining left end required bound length handle finite state machines automata regular expressions syntax diagrams lr grammars parser construction parsing programming languages language generation formal definition compilers translators scanners
2922 level control structure nondeterministic programming basic ideas nondeterministic programming critically reconsidered single proper attitude programming style language allowing direct control nondeterministic features proposed attitude aims retaining purity nondeterministic formulation search processes level attempt level deferring coordination problem solving efforts choice level feasibility recognizing levels discussed stressing structure managed choice level free contexts leaves computational environments holding alternative inspection nodes choice poin ts proposed programming style generative function choice poin expresses desired choice strategy main advantage approach localization search strategies nonterminal node tree track state computation choice poin interrogated holding time strategy coordinate alternatives examples term lisp extension lisp designed implemented guidelines nondeterministic programming artificial telligence control structures backtracking search strategy planning context tree
2923 high level data flow analysis contrast predominant low level termediate text high level data flow analysis deals programs essentially source level exploits control flow information implicit parse tree high level flow analysis arises aspects recent work advanced methods program certification optimization paper proposes simple general method high level data flow analysis free escape jump statements avoids large graphs compiling large programs facilitates updating data flow information reflect program derives global information helpful solving familiar global flow analysis problems illustrative application live variable analysis presented graphs involved constructed analyzed programs compiled avoiding costs low level methods incur repeatedly compile time data flow analysis high level language control flow graph structured programming escapes exits jumps goto statements
2924 interactive computer graphics approach surface representation teractive computer graphics method developed rapid generation arbitrary shaped dimensional surfaces method synthesis spline theory algorithms teractive means man machine communication software static dynamic graphics display basic technique employed modified lofting method sectional curves represented uniform splines surface terpolated sections cardinal splines features method algorithms enable teractive modification spline representation sectional curves stages process spatial information graphically displayed user complex surfaces created combination number shapes separately generated automatically joined system successfully terfaced variety analytical routines structural medical graphical applications computer graphics dimensional surface representation splines lofting finite element input methods
2925 optimal surface reconstruction planar contours scientific technical endeavors dimensional solid reconstructed serial sections aid comprehension object structure facilitate automatic manipulation analysis paper presents general solution problem constructing surface set cross sectional contours surface composed triangular tiles constructed separately determining optimal surface pair consecutive contours determining surface reduced problem finding minimum cost cycles directed toroidal graph fast algorithm finding cycles utilized developed closed form expression term number contour poin ts upper bound number operations required execute algorithm illustrated involves construction minimum area surface describing human head included surface reconstruction contour data serial sections dimensional computer graphics minimum cost paths continuous tone displays
2926 pagination trees variable length records strategy presented pagination trees variable length records records length uniformly distributed file wide distribution record lengths exists file strategy results shallow trees fast access times performance strategy application presented compared strategy analyzed tree index database tree storage structure searching
2927 upper bounds generation prime numbers integer computational complexity finding primes modified sieve eratosthenes doubly linked lists yields algorithm arithmetic complexity upper bound shown equivalent theoretical lower bound sieve methods preprocessing preprocessing techniques involving space time additive multiplicative tradeoffs reduces upper bound log logn bit complexity logn log log logn storage requirement logn log logn bits computational complexity sieve prime number generation number theory linked list preprocessing balancing
2928 hardware estimation process primary memory requirements minor hardware extension honeywell processor demonstrated primary memory requirements process multics approximated additional hardware required estimate computed consists program accessible register miss rate associative memory page table words primary memory requirement estimate employed experimental version multics control level multiprogramming system bill memory usage resulting system tuning parameters display configuration insensitivity conjectured system track shifts referencing characteristics workload system tune primary memory requirement virtual memory level multiprogramming associative memory working set resource allocation lru stack model referencing characteristics
2929 analysis inline substitution structured programming language optimization technique inline substitution analyzed optimization consists replacing procedure invocation modified copy procedure body general problem inline substitution minimize execution time subject size constrain ts formulated approximate algorithmic solution proposed algorithm depends run time statistics program optimized preliminary results clu structured programming language programs low degree recursion percent procedure calls eliminated increase size compiled code small savings execution time conclusions based results presented inline substitution open coding open compilation program optimization compilers structured programming languages run time statistics
2930 gre advanced test computer science report describes advanced test computer science recently troduced graduate record examination program gre program general events leading establishment advanced computer science test discussed content specifications rationale set sample questions included education computer science graduate school admissions test development examinations
2931 logic programming languages logic long terested answers questions computable principle outcome puts bounds possibilities formalization recently precise comparisons efficiency decision methods developments complexity theory applications logic big question methods logic significance direction applied parts computability theory programming languages offer obvious opportunity syntactic formalization advanced semantical theory complete examples give wide ranging mathematical answers queries machine computable process machine simulate process programs naturally enter giving descriptions processes definition precise meaning program requires explain objects computation statics problem transformed dynamics theories automata nets teresting dynamics formalized portion field concentration finite state algebraic aspects understanding higher level program features involves infinite objects forces pass levels explanation conceptual ideas final simulation real machine levels made mathematically exact find abstractions represent structures experience independent workers method data types lattices partial orderings information content ordering continuous mappings demonstrated flexibility approach providing definitions proofs clean undue dependence implementations remains showing abstract conceptualizations actualized unified theory logic programming languages automata denotational semantics calculus models computability partial functions approximation function spaces
2932 complexity computations framework research theory complexity computations emphasizing terrelation seemingly diverse problems methods illustrative examples practical theoretical significance directions research discussed complexity computations algebraic complexity tractable problems probabilistic algorithms
2933 advantage keyword notation parameter communication subprograms keyword notation positional notation parameters transmission subprograms readability call call reference call compile time errors
2934 comment computing shortest paths graph graph network shortest path algorithm ranking
2935 production employment ph computer science corrigendum
2936 efficient data structure simulation event set recently algorithms presented realization event scheduling routines suitable general purpose discrete event simulation systems exhibited performance superior commonly simple linked list algorithms paper event scheduling algorithm presented improves aspects previously published algorithms algorithm performance insensitive skewed distributions worst case complexity number events set tests conducted estimate average complexity showed independent simulation time flow mechanisms event scanning mechanisms multilinked lists
2937 experimental evaluation data type conventions language programs written substantial effect reliability resulting programs paper discusses experiment compares programming reliability subjects statically typed language typeless language analysis number errors number runs errors shows environment statically typed language increase programming reliability detailed analysis errors made subjects programming solutions small problems shows subjects difficulty manipulating representation data data types experimentation language design redundancy reliable software
2938 discipline real time programming programming divided major categories increasing complexity reasoning program validation sequential programming multiprogramming real time programming adhering strict programming discipline suitable high level language molded discipline complexity reasoning concurrency execution time constrain ts drastically reduced practical make real time systems analytically verifiable ultimately reliable discipline outlined expressed terms language modula multiprogramming real time programming process synchronization processor sharing program validation modula
2939 abstraction mechanisms clu clu programming language designed support abstractions program construction work programming methodology led realization kinds abstractions procedural control data abstractions programming process procedural abstraction supported conventional languages procedure subroutine clu addition procedures linguistic mechanisms support data control abstractions paper troduction abstraction mechanisms clu means programming examples utility kinds abstractions program construction illustrated shown clu programs written implement abstractions clu library permits incremental program development complete type checking performed compile time discussed programming languages data types data abstractions control abstractions programming methodology separate compilation
2940 abstraction verification alphard defining iteration generators alphard form programmer great deal control implementation abstract data types paper abstraction techniques extended simple data representation function definition iteration statement important poin interaction data control structure language means specializing alphard loops operate abstract entities explicit dependence representation entities troduced specification verification techniques properties generators iterations expressed form proof rules developed results obtained common special cases loops essentially identical constructs languages means showing generator terminate provided abstraction representation abstract data types assertions control specialization correctness generators invariants iteration statements modular decomposition program specifications programming languages programming methodology proofs correctness types verification
2941 early experience mesa experiences mesa users primarily implementers discussed implications mesa similar programming languages suggested specific topics addressed module structure defining abstractions data structuring facilities mesa equivalence algorithm types type coercions benefits type system breached occasionally difficulty making treatment variant records safe programming languages types modules data structures systems programming
2942 algol based implementation snobol patterns patterns snobol pattern matching string processing pattern implementation algorithms pascal
2943 lucid nonprocedural language iteration lucid formal system programs written proofs programs carried proofs easy follow straightforward produce statements lucid program simply axioms proof proceeds conventional logical reasoning axioms rules inference special lucid functions programming language lucid unconventional things order statements irrelevant assignment statements equations lucid programs iterative programs conventional structured programming language assignment conditional statements loops program proving formal systems semantics iteration structured programming
2944 shifting garbage collection overhead compile time paper discusses techniques enable automatic storage reclamation overhead partially shifted compile time paper assumes transaction oriented collection scheme proposed deutsch bobrow features summarized implementing optimizations requires global flow analysis performed source program shown compile time program actions affect reference counts cells deduced information find actions cancel code executed grouped achieve improved efficiency garbage collection global flow analysis list processing optimization reference counts storage management
2945 certification programs secure information flow paper presents certification mechanism verifying secure flow information program exploits properties lattice structure security classes procedure sufficiently simple easily included analysis phase existing compilers semantics presented proved correct important application confinement problem mechanism prove program supposedly nonconfidential results depend confidential input data protection security information flow program certification lattice confinement security classes
2946 alternative event queues synchronization monitors monitor concept proposed brinch hansen hoare event synchronization paper describes synchronizing primitive expressive conditional wait implemented efficiently implementation primitive terms operations correctness proof examples presented readers writers problem problem information streams sharing finite buffer pool monitor operating system mutual exclusion synchronization conditional critical region structuring concept
2947 sitar interactive text processing system small computers sitar low cost teractive text handling text analysis system nontechnical users ways comparable teractive bibliographical search retrieval systems additional features implemented pdp time sharing computer invoked crt microprogrammed editing functions simple command language designating function file search template consisting textual string desired strings delimiting context hit delivered extensive experience sitar shows combined powers simple commands string orientation circular file structure crt local memory conversational computing produce system powerful sum parts information retrieval text editing minicomputers crts time sharing bibliographic search retrieval literary analysis linguistic analysis command languages
2948 terminal oriented communication system paper describes system full duplex communication time shared computer terminals system consists communications computer directly connected time shared system number small remote computers terminals attached connecting medium speed telephone lines service large number terminals types system design presented algorithms solve specific problems local echoing error detection correction telephone lines multiplexing character output terminal system error correction multiplexing local echoing communication system network
2949 correctness proof topology information main tenance protocol distributed computer network order nodes distributed computer network communicate node information network topology nodes links crash scheme needed update information major constrain ts topology information scheme involve central controller topology information protocol implemented merit computer network presented explained protocol general implemented computer network based baran hot potato heuristic routing doctrine correctness proof topology information protocol presented distributed computer network correctness proofs computer networks distributed control network topology routing problem networks distributed operating system store forward packet switching store forward message switching traffic control
2950 unifying approach scheduling paper presents scheme classifying scheduling algorithms based abstract model scheduling system formalizes notion priority classes scheduling algorithms defined related existing algorithms criterion implementation efficiency algorithm developed results definition time invariant algorithms include commonly implemented time invariant algorithms dependence processing rates priorities derived abstract model framework implementing flexible schedulers real operating systems policy driven scheduler bernstein sharp discussed implementation scheduling algorithms scheduling models priority operating systems processor sharing implementation efficiency
2951 dynamic response time prediction computer networks ultimate aim computing network resource sharing human component technical component networking fully investigated achieve goal research step assisting user participating vast store resources network analytical simulation statistical performance evaluation tools employed investigate feasibility dynamic response time monitor capable providing comparative response time information users wishing process computing applications network computing node research reveals sufficient system data obtainable diverse arpa network systems studied detail describe predict response time network time sharing systems depends measure system activity load level response time monitor computer networks time sharing systems comparative response time arpa network anlytic modeling simulation benchmark jobs system measurement
2952 functions realizable word parallel logical complement addition instructions boolean functions complement sign propagation
2953 notes recursion elimination methods recursion elimination applied schematic recursive procedure proc px fx gx fi procedures general form arise connection tree traversal sorting algorithms method recursion removal involves stacks solutions compared basis running time recursion elimination optimization programs stacks trees sorting algorithms computational induction
2954 bounded storage algorithm copying cyclic structures algorithm presented copies cyclic list structures bounded workspace linear time unlike previous similar algorithm makes assumptions storage allocation system operations high level language distinctive feature algorithm technique traversing structure spanning tree case left left copying shared subtrees cyclic structures
2955 buddy systems algorithms presented implementing class buddy systems dynamic storage allocation buddy system corresponds set recurrence relations relate block sizes provided analyses ternal fragmentation binary buddy system fibonacci buddy system weighted buddy system comparative simulation results presented ternal external total fragmentation dynamic storage allocation buddy system fragmentation fibonacci buddy system weighted buddy system
2956 ideas data types high level languages number issues explored notion data type set values set primitive operations values notation iterating elements finite set narrow notation domain array data type simple notation allowing types parameters parameters restrictive fashion resulting problems conversion values type data types generic procedures programming languages
2957 database abstractions aggregation aggregation troduced abstraction important conceptualizing real world aggregation transforms relationship objects higher level object data type called aggregation developed criteria definedness specifies aggregation abstractions relational databases defined collections aggregates structured hierarchy ary relations main tain definedness update operations databases preserve invariants defined relations distinct relations normal form shown notions complementary important database design top methodology database design separates decisions aggregate structure decisions key identification suggested aggregate types types support real world abstractions troducing implementation detail incorporated programming languages data abstraction relational database data type aggregation database design data structure knowledge representation data definition language
2958 abstract data types development data structures abstract data types play significant role development software reliable efficient flexible paper presents discusses application algebraic technique specification abstract data types examples presented top development symbol table block structured language discussion proof correctness paper discussion problems involved constructing algebraic specifications consistent complete abstract data type correctness proof data type data structure specification software specification
2959 system business automation sba programming language system business automation sba system application experts nonprogrammers describe execute applications computer user sba views application manipulation information dimensional pictures tables business forms reports display terminal gradually automate application giving examples system manually manipulates information query database language subset sba programming language programming language graphics user terface data flow forms flow data abstraction database query data processing business system specification application programming
2960 views data abstraction
2961 experimental investigations utility detailed flowcharts programming paper describes previous research flowcharts series controlled experiments test utility detailed flowcharts aid program composition comprehension debugging modification statistically significant difference flowchart nonflowchart groups shown calling question utility detailed flowcharting program research suggested flowcharts program composition program comprehension debugging modification experimental testing human factors
2962 production employment ph computer science statistics presented production employment ph computer science calendar year data include profiles graduate students faculty ph producing departments breakdown degrees granted specialty areas significant trends noted comparisons comparable data gathered calendar year made computer science production ph employment students
2963 fast algorithm computing longest common subsequences previously published algorithms finding longest common subsequence sequences length case running time algorithm problem presented running time log total number ordered pairs positions sequences match worst case algorithm running time log applications positions sequence match positions sequence running time log expected longest common subsequence efficient algorithms
2964 approach optimal design storage parameters databases database organization storage parameter optimization resident overflow storage
2965 optimal evaluation boolean expressions online query system query boolean expression information retrieval file organization
2966 choice reference poin ts match file searching improvements exhaustive search method match file searching previously achieved preprocessing step involving calculation distances reference poin paper discusses proper choice reference poin ts extends previous algorithm reference poin shown reference poin ts located data clusters results computer simulations presented show large improvements achieved proper choice location multiple reference poin ts matching file searching match nearest neighbor classification
2967 comparison hardware software associative memories context computer graphics associative processing line drawings apld system utilizes hardware associative memory creates modifies deletes stores retrieves dimensional line drawings consisting poin ts lines rectangles triangles apld functions duplicated tx computer lincoln laboratory leap language data structure comparison hardware approach software simulation illustrates advantages hardware associative memory areas processing speed storage requirements flexibility major problem areas hardware associative memory technology input output cost effectiveness addressed associative memory associative processor content addressable memory graphics information retrieval data structures software evaluation hardware evaluation parallel processing database management
2968 comparison tree balancing algorithms algorithms height balance avl extensions weight balance bb wb total restructuring building balanced binary search trees compared criteria comparison encompass theoretical aspects path lengths implementation independent machine algorithm dependent measures run time detailed analysis code presented level believed language compiler independent quality resulting trees overhead spent building analyzed guidelines efficient methods insertion subsequent queries operations terest pure avl trees present qualities binary search trees avl trees weight balanced trees path length analysis algorithms information storage retrieval
2969 optimal program data locations computer networks optimization procedure allocation program data files computer network presented algorithm takes account dependencies files programs occur real heterogeneous computer networks insights convert programs computer gained model search procedure file location problem application model computer networks databases distributed databases optimal file location
2970 achieving specific accuracy simulation output analysis paper extends regenerative property queueing systems analysis simulation output describes sequential estimation method regenerative property results obtained statistical accuracy method includes test check normality assumption sequential procedure relies paper illustrates method empty idle state regenerative state describes frequently entered state regenerative state reduces chance making costly error preliminary simulation run paper variance reduction method due page obtain accuracy considerably fewer job completions required variance reduction technique applied confidence terval ratio estimator regenerative property sequential estimator simulation stopping rule variance reduction
2971 sp system teaching computer programming sp compatible subset pl language designed teaching programming features sp language chosen encourage structured problem solving computers make language easy learn eliminate confusing redundant constructs make language easy compile resulting language suitable troducing programming concepts applications including business data processing scientific calculations numeric computation sp sequence language subsets called sp sp sp subset troduces programming language constructs retaining constructs preceding subsets subset precisely defined learned implemented subsets programmer education universities community colleges high schools pl sp minicomputers programming language design teaching programming troductory computing
2972 proof techniques hierarchically structured programs method describing structuring programs simplifies proofs correctness presented method formally represents program terms levels abstraction level contained nonprocedural specification proofs programs structured levels manual proofs paper method applicable semi automatic automatic proofs preliminary results encouraging indicating method applied large programs operating systems hierarchical structure program verification structured programming formal specification abstraction programming methodology
2973 sorting mesh connected parallel computer algorithms presented sorting elements mesh connected processor array require routing comparison steps previous algorithm takes time log algorithms paper shown optimal time small constant factors extensions higher dimensional arrays parallel computer parallel sorting parallel merge routing comparison steps perfect shuffle processor terconnection pattern
2974 comment weighted increment linear search scatter tables hash address primary clustering index sequence complementary relation search
2975 remark uniform insertion structured data structures data structures directed graphs uniform insertion
2976 approximating block accesses database organizations database inverted file organization database performance measurement information retrieval query answering
2977 stage hypothesis curve contradictory evidence paper presents results study testing shaped budget curve nolan stage model computer development organization research data processing budgets california counties fails support shaped curve budgets basis stage model results invalidate concept stage model analysis suggests alternative model budget growth separation models budgeting growth growth stages development computer resource budgets stage theories stage hypothesis
2978 analysis design alternatives virtual memory indexes class index structures virtual memory environment design alternatives class index structures analyzed alternatives include choice search strategy pages index structured keys compressed average cost retrieving entries indexes expressed wieghted sum cost basic key comparison cost crossing page boundary index structure formulas retrieval costs combinations design alternatives numerical case studies compare retrieval costs alternatives qualitative comparisons main tenance costs insertion deletion reorganization design alternatives included index index structure pages virtual memory files retrieval main tenance search strategy key compression
2979 studies machine cognition game poker progress report presented research efforts human decision making uncertainly risk human problem solving learning processes hand machine learning large scale programming systems programming techniques terest humans make deductive inductive inferences form optimize heuristic rules machines reach similar results vehicle investigations game poker conceptual framework provided fairly wide range applicability models human judgment choice decision making incorporated large scale complex program represent descriptive normative theories behavior teractive game environment recently established usefulness experiments game playing enables humans construct machine strategies line question answering advice taking mode machine learning game playing programs decision making uncertain ty risk automatic forming optimizing heuristic rules automatic inductive deductive inference making models game learning poker gambling bluffing
2980 editing picture segmentations local analysis graphs major problem picture processing elimination large number spurious regions result initial segmentation region growing techniques regions eliminated basis semantic information basis size contrast scheme presented performs eliminations basis local properties region adjacency graph scheme based definitions graph properties satisfied spurious region present editing equivalent fast graph operations number examples shown picture processing pattern recognition segmentation region editing
2981 subgoal induction proof method subgoal induction presented alternative supplement commonly inductive assertion method major virtue prove loop correctness directly input output specification invariant relation subgoal induction commonly induction rules explored shown subgoal induction viewed specialized form computation induction set sufficient conditions presented guarantee input output specification strong induction steps proof subgoal induction valid program verification proving programs correct induction rule computation induction inductive assertions structural induction proof rule recursive programs iterative programs
2982 storage requirement precedence parsing precedence parsing storage requirement table
2983 comparison fit fit fit memory allocation fit fit fit
2984 cost utilization measure system performance method presented evaluating computer system performance terms cost utilization factor measure imbalance coefficients extent total system cost effectively utilized method includes technique visual representation system performance computer system performance evaluation cost utilization system balance
2985 effects chargeout user manager attitudes relationship ternal pricing systems computer services chargeout systems user management attitudes computer based information systems investigated evidence provided relationship conforms general pattern expected hypothesis stages edp growth results chargeout systems characteristic advanced edp stage environments high levels positive user attitudes marked increases edp training users factors important user manager involvement effective control computer based systems development main tenance computer based systems asserted category organizational change felt change part user manager prerequisite change taking place research methods behavioral science applied investigate user manager environment effects chargeout computer management computer budget chargeout stage hypothesis control
2986 operations sparse relations computations relations boolean matrices directed graphs computation precedence relations context free grammar practical algorithm asymptotically faster common compute operator precedence wirth weber precedence relations steps shown compute linear precedence functions steps shown compute linear precedence functions steps size grammer heart algorithms general theorem giving sufficient conditions expression operands sparse relations operators composition transitive closure union inverse computed efficiently computational complexity sparse relation boolean matrix directed graph wirth weber precedence relation linear precedence function slr grammar canonical precedence relation
2987 representation sided polygons polygonal lines rapid processing representation polygons polygonal lines sets consecutive sides collectively examined set sides arranged binary tree hierarchy inclusion fast algorithm testing inclusion poin sided polygon speed algorithm discussed ideal practical examples shown poin ts intersection polygonal lines located essentially binary tree search algorithm practical discussed representation overcomes disadvantages fixed grid methods representing curves regions boundary line representation cartography computer graphics computer searchable structures contour representation geographic information processing graphic data retrieval tersection curves line drawing processing poin ts polygons regional boundary representation spatial information
2988 memory management response time paper presents computationally tractable methodology including accurately effects finite memory size workload memory requirements queueing network models computer systems empirical analyses analytic studies based applying methodology actual multiaccess teractive system reported relations workload variables memory requirement distribution job swap time performance measures response time memory utilization graphically displayed multiphase analytically soluble model proposed broadly applicable analysis teractive computer systems nonpaged memories memory management system performance queueing network models teractive computer systems
2989 empirical evaluation features instruction set processor architectures paper presents methods empirical evaluation features instruction set processors isps isp features evaluated terms time saved feature methods based analysis traces program executions concept register life troduced answer questions registers simultaneously sufficient time time overhead number registers reduced registers lives paper discusses problem detecting desirable existing instructions problems briefly discussed experimental results presented obtained analyzing programs running dec system isp computer architecture program behavior instruction sets op code utilization register structures register utilization simultaneous register lives instruction tracing execution time
2990 effective information retrieval term accuracy performance information retrieval systems evaluated number ways published evaluation work based measuring retrieval performance average user query formal proofs difficult construct average case present study retrieval evaluation based optimizing performance specific user query concept query term accuracy troduced probability occurrence query term documents relevant query relating term accuracy frequency occurrence term documents collection give formal proofs effectiveness respect user query number automatic indexing systems successfully experimental situations inverse document frequency weighting thesaurus construction phrase generation information retrieval automatic indexing content analysis term accuracy frequency weighting thesaurus phrase transformations
2991 improving access time random access files clustering key set decreased smoothing key address transformation adding shadow buckets open chaining file keys pre hashed address division remove effect sequential properties key set shadow buckets key search sequence reduce effect nonuniformity file loading decrease number maximum probes needed locate record combined effects techniques lead improved file performance secondary storage devices shown empirical studies hashing hashing techniques hashing methods hash coding keys key transformation key address transformation direct addressing direct access direct access method randomizing random access file addressing file organizations file structures scatter storage search method collisions synonyms clustering information retrieval open addressing open chaining buckets bucket size shadow buckets combinatorics
2992 numbering system binary trees binary trees permutations binary search trees ranking function
2993 occurrences cycling phenomena arising class linear programming models investigation average queue size class queues resulted formulation linear programming problems ill conditioned cases attempting solve linear programming models ibm mps package instances cycling encountered small perturbations input data resulted problems cycle fact observed phenomena suggest primary reason cycling occur frequently round errors computations perturb problem sufficiently prevent cycling prevent indefinite cycling case maximizing minimizing objective function subject constrain set attempted mps solved giving indication infeasibility linear programming cycling queueing models
2994 linear algorithm incremental digital display circular arcs circular arcs drawn incremental display device cathode ray tube digital plotter matrix prin ter sign testing elementary addition subtraction paper describes methodology producing dot step patterns closet true circle graphics circle drawing step generation dot generation incremental digital plotting raster display integer arithmetic circle algorithm
2995 decomposability instabilities saturation multiprogramming systems corrigendum
2996 transient free working set statistics transient free average working set size transient free missing page rate finite sample reference string defined statistics contents working set start recorded string unknown stationarity condition holds statistics provide unbiased estimates expected working set sizes missing page probabilities terreference distance probabilities pairs estimators shown biased expressions transient free statistics obtained terms terval statistics methods computation discussed usefulness depending length sample number distinct references amount main storage computer performing calculations methods handling long strings distinct page names working set estimation program behavior
2997 convex hulls finite sets poin ts dimensions convex hulls sets poin ts dimensions determined log operations presented algorithms divide conquer technique recursively apply merge procedure nonin tersecting convex hulls convex hull algorithm requires log operations time complexity proposed algorithms optimal multiplicative constant computational complexity convex hull optimal algorithms planar set poin ts spatial set poin ts
2998 empirical study list structure lisp static measurements list structure large lisp programs reported analyzed paper measurements reveal substantial regularity predictability poin ters atoms poin ters lists pointers atoms found obey roughly zipf law governs word frequencies natural languages poin ters lists poin location physically nearby memory regularities space efficient representation list structure discussed linearization lists successive cdrs cars consecutive memory locations greatly strengthens observed regularity list structure shown reasonable assumptions entropy information content car cdr pair programs measured bits linearization bits list structure measurement lisp list structure regularity poin ter compression zipf law list linearization poin ter entropy
2999 approach multidimensional data array processing computer recent work development general purpose computer based statistical data processing capabilities handling multidimensional arrays data presented attention general problems multidimensional table array processing summary recent developments array processing capabilities world bank system identified wraps world bank retrieval array processing system array processing table processing statistical analysis data retrieval data processing syntax data structures computing techniques time series cross tabulation
3000 segment sizes lifetimes algol programs characteristics virtual memory requirements sample algol programs measured distributions presented thesizes memory requests holding times lifetimes results presented terms johnston contour model simple abstract machine provide empirical evidence aspects construction behavior real programs implications design virtual memory systems presented discussed virtual memory program behavior segmentation storage allocation algol contour model
3001 detection combined occurrences paper supposed variables xn finite range variable xi taking pi values values variables changing time supposed desired detect occurrences subset variables achieve values finally supposed problem involves detection large number combined occurrences large number values variables efficient solutions problem methods unusual property faster systems sum pn larger solution error free suitable cases solution slightly elegant negation conjunction subject possibility errors error analysis method empirical study reported coding hash coding retrieval secondary keys pattern recognition artificial telligence demons tuples sorting chess
3002 record file partitioning model main objectives design file system reduction storage data transfer costs paper presents model requests access file system request requires information variable length data items probabilities access distribution data item length assumed mutually independent file system storage devices record partitioned subrecords stored devices subrecords designated primary record request record made primary record accessed subrecords accessed pertinent information stored primary record model presented paper nonlinear programming model mixed integer programming model general types file systems derived selection parameters model optimization library routines storage large scale operating system file system file design file partitioning record partitioning
3003 survey literature computer science education curriculum bibliography approximately hundred references computer science education appearing literature publication curriculum presented bibliography preceded descriptive materials organizing references categories survey reports activities professional organizations philosophy programs description programs description courses materials education computer science curricula
3004 structured programming cobol approach application programmers techniques designing writing cobol programs presented previous work structured programming drawn adapted presentation informal terminology nonmathematical theorems proved examples frequently top program design implemented structured flowcharts disciplined specifications step step verification formed cobol program defined proper cobol coding practices discussed structured programming top formed program statement repeat statement flowchart application programming cobol software reliability program verification
3005 implications structured programming machine architecture based empirical study lines program text written goto language machine architecture specifically designed structured programs proposed assignment call return statements account percent executable statements special care ensure statements implemented efficiently highly compact instruction encoding scheme presented reduce program size factor unlike huffman code utilizes variable length fields method fixed length byte op code address fields frequent instructions consist single byte field consequence instruction decoding time minimized machine efficient respect space time machine architecture computer architecture computer organization instruction set design program characteristics
3006 anomalies variable partition paging algorithms types anomalous behavior occur paged virtual memory operating systems redefined type anomaly concerns fact reference strings paging algorithms increase memory allocation result increase fault rate paging algorithms examined terms anomaly potential reference string examples anomalies presented paging algorithm properties inclusion property generalized inclusion property discussed anomaly implications properties presented anomaly memory management program behavior stack algorithms virtual memory working set page fault frequency paging algorithms
3007 complexity computations corrigendum
3008 preserving average proximity arrays programmers data structure designers forced choose alternative structures storing structures preserving logical adjacencies proximity important consideration combinatorial problem storing arrays kinds list structures examined embeddings graphs model loss proximity involved storage schemes elementary proof arrays stored linear lists bounded loss proximity presented average loss proximity considered shown arrays stored linear lists bounded loss average proximity stored binary trees result implies instance row major order asymptotically optimal storage strategy arrays arrays graph embedding linear lists proximity average proximity trees
3009 insertions deletions sided height balanced trees recently hirschberg established insertions sided height balanced trees log steps proved deletions performed log steps answers open problem posed hirschberg avl trees balanced trees binary search dynamic balancing
3010 orientation computer science students technological nontechnological orientations investigated special attention complexity structures computer science students closely technology contrast social science students technologically aloof confirmed ratings students university minnesota computer science majors found complex structure social science majors values attitudes students public social effects
3011 management utilization computers american local governments traditional concepts management information systems mis bear relation information systems top management local governments exists management oriented computing involving unsophisticated applications unsophisticated nature systems management computing surprisingly common varied extent local governments management computing prevalent governments professional management practices top management supportive computing control computing decisions department users control design implementation activities finally management computing impacts top managers involving improvements decision information computer utilization management information system american local government city government computers county government computers computer impacts management computing
3012 interactive information storage retrieval system medical research paper presents results study interactive computerized storage retrieval system monitor built computer system provided usage data study additional data user reactions gathe red questionnaire results show important role played frequently chosen laboratory reference leaders influencing system implications study design similar systems discussed implementation system information storage retrieval system
3013 methods detecting step edges digital pictures note describes operators respond step edges ramps similar digital laplacian max sum differences difference median gray levels neighborhood outputs obtained operators applied set test pictures compared standard digital laplacian gradient operator distance center centroid neighborhood edge briefly considered turns equivalent standard digital approximations gradient image processing pattern recognition edge detection
3014 intermittent assertions proving program correctness paper explores technique proving correctness termination programs simultaneously approach intermittent assertion method involves documenting program assertions true time control passes point true time method introduced burstall promises provide valuable complement conventional methods intermittent assertion method presented number examples correctness termination proofs proofs markedly simpler conventional counterparts hand shown proof correctness termination conventional techniques rephrased directly proof intermittent assertions finally shown intermittent assertion method applied prove validity program transformations correctness continuously operating programs intermittent assertions correctness programs termination programs program verification program transformation continuously operating programs
3015 relaxation methods image reconstruction problem recovering image function variables experimentally integrals grayness thin strips great importance large number scientific areas important version problem medicine obtaining exact density distribution human body ray projections approach solve problem consists translating information system linear inequalities size sparsity resulting system typically inequalities fewer percent coefficients nonzero makes methods successive relaxations computationally attractive compared ways solving systems inequalities paper shown consistent system linear inequalities sequence relaxarion parameters lying strictly generates sequence vectors converges solution assumptions system linear equations relaxation method converges minimum norm solution previously proposed techniques shown special cases procedure choices relaxation parameters practical consequences image reconstruction choice relaxation parameters discussed biomedical image processing image reconstruction ray tomography mathematical programming linear inequalities relaxation techniques
3016 comparison numerical techniques markov modeling paper presents numerical methods obtain stationary probability vectors markovian models decomposable system considered results obtained methods examined post mortem reveals standard techniques fail yield correct results finally means estimating error inherent decomposition models presented markov models numerical techniques simultaneous iteration decomposability
3017 trees examined tree variants increasing frequency proposed basic storage structure multiuser database applications potential problems dealt structure arise traditional static directory structures problem performance penalty tree directory static directory dynamic directory index sequential access method
3018 covering edges cliques regard keyword conflicts intersection graphs kellerman presented method determining keyword conflicts heuristic algorithm solves combinatorial optimization problem connection method optimization problem shown equivalent problem covering edges graph complete subgraphs objective minimizing number complete subgraphs relationship edge clique cover problem graph coloring problem established algorithms problems constructed algorithm consequences relationship keyword conflict problem edge clique cover problem shown np complete np admit polynomial time approximation algorithms produce solutions factor optimum keyword conflicts intersection graphs node clique cover edge clique cover computational complexity np complete problems polynomial time heuristics
3019 gre advanced test computer science
3020 systematic recursion removal recursion removal algorithm presented strong walker amplified applied complex pl program aim demonstrate systematic recursion removal techniques complex knuth sturdy toddler obtain measurements cost procedure linkage pl savings achievable procedure integration presence recursion paper describes recursion removal process illustrated recursion removal applied major parts final result process displayed performance comparison results presented conclusions briefly discussed recursion removal recursion elimination optimization procedure linkage procedure integration
3021 method obtaining digital signatures public key cryptosystems encryption method presented property publicly revealing encryption key reveal decryption key important consequences couriers secure means needed transmit keys message enciphered encryption key publicly revealed intended recipient decipher message decryption key message signed privately held decryption key verify signature publicly revealed encryption key signatures forged signer deny validity signature obvious applications electronic mail electronic funds transfer systems message encrypted representing number raising publicly power taking remainder result divided publicly product large secret prime numbers decryption similar secret power mod security system rests part difficulty factoring published divisor digital signatures public key cryptosystems privacy authentication security factorization prime number electronic mail message passing electronic funds transfer cryptography
3022 computer science faculties current status minorities women results survey conducted fall determine status women minority faculty members academic computer science presented faculty members compared respect professional background salaries teaching load publication records research grants analysis data verdict general equality women minorities men discrimination women discrimination minorities faculty computer science degree programs affirmative action teaching loads salaries publications
3023 architecture ibm system paper discusses design considerations architectural extensions distinguish system system comments experiences original objectives system efforts achieve describes reasons objectives extending architecture covers virtual storage program control data manipulation instructions timing facilities multiprocessing debugging monitoring error handling input output operations final section tabulates important parameters ibm machines implement architecture computer systems architecture instruction sets virtual storage error handling
3024 cray computer system paper describes cray discusses evolution architecture account problems overcome manufacture cray computer built date satisfies erda class vi requirement computer capable processing million floating point operations cray fortran compiler cft designed give scientific user access benefits cray vector processing architecture optimizing compiler cft vectorizes innermost loops compatible ansi fortran standard commonly supported fortran extensions cft require source program modifications additional nonstandard fortran statements achieve vectorization user investment hundreds man months effort develop fortran programs contemporary computers protected architecture computer systems
3025 evolution dec system dec system pdp evolved pdp circa generations implementations presently include systems covering price range origin evolution hardware operating system languages terms technological change user requirements user developments pdp contributions computing technology include accelerating transition batch oriented time sharing computing systems transferring hardware technology dec minicomputer design manufacturing supporting minicomputer hardware software development serving model single user timeshared interactive minicomputer microcomputer systems computer structures architecture operating system timesharing
3026 evolution sperry univac series tory analysis projection series systems sperry univac large scale main frame computer systems beginning series progressed succession compatible computer models latest system introduced series hardware architecture based bit word complement structure obtains operand storage high speed register operands high speed registers operating system designed support symmetrical multiprocessor configuration simultaneously providing multiprogrammed batch timesharing transaction environments computer series computer architecture multiprocessing languages data management systems end user facilities executive control software
3027 development mu computer system outline background mu project aims ideas mu discussed description instruction set includes number features conducive production efficient compiled code high level language source programs design processor traced initial ideas associatively addressed store final multistage pipeline structure involving prediction mechanism instruction prefetching function queue array element accessing view complete mu complex presented indication performance architecture naming virtual storage instruction set descriptor pipeline instruction buffering associative storage function queue computer complex
3028 manchester mark atlas torical perspective years computer design manchester university systems stand mark developed period atlas paper places computer torical context describes architecture system software present day terminology design concepts address generation store management evolved progression mark atlas wider impact manchester innovations areas discussed contemporary performance mark atlas evaluated architecture index registers paging virtual storage extra codes compilers operating systems ferranti manchester mark atlas icl
3029 foreword special issue computer architecture
3030 hierarchical design proof hierarchical programming increasingly recognized helpful construction large programs users hierarchical techniques claim predict substantial increases productivity reliability programs produced paper describe formal method hierarchical program specification implementation proof apply method significant list processing problem discuss number extensions current programming languages ease hierarchical program design proof program verification specification data abstraction software modules hierarchical structures
3031 abstract data types software validation data abstraction naturally algebraic axioms virtue axioms permit representation independent formal specification data type shows employ algebraic axioms successive levels implementation major thrust paper twofold shown algebraic axiomatizations simplify process proving correctness implementation abstract data type semi automatic tools automate proofs correctness derive implementation axioms implementation limited testing programs design time conventional implementation accomplished abstract data type correctness proof data type data structure specification
3032 reverse path forwarding broadcast packets broadcast packet delivery nodes network algorithms accomplishing delivery store forward packet switching computer network include transmission separately addressed packets multidestination addressing hot potato forwarding spanning tree forwarding source based forwarding list algorithms add reverse path forwarding broadcast routing method exploits routing procedures data structures packet switching reverse path forwarding practical algorithm broadcast routing store forward packet switching computer networks algorithm practical optimal metrics developed analysis paper implemented existing networks complexity required alternatives reverse path forwarding broadcast packets routing computer networks store forward packet switching broadcast protocols
3033 optimizing decision trees heuristically guided search optimal decision table conversion tackled literature approaches dynamic programming branch bound technique effective time space requirements independent easy table produce good quasi optimal solutions branch bound technique good heuristic direct search cluttered enormous search space number solutions increases number test variables double exponential paper suggest heuristically guided top search algorithm dynamic programming recognizes identical subproblems find optimal quasi optimal solutions heuristic search method introduced paper combines positive aspects techniques compressed tables large number variables handled deriving expanded tables decision table optimal decision table conversion decision tree heuristic search graphs dynamic programming branch bound
3034 detection logical errors decision table programs paper algorithm detect logical errors limited entry decision table loop free programs embedded decision tables developed conditions decision tables assumed inequalities equalities relating linear expressions assumed actions decision table linear variables occur condition stub decision table tables control transferred table algorithm based determining set linear inequalities solution algorithm paper implemented fortran iv error diagnostics decision tables
3035 strategic planning methodology computing effort higher education empirical evaluation findings study designed address pressing problems strategic planning computing effort higher education presented planning methodology developed tested implementation university years methodology implemented effectiveness planning methodology assessed terms improvement delivery computing services major institutional roles instruction research administration control institutions employed contrast improvements test institution results research planning methodology significantly enhanced delivery computing services computer management computer budget university computing computer planning
3036 selection optimal tab settings generation computer terminals tab settings selected set computer feature reduce number characters needed represent document transmission printing note algorithm selecting optimal set tab stops minimizing number characters transmitted implementation algorithm reduced number characters transmitted percent requires prepass document compute matrix determining optimal set tab stops fixed tab stops heuristic alternative achieve percent optimal prepass tabs word processing dynamic programming
3037 linear sieve algorithm finding prime numbers algorithm presented finding primes algorithm executes time proportional assuming multiplication integers larger performed unit time method arithmetic complexity algorithm presented mairson version simpler elegant easily extended find prime factorization integers time proportional primes algorithms data structures
3038 encryption authentication large networks computers encryption achieve authenticated communication computer networks discussed protocols presented establishment authenticated connections management authenticated mail signature verification document integrity guarantee conventional public key encryption algorithms considered basis protocols encryption security authentication networks protocols public key cryptosystems data encryption standard
3039 fly garbage collection exercise cooperation cooperation sequential processes mutual interference frequent manipulations large shared data space technique developed activity needed garbage detection collection performed additional processor operating con processor devoted computation proper exclusion synchronization constraints weak achieved severe complexities engendered illustrated multiprocessing fine grained interleaving cooperation sequential processes minimized mutual exclusion program correctness multiprogramming tasks garbage collection
3040 synthesizing constraint expressions constraint network representation presented combinatorial search problem finding values set variables subject set constraints theory consistency levels networks formulated related problems backtrack tree search efficiency algorithm developed achieve level consistency desired order preprocess problem subsequent backtrack search function alternative backtrack search explicitly determining solutions backtrack combinatorial algorithms constraint networks constraint satisfaction graph coloring network consistency relaxation scene labeling search
3041 median split trees fast lookup technique frequently occuring keys split trees technique searching sets keys highly skewed frequency distributions split tree binary search tree node key values node maximally frequent key subtree split partitions remaining keys respect lexical ordering left subtrees median split tree mst lexical median node descendents split force search tree perfectly balanced achieving space efficient representation tree high search speed unlike frequency ordered binary search trees cost successful search mst log bounded stable minimal values mst built key ordering set frequencies time log opposed optimum binary search tree discussion application mst dictionary lookup english presented performance obtained contrasted techniques tree search dictionary lookup binary search heaps balanced trees zipf law information retrieval
3042 power trees class pk trees presented height balance maintained nodes iying paths number nodes pk tree asymptotically grows power height worst case procedure node insertion class trees considered restricted ipk trees buildable procedure average behavior trees studied extensive set simulation runs close avl trees family ipo trees main advantage reduced number restructurings required node insertion analyzed binary search trees pk trees ipk trees search length node insertion subtree rotation
3043 distributed processes concurrent programming concept language concept concurrent processes common variables introduced processes communicate synchronize means procedure calls guarded regions concept proposed real time applications controlled microcomputer networks distributed storage paper examples distributed processes shows include procedures coroutines classes monitors processes semaphores buffers path expressions input output special cases concurrent programming distributed processes microprocessor networks nondeterminism guarded regions programming languages process communication scheduling sorting arrays coroutines classes monitors processes semaphores buffers path expressions input output
3044 note conditional expressions evaluation conditional expression succeed deciding predicate diverges alternatives records nodes fields content parallel evaluation suspending cons lisp conditional forms ambiguous function infinite structures
3045 simple recovery procedure simple precedence parsers simple method enabling simple precedence parsers recover syntax errors attempt repair errors made parsing semantic processing continue result good approximation syntax error handling negligible increase parsing time space complexity parser table generator syntax errors error recovery parsing simple precedence compilers debugging
3046 computer generation gamma random variables ii rejection method proposed generating gamma variates nonintegral shape parameter method similar methods fishman wallace tadikamalla faster methods core storage requirements programming effort proposed method similar wallace tadikamalla methods computational times proposed method remain fairly constant medium large values superior times obtained ahrens dieter method values proposed method simpler ahrens dieter method gamma variables rejection method computer methods
3047 synthetic images register real images surface models number image analysis tasks benefit registration image model surface imaged automatic navigation visible light radar images requires exact alignment images digital terrain models addition automatic classification terrain satellite imagery requires alignment deal correctly effects varying sun angle surface slope inspection techniques industrial parts improved means achieve required alignment matching real image synthetic image obtained surface model positions light sources synthetic image intensity calculated reflectance map convenient describing surface reflection function surface gradient illustrate technique landsat images digital terrain models image registration synthetic images surface models automatic hill shading digital terrain models image transformation image matching shaded images
3048 performance evaluation highly concurrent computers deterministic simulation simulation presented practical technique performance evaluation alternative configurations highly concurrent computers technique constructing detailed deterministic simulation model system model control stream replaces instruction data streams real system simulation system model yields timing resource usage statistics needed performance evaluation necessity emulating system case study implementation simulator model cpu memory subsystem ibm results evaluating alternative system designs discussed experiments reveal case study major bottlenecks system memory unit fixed point unit appears sophisticated pipelining buffering technique simplemented architecture ibm high speed cache memory ibm performance evaluation deterministic simulation control stream concurrent computers
3049 simply extended modified batch environment graphical system sembegs sembegs complete batch environment graphical system components handling graphical data files displaying contents files variety graphical hardware performing graphical batch input operations sembegs easy extend modify meet growing large batch environment extendable fully interactive system paper presents conceptual view graphics leading design sembegs outlines major components system design sembegs founded basic assumption true aim computer graphics describe graphical entities commonly held provide graphical input output functional capabilities sembegs built basic graphical data management system bagdams common means communicating descriptions graphical entities components sembegs bagdams facilities storing retrieving manipulating descriptions graphical entities provided received application programs graphics packages graphical devices computer graphics data structures graphic display graphic input graphical database device independent graphics
3050 systems design education gaming approach problems facing managers computer installations problem configuring computer system meet demands made mix jobs computer center service paper presents management game player configure computer system meet hypothetical job mix control game administrator varied simulate variety real world situations bound jobs compute bound jobs player game receives set detailed reports cost choices simulated run center operating choices system design configuration management game
3051 comparison heaps tl structure simulation event set simulation event set heaps tl structure
3052 cold start warm start miss ratios level computer storage hierarchy miss ratio measurements made cold start made level store initially empty large capacities effect measured miss ratio misses incurred filling level store significant long reference strings warm start cold start miss ratios cast doubt widespread belief observed shape lifetime reciprocal miss ratio versus capacity curve property behavior programs maintain constant number pages main storage hand cold start miss ratios measured function capacity measurement length studying systems operation program periodically interrupted task switches shown obtain simple assumptions cache miss ratio multiprogramming cold start miss ratio values obtain approximate cold start miss ratios warm start miss ratios miss ratio cold start warm start storage hierarchy lifetime function multiprogramming shape
3053 packed scatter tables scatter tables open addressing benefit recursive entry displacements cutoffs unsuccessful searches auxiliary cost functions compared conventional methods techniques provide substantially improved tables resemble exact solution optimal packings displacements depth limited approximations enumerative exhaustive optimization packing costs remain linear table size techniques primarily suited important fixed possibly large tables reference frequencies op code tables spelling dictionaries access arrays introduction frequency weights improves retrievals enhancement degrade cutoffs assignment problem backtrack programming hashing open addressing recursion scatter table rearrangements
3054 implementing quicksort programs paper practical study implement quicksort sorting algorithm variants real computers including apply code optimization techniques detailed implementation combining effective improvements quicksort discussion implement assembly language analytic results describing performance programs summarized variety special situations considered practical standpoint illustrate quicksort wide applicability internal sorting method requires negligible extra storage quicksort analysis algorithms code optimization sorting
3055 analysis algorithms dutch national flag problem solutions dutch national flag problem dijkstra meyer dijkstra starts simple program arrives improved program refinement algorithms dijkstra shown expected number swaps values differ swap asymptotically swap algorithm meyer shown expected swap complexity algorithmic analysis dutch national flag problem refinement structured programming
3056 counting large numbers events small registers small counter approximate counts large numbers resulting expected error precisely controlled bit counters bytes track events relative error substantially independent number events relative error expected percent percent time techniques advantage multichannel counting hardware software monitoring experiments processes counting
3057 optimal togram matching monotone gray level transformation paper investigates problem optimal togram matching monotone gray level transformation assigns picture points gray level gray level objective find transformed digital picture picture sum absolute errors gray level togram transformed picture reference picture minimized equivalent placing linearly ordered objects sized linearly ordered boxes assorted sizes accumulated error space packed overpacked boxes minimized placement function monotonic ensures polynomial time solution problem tree search algorithm optimal togram matching presented time complexity monotone property dropped problem np complete restricted optimal togram matching gray level transformation packing problem tree searching algorithm picture processing
3058 jump searching fast sequential search technique sequential file structures binary searching feasible jump searching appealing alternative paper explores variants classic jump searching scheme optimum jump size square root number records multiple level variable size jump strategies explored applications discussed performance evaluated jump searching sequential files file management search strategies database structures index searching
3059 models parallel processing programs application cpu overlap approximate queueing models internal parallel processing individual programs multiprogrammed system developed paper solution technique developed network decomposition models formulated terms cpu overlap applied analysis problems percentage performance improvement cpu overlap found greatest systems approximate cpu utilization balance low degrees multiprogramming percentage improvement overlap found greatest systemtems system utilized cpu multiprogramming parallel processing queueing network models multiprocessing computation
3060 fortran standard fortran official title american national standard programming language fortran commonly referred fortran development completed replaces fortran standard designated paper describes features fortran information standard developed
3061 simulations dynamic sequential search algorithms searching list processing sequential searching dynamic reordering simulation
3062 real time plotting approximate contour maps contour map digital plotting graphical characters
3063 note virtual memory indexes index tree pages file organization linked representation maintenance costs
3064 event manipulation discrete simulations requiring large numbers events event manipulation system presented consists major parts part addresses familiar problem event scheduling efficiency number scheduled events grows large part deals apparent problem providing efficiency flexibility scheduled events accessed executed additional features problems dealt include proper handling simultaneous events events created scheduled executed points simulated time infinite loops caused concatenation time events diagnosed maintaining event counts practical economical capability handling time displaceable events desirable simulation discrete systems simulation discrete event simulation time flow mechanisms
3065 brother trees insertion deletion provided class sided brother trees log performance importance results stems close relationship brother trees insertion algorithm operating log insertion deletion carried log time brother trees appears insertion algorithm inherently difficult deletion algorithm reverse obtains dictionary problem search trees avl trees brother trees balanced trees sided height balanced trees insertion deletion algorithms
3066 controlled experiment program testing code walkthroughs inspections paper describes experiment program testing employing highly experienced data processing professionals methods test small pl program results show popular code walk inspection method effective computer based methods finding errors effective methods terms errors found cost employed pairs subjects tested program independently pooled findings study shows tremendous amount variability subjects ability detect types errors varies method method software reliability program verification debugging testing code walkthroughs code inspections personnel selection
3067 generalized working sets segment reference strings working set concept extended programs reference segments sizes generalized working set policy gws resident set segments retention costs exceed retrieval costs gws model entire class demand fetching memory policies satisfy resident set inclusion property generalized optimal policy gopt defined operating points minimizes aggregated retention swapping costs special cases cost structure gws gopt simulate stack algorithm working set vmin efficient procedures computing demand curves showing swapping load function memory usage developed gws gopt policies empirical data actual system included database referencing memory management optimal memory policies paging program behavior program measurement segmentation working sets
3068 model verification data security operating systems program verification applied kernel architectures forms promising method providing uncircumventably secure shared computer systems precise definition data security developed terms general model operating systems model suitable basis verifying properties operating system assure reliable enforcement security application approach ucla secure operating system discussed operating systems security protection program verification
3069 practical interprocedural data flow analysis algorithm interprocedural data flow analysis algorithm presented analyzed algorithm associates procedure program information variables modified possibly preserved call procedure subcalls algorithm sufficiently powerful recursive programs deal sharing variables arises reference parameters algorithm unique compute information single pass requiring prepass compute calling relationships sharing patterns algorithm asymptotically optimal time complexity implemented practical programs large data flow analysis global flow analysis optimization side effects relations reference parameters incarnations
3070 hybrid simulation models computer systems paper describes structure operation hybrid simulation model discrete event simulation analytic techniques combined produce efficient accurate system models based simple hypothetical computer system discrete event simulation model arrival activation jobs central server queueing network models system processors accuracy efficiency hybrid technique demonstrated comparing result computational costs hybrid model equivalent simulation model performance evaluation simulation queueing network models central server model
3071 algorithm symbolic techniques bel petrov classification gravitational fields note algorithm presented symbolic calculation algebraic invariants weyl tensor permits determination bel petrov types gravitational field algorithm specialized inverno russell clark requires special coordinate system spin coefficient formalism algorithm implemented formac designed complete classification scheme proposed petrov book appendix examples illustrating algorithm general relativity bel petrov types formac symbolic manipulation tensors
3072 feedback coupled resource allocation policies multiprogramming multiprocessor computer system model studies integrated feedback driven scheduling systems multiprogrammed multiprocessor computer systems presented basic control variables data flow rates processes executing cpu model systems feature simulated continuous flow preempt resume scheduling input output activity attention amount memory resource required effective processing activity buffer space assignment model studies distribution driven trace driven techniques simple dynamic schedulers shown improve system performance measured user cpu time optimal optimal static schedulers imbeded identical system structures workload environments improvement greatest heavy demand workload integrated schedulers feedback scheduling multiprogramming systems system scheduling
3073 communicating sequential processes paper suggests input output basic primitives programming parallel composition communicating sequential processes fundamental program structuring method combined development dijkstra guarded command concepts surprisingly versatile illustrated sample solutions variety familiar programming exercises programming programming languages programming primitives program structures parallel programming concurrency input output guarded commands nondeterminacy coroutines procedures multiple entries multiple exits classes data representations recursion conditional critical regions monitors iterative arrays
3074 time space efficient garbage compaction algorithm area storage scattered marked nodes differing sizes rearrange compact mass end area revising pointers marked nodes show locations algorithm accomplishes task linear time relative size storage area space order bit pointer algorithm operates reversibly encoding situation collection locations point single location linear list emanating pointed location passing pointing locations terminating pointed location transplanted contents garbage collection compaction compact ification storage reclamation storage allocation record structures relocation list processing free storage pointers data structures
3075 fast parallel sorting algorithms parallel bucket sort algorithm presented requires time log processors algorithm makes technique requires space product processors time realistic model model memory contention permitted procedure presented sort numbers time log processors arbitrary integer model computation procedure permits simultaneous fetches memory location parallel processing sorting algorithms bucket sort
3076 conflicts social choice electronic funds transfer system developments years computer based systems automate transfer recording debits credits begun implemented large scale systems promise financial benefits institutions potential conveniences customers raise significant social legal technical questions resolved full scale systems electronic funds transfer eft problems larger public solve paper examines incentives eft developments social problems raise context conflicts positions implicit analyses proposed eft arrangements conflicts reflect relative importance problems specific groups positions implicit eft proposals organize analyses market arrangements system reliability privacy transactions topics analyzed article related positions held concerned parties ways public learn social qualities eft arrangements pace eft developments discussed context social choice electronic funds transfer systems social impacts computing privacy social choice computer networks network reliability security social values
3077 programming liberated von neumann style functional style algebra programs conventional programming languages growing enormous stronger inherent defects basic level fat weak primitive word time style programming inherited common ancestor von neumann computer close coupling semantics state transitions division programming world expressions world statements inability effectively powerful combining forms building programs existing lack mathematical properties reasoning programs alternative functional style programming founded combining forms creating programs functional programs deal structured data nonrepetitive nonrecursive hierarchically constructed arguments require complex machinery procedure declarations generally applicable combining forms high level programs build higher level style conventional languages functional style programming algebra programs variables range programs operations combining forms algebra transform programs solve equations unknowns programs transforms equations high school algebra transformations algebraic laws carried language programs written combining forms chosen programming power power algebraic laws general theorems algebra give detailed behavior termination conditions large classes programs class computing systems functional programming style programming language state transition rules unlike von neumann languages systems semantics loosely coupled states state transition occurs major computation functional programming algebra programs combining forms functional forms programming languages von neumann computers von neumann languages models computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition
3078 analysis availability computer systems computer aided algebra analytical results related availability computer system constructed unreliable processors presented paper results obtained computer aided algebraic manipulation techniques major purpose paper demonstrate difficulties obtaining analytical solutions markov processes considerably reduced application symbol manipulation programs physical systems modeled markov semi markov processes potential range application techniques wider problem availability analyzed computer aided algebra symbol manipulation markov process reliability redundant structures line computer system
3079 algorithm reasoning equality simple technique reasoning equalities fast complete ground formulas function symbols equality presented proof correctness theorem proving deduction program verification equality
3080 proving correctness heuristically optimized code system proving programs written high level language correctly translated low level language primary system post optimization step code generation low level language programs generated compiler fact hand coded examples usefulness system interesting results ability handle programs implement recursion bypassing start program detection pinpointing wide class errors low level language programs examples demonstrate optimization genre paper result substantially faster operation saving memory terms program stack sizes compilers correctness code optimization debugging program verification lisp
3081 shallow binding lisp shallow binding scheme variable accessed bounded amount computation elegant model shallow binding lisp presented context switching environment tree transformation called rerooting rerooting completely general reversible optional sense lisp interpreter operate correctly rerooting invoked context change rerooting leaves assoc invariant variables environments programmer access rerooting primitive shallow dynamic control accesses shallow deep affects speed execution program semantics addition multiple processes active environment structure long rerooting indivisible operation finally concept rerooting shown combine concept shallow binding lisp dijkstra display algol general model shallow binding lisp environment trees funarg shallow binding deep binding multiprogramming algol display
3082 time clocks ordering events distributed system concept event happening distributed system examined shown define partial ordering events distributed algorithm synchronizing system logical clocks totally order events total ordering illustrated method solving synchronization problems algorithm specialized synchronizing physical clocks bound derived synchrony clocks distributed systems computer networks clock synchronization multiprocess systems
3083 pseudochaining hash tables paper presents pseudochaining collision resolution method pseudochaining half open addressing chaining owes fact link fields present cell hash table permits chaining overflow items table efficiency method derived tradeoff analysis hash code scatter storage open addressing chaining pseudochaining collision resolution searching uniform probing
3084 interpolation search log logn search interpolation search method retrieving desired record key ordered file key statistical distribution keys shown average log logn file accesses required retrieve key assuming keys uniformly distributed number extra accesses estimated shown low holds cumulative distribution function keys computational experiments confirm results average number accesses binary search database interpolation search retrieval searching uniform distribution
3085 algorithm determining optimal computation order matrix chain products paper discusses computation matrix chain products form mn mi matrices order matrices computed affects number operations sufficient condition association matrices optimal order presented algorithm find order computation takes percent longer optimal time topt presented cases algorithm yields optimal order order takes percent longer topt percent average approximate algorithm heuristic algorithm matrix multiplication matrix chain product
3086 complexity computing measure ai bi decision tree complexity computing measure union possibly overlapping intervals shown log comparisons linear functions interval endpoints allowed existence log lower bound determine real numbers demonstrated problems provide excellent opportunity discussing effects computational model ease analysis results produced analysis algorithms combinatorial problems computational complexity computational models decision tree programs lower bounds
3087 english language question answering system large relational database typing requests english casual users obtain explicit answers large relational database aircraft flight maintenance data system called planes design implementation system illustrated detailed examples operation system components examples system operation language processing portion system number augmented transition networks matches phrases specific meaning context registers tory keepers concept case frames judging meaningfulness questions generating dialogue clarifying partially understood questions resolving ellipsis pronoun reference problems system components construct formal query relational database optimize order searching relations methods discussed handling vague complex questions providing browsing ability included discussions important issues programming natural language systems limited domains relationship system question answering relational database natural language database front end artificial intelligence dialogue query generation information retrieval natural language programming
3088 general equations idealized cpu overlap configurations general equations derived estimating maximum utilization main storage partitions cpu devices conditions idealized cpu overlap model multiprogrammed computer systems equations directly applicable configuration consisting sets identical cpu processors main storage partitions user tasks examples provided illustrate equations compute effective processing time record expected timesharing response time balanced unbalanced resource utilization conditions blocking buffering input output overlap performance resource allocation throughput timesharing
3089 performance rollback recovery systems intermittent failures mathematical model transaction oriented system intermittent failures proposed system assumed operate checkpointing rollback recovery method ensure reliable information processing model derive principal performance measures including availability response time system saturation point database reliability file systems checkpoints recovery procedures checking techniques reliability system performance evaluation
3090 automated welfare client tracking service integration political economy computing impacts automated client tracking system clients caseworkers administrators operations welfare agencies reported major impact system enhance administrative attractiveness agencies eyes funders increase internal administrative efficiency impact joint product technical features computer based system organizational demands agencies administrators caseworkers illustrates successful automated information systems fit political economies groups social impacts computing organizational impacts computing management information systems sociology computing information systems service integration urban information systems
3091 basic determinants computer programming productivity propose research examine relationship processing characteristics programs experience characteristics programmers program development time ultimate objective develop technique predicting amount time create computer program fifteen program characteristics hypothesized increase programming time required objectively measurable preprogramming specifications programmer characteristics experience related measurable programming task begun program characteristics emerged major influences program development time increased program development time programmer characteristics found related reduced program development time multiple regression equation contained programmer characteristic program characteristics gave evidence good predictive power forecasting program development time programmer performance standards predicting program development time program estimation techniques program development equation programming experience programmer evaluation programmer scheduling programmer productivity programming management cobol programming
3092 characteristics application software maintenance maintenance enhancement application software consume major portion total life cycle cost system rough estimates total systems programming resources consumed range high percent category area attention literature analyze problems area questionnaire developed pretested submitted organizations respondents totaled responses analyzed spss statistical package results analysis maintenance enhancement consume total resources systems programming groups maintenance enhancement tend viewed management important application software development maintenance enhancement problems management orientation tend significant technical orientation user demands enhancements extension constitute important management problem area software maintenance productivity aids management technical issues
3093 automatic error recovery lr parsers paper present scheme detecting recovering syntax errors programs scheme based lr parsing driven information directly automatically obtainable information present lr parser approach patterned levy graham rhodes appears provide error recovery simple powerful programming languages error correction automatic correction parsing lr syntax errors compilers
3094 analyses deterministic parsing algorithms paper describes approach determining minimum maximum average times parse sentences acceptable deterministic parser quantities presented form symbolic formulas called time formulas variables formulas represent length input string time perform elementary operations pushing popping subscripting iterating binding variables actual numerical values compiler machine configuration determine execution time configuration time formulas derived examining grammar rules program representing algorithm wishes analyze approach specific grammar defines simple arithmetic expressions deterministic parsers analyzed top recursive descent parser bottom slr parser paper estimates relative efficiencies parsers estimates applicable specific machine pdp presented substantiated buy benchmarks finally paper illustrates proposed approach applying analyses parsers simple programming language syntactic analysis analysis algorithms top bottom parsing relative efficiencies
3095 selective traversal algorithm binary search trees problem selecting data items binary search tree list range conditions considered process visiting minimal number nodes retrieve data satisfying range conditions called selective traversal presented paper algorithm selective traversal tag field node tree algorithm efficient examination data time consuming examination tag field data retrieval range conditions binary search tree tree traversal selective traversal
3096 optimal method deletion sided height balanced trees sided height balanced tree binary tree node subtree height equal greater height left subtree advantage general avl tree bit balancing information required bits required acl tree shown deletion arbitrary node tree accomplished logn operations number nodes tree method optimal sense complexity reduced order magnitude result coupled earlier results hirschberg basic problems insertion deletion retrieval insertion adversely affected modification avl tree balanced binary search trees
3097 optimal shift strategy block transfer ccd memory purposes paper block transfer ccd memory composed serial shift registers shift rate vary definite minimum shift rate refresh rate definite maximum shift rate bits iin shift registers numbered blocks bits transferred starting bit shift strategy block transfer request occurring random time wait minimal amount time bit reached minimum shift rate requirement simply park bit wait transfer request optimal strategy involves shifting slowly bit passed shifting quickly critical boundary reached shortly bit called hurry wait strategy computer field block transfer ccd memory viewed paging drum variable bounded rotation speed paging drum charge coupled devices shift register memory memory hierarchy electronic drum latency
3098 computer generation gamma random variables method generating random variables gamma distribution nonintegral shape parameter proposed method similar methods recently wallace fishman compared fishman ahrens dieter methods core storage requirements programming effort method similar fishman method proposed method fishman method faster fishman method proposed method simpler ahrens dieter method faster gamma variables rejection method computer methods
3099 sufficient optimality conditions integer programming application purpose report present class sufficient optimality conditions pure mixed integer programming problems sets sufficient conditions presented thought generalizations optimality conditions based primal dual complementarity linear programming sufficient conditions construction difficult integer programming problems optimal solutions problems test benchmark integer programming codes integer programming optimality conditions test problem construction kuhn tucker conditions greatest common divisor
3100 interference matching technique inducing abstractions method inducing knowledge abstraction sequence training examples proposed method interference matching induces abstractions finding relational properties common exemplars tasks solved program interference matching algorithm presented problems description training examples adequacy interference matching discussed directions future research considered rule induction knowledge acquisition partial matching interference graph matching learning induction knowledge representation informal retrieval abstraction generalization language learning complexity predicate discovery
3101 sl procedure mechanism paper describes integrated procedure mechanism permits procedures recursive functions coroutines integration accomplished treating procedures activation records called environments data objects decomposing procedure invocation separate components source language level addition argument binding control programmer permitting definition methods argument transmission source language resulting procedure mechanism part sl programming language suited goal oriented problems problems readily programmed coroutines examples procedures coroutines programming languages interpreters snobol backtracking
3102 incorporation units programming languages issues programming language aid keeping track physical units feet sec discussed method introduction relationships units watt volts amps yard feet subsequent automatic conversion based relationships proposals syntax considered units language design compiler construction language syntax
3103 automatic data structure selection overview levels abstraction proved helpful constructing maintaining programs programs designed abstract data types sets lists programmer time saved automating process filling low level implementation details past programming systems provided single general purpose implementation abstract type programs produced abstract types inefficient space time paper system automatically choosing efficient implementations abstract types library implementations discussed process discussed detail program general issues data structure selection reviewed abstract data types automatic programming data structures optimizing compilers sets lists
3104 test data aid proving program correctness proofs program correctness tend long tedious testing detecting errors guarantee correctness paper introduces techniques test data proving program correctness addition simplifying process proving correctness method simplifies process providing accurate specification program applicability technique procedures recursive programs demonstrated program verification program testing recursive programs
3105 language extension expressing constraints data access controlled sharing information needed desirable applications supported operating systems access control mechanisms paper shows extend programming languages provide controlled sharing extension permits expression access constraints shared data access constraints apply simple objects objects components larger objects bank account records bank data base constraints stated declaratively enforced static checking similar type checking approach extend strongly typed language suitable extending languages support notion abstract data types programming languages access control data types abstract data types type checking capabilities
3106 fast algorithm copying list structures algorithm presented copying arbitrarily linked list structure block contiguous storage locations destroying original list fixed number program variables auxiliary storage stack algorithm mark bits operates linear time shown significantly faster fisher algorithm fastest previous linear time algorithm problem speed efficient list traversal technique folds processing stack structure built classification list cells types enables processing operations optimized type list copying lisp space complexity constant workspace
3107 generating beta variates nonintegrel shape parameters rejection method generating beta variates method compared previously published methods theoretically computer timings suggested method advantages speed programming simplicity previous methods difficult combinations parameter values beta variates random numbers simulation
3108 economical encoding commas strings method insertion delimiters strings symbols presented lengths strings increase extra cost terms prolongation vanishingly small compared lengths strings string transmission delimiters commas encoding integers
3109 data structure manipulating priority queues data structure representing collection priority queues primitive operations insertion deletion union update search item earliest priority data structures implementation set operations priority queues mergeable heaps binary trees
3110 assembling code machines span dependent instructions modern computers instructions lengths depend distance instance instruction operand instruction paper considers problem minimizing lengths programs machines efficient solution presented case operand span dependent instruction label assembly time expression restricted form restriction relaxed allowing operands general assembly time expressions problem shown np complete span dependent instructions variable length addressing code generation assemblers compilers np complete computational complexity
3111 secure communications insecure channels traditional conceptions cryptographic security transmit key secret means encrypted messages securely paper shows select key open communications channels fashion communications security maintained method forces enemy expend amount work increases square work required communicants select key method logically kind protection passive eaves dropper suggests research topic highly rewarding theoretical practical sense security cryptography cryptology communications security wiretap computer network security passive eavesdropping key distribution public key cryptosystem
3112 list processing real time serial computer real time list processing system time required elementary list operations cons car cdr rplaca replacd eq atom lisp bounded small constant classical implementations list processing systems lack property allocating list cell heap garbage collection process requires time proportional heap size finish real time list processing system presented continuously reclaims garbage including directed cycles linearizing compacting accessible cells contiguous locations avoid fragmenting free storage pool program small requires time sharing interrupts making suitable microcode finally system requires average time space classical implementation space requirements reduced approximately classical proportions compact list representation arrays sizes program stack hash linking simple extensions system reference counting found inferior applications real time compacting garbage collection list processing virtual memory file database management storage management storage allocation lisp cdr coding reference counting
3113 optimal conversion extended entry decision tables general cost criteria general dynamic programming algorithm converting limited extended mixed entry decision tables optimal decision trees presented account rule frequencies probabilities minimum time space cost criteria common action sets compressed rules rules sequencing constraints condition tests excludable combinations conditions ambiguities interrupted rule masking decision table optimal programs dynamic programming
3114 technique isolating differences files simple algorithm isolating differences files application comparing versions source program file order display differences algorithm isolates differences corresponds closely intuitive notion difference easy implement computationally efficient time linear file length applications algorithm isolates differences similar isolated longest common subsequence application algorithm merges files independently generated single file algorithm generate efficient encodings file form differences datum file permitting reconstruction original file difference datum files difference isolation word processing text editing program maintenance hash coding file compression bandwidth compression longest common subsequence file comparison molecular evolution
3115 orderly enumeration nonsingular binary matrices applied text encryption nonsingular binary matrices order nonsingular field initial segment natural numbers correspondence natural number corresponds intermediate vectors vectors mapped nonsingular binary matrix examples complete enumeration nonsingular binary matrices produced mapping intermediate vectors matrices mapping application vernam encipherment method pseudorandom number sequences bit string formed form bytes text data encryption key representation natural number natural number transformed nonsingular binary matrix key leverage obtained matrix seed shift register sequence pseudorandom number generator binary matrices combinatorics combinations nonsingular matrices encryption vernam pseudorandom numbers feedback shiftregister sequences random numbers
3116 interference detection solids surfaces industrial environments determine interference components potential interference problems products made assemblies components product manufacturing testing typically drawings attempt detect unwanted interferences dimensional static drafting medium show interferences dimensional moving parts paper presents computer representation solids surfaces algorithms carry interference checking objects represented objects represented polyhedra piecewise planar surfaces types interference checking discussed detection intersections objects fixed positions detection collisions objects moving trajectories interference checking intersection detection collision detection solid representation polyhedral representation graphics polygons surfaces
3117 impact computer technology police past decade significant growth computer technology police departments growth slower rate predicted early computer applications extend routine nonroutine efforts resource allocation computer aided dispatch systems machine begins tool decision making strategic planning person machine interaction results technology date mixed paper reports case studies surveys provinsights implementation impact police computer technology relationship technology law enforcement society computer technology innovation police resource allocation police command control computer aided dispatch law enforcement technology transfer
3118 permutation data blocks bubble memory common internal organization bubble memories consists set minor loops connected major loop problem obtaining give permutation minor loop contents minimum time studied paper lower bound number steps required buy permutation algorithm derived class optimum algorithms identified bubble memory memory loops permutation algorithm data block shift
3119 impact distributions disciplines multiple processor systems simple queueing models study performance tradeoffs multiple processor systems issues considered include impact cpu service disciplines distributions level multiprogramming multitasking job priorities multiprogramming multiprocessing scheduling disciplines performance evaluation queueing models
3120 event driven compiling technique due linear structure source text difficulties arise pass compilation process difficulties occur entity processed forward reference information obtainable subsequent entities classic solutions data structures case technique presented control structures events processes work compiler writer easier conceptually practice forget problems outset avoids special processing problem technique applied construction algol compiler examples implementation discussed compiling technique pass compilation semantic analysis event process parallelism categories
3121 syntactic source source transforms program manipulation syntactic transforms source source program transformations preserve history computation modify execution time combined small number primitive semantic transforms provide powerful tool program manipulation catalogue syntactic transforms solution system program equations examples derivation complex source source transformations presented case studies illustrate syntactic semantic source source transformations development clear simple efficient programs structured programming program transforms control structures
3122 production employment ph computer science computer science production ph employment students
3123 employment characteristics doctoral level computer scientists employment characteristics manpower utilization occupational trends
3124 recursive data structures apl mathematical study approaches defining nested arrays apl presented theorems exhibiting relationships definitional systems illustrated graph representations approaches define apl array recursive data structure equivalent tree structure data stored leaves homogeneous arrays numbers characters extension apl proposed includes primitive functions manipulate nesting level arrays operators assist construction data driven algorithms nested arrays apl arrays recursive data structures trees data driven algorithms theory arrays
3125 global optimization suppression partial redundancies elimination redundant computations moving invariant computations loops separately invariants moved outward loop loop propose move expression directly entrance outermost loop invariant solving general problem elimination computations performed execution path computations termed partially redundant algorithm require graphical information restrictions shape program graph testing algorithm shown execution cost linear size program leads smaller optimizer requires execution time optimizer optimization compiler compilation redundancy elimination invariant computation elimination partial redundancy data flow analysis boolean systems
3126 comments perfect hashing functions single probe retrieving method static sets hashing hashing methods hash coding direct addressing identifier address transformations perfect hashing functions perfect hash coding reduction retrieving scatter storage searching
3127 thoth portable real time operating system thoth isa real time operating system designed portable large set machines running minicomputers architectures system application programs written high level language system implemented software hardware interface user programs application programs thoth highly portable thoth encourages structuring programs networks communicating processes providing efficient interprocess communication primitives portability real time operating systems minicomputer
3128 synchronization eventcounts sequencers synchronization concurrent processes requires controlling relative ordering events processes synchronization mechanism proposed abstract objects called eventcounts sequencers processes control ordering events directly mutual exclusion protect manipulations shared variables control ordering events direct control ordering simplify correctness arguments simplifies implementation distributed systems mechanism defined formally examples relationship mechanism protection mechanisms system explained eventcounts shown applicable situations confinement information matters implementation eventcount sequencers system shared memory process synchronization interprocess communication distributed systems security models mutual exclusion semaphores
3129 optimal storage allocation serial files computer system serial files files reside direct access storage device storage space limited records added files jobs batch processing mode line transactions transaction job generates demand vector designates space required file record addition file runs space system reorganized paper considers criteria allocating storage space files serial files storage allocation reorganization partitioned dataset
3130 curriculum recommendations undergraduate program computer science contained report recommendations undergraduate degree program computer science curriculum committee computer science association computing machinery acm core curriculum common computer science undergraduate programs presented terms elementary level topics courses intermediate level courses elective courses round undergraduate program discussed entire program including computer science component material presented issues related undergraduate computer science education service courses supporting areas continuing education facilities staff articulation presented computer sciences courses computer science curriculum computer science education computer science undergraduate degree programs service courses continuing education
3131 focus microcomputer number system focus number system supporting computational algorithms microcomputer control signal processing applications focus wide ranging character floating point numbers uniformity state distributions give focus twofold accuracy advantage equal word length floating point system focus computations typically times faster single precision fixed point integer arithmetic mixture operations comparable speed hardware arithmetic applications algorithms bit bit implementations focus included number representation logarithmic arithmetic computational speed computational accuracy microcomputer applications
3132 experiments algorithms find central solutions pattern classification class pattern recognition standard technique algorithm finding hyperplanes separates classes linearly separable training set traditional methods find hyperplane separates points hyperplane necessarily centered empty space classes central hyperplane favor class lower error rate classifying points noncentral hyperplane algorithms finding central hyperplanes tested data sets frequently practice modified relaxation algorithm poor algorithms defined paper found good pattern recognition pattern classification linear discriminants central hyperplanes centering centrality criteria dead zone hyperplane linearly separable relaxation algorithm accelerated relaxation
3133 logic semantic networks extended form semantic network defined regarded syntactic variant clausal form logic virtue relationship logic extended semantic network provided precise semantics inference rules procedural interpretation hand semantic networks abstract data structure representation clauses provide theorem prover potentially indexing scheme path strategy guiding search proof logic semantic networks theorem proving indexing resolution deduction logic programming
3134 normal multiplication tables information storage retrieval paper describes method organization retrieval attribute based information systems normal multiplication table directory information system algorithms organization retrieval information method suitable queries requesting group information items possess set attributes possibly attributes examples results respect number disk accesses disk space compared common approaches algorithms evaluating appropriateness approach information system class information systems normal multiplication table method yields rapid retrieval economical space requirement conventional systems method incorporates improved modification inverted file technique information retrieval inverted files multiattribute retrieval multilist file normal multiplication table queries rapid retrieval space economy
3135 detection dimensional patterns atoms chemical structures algorithm detecting occurrences dimensional pattern objects larger structure presented search technique presented geometric structure pattern define characteristics demanded candidates matching cases properties atom considered individually adequately limit number sets matchings applications technique field chemistry pharmacology searching common constellation atoms molecules possessing similar biological activities ray crystallography fitting structure structural fragment set peaks electron density distribution fourier map chemical documentation retrieving file structures substructures dimensional pattern recognition chemical structure search information retrieval crystal structure analysis drug analysis design
3136 price performance patterns computer systems econometric models computer market developed study relationships system price hardware performance single measures price performance grosch law shown simplified meaningless multiple regression models predicting system cost function hardware characteristics reveal market dichotomy hand exists stable price predictable market larger general purpose computer systems market developing small business computer systems market unstable low price predictability price performance grosch law computer market
3137 methodology design distributed information systems macro model distributed information system presented model describes major costs information system perspective end user making evident effect design operating parameters cost transaction technique illustrated application design interactive transaction processing system distributed processing system design cost minimization distributed database interactive computing economic modeling transaction processing
3138 mathematical programming updating method modified givens transformations applied lp problems efficient numerically stable method presented problem updating orthogonal decomposition matrix column row vectors fundamental idea add column row analogous adding additional row data linear squares problem column row dropped formal scaling imaginary unit squares addition column row elimination process procedure successive ssive application givens transformation modified efficient form ideas illustrated implementation revised simplex method algorithm general purpose account structure sparsity equations suggested computational tests determining signs controlling parameters revised simplex algorithm mentioned simple means constructing test cases sample computing times presented linear programming numerical linear algebra modified givens transformations linear programming test cases
3139 methods color vertices graph paper describes efficient heuristic methods color vertices graph rely comparison degrees structure graph method developed exact bipartite graphs important part heuristic procedures find maximal cliques general graphs finally exact method performs randall brown algorithm color larger graphs heuristic methods classical methods exact method compared np complete graph structure balancing graph coloring scheduling comparison methods
3140 social processes proofs theorems programs argued formal verifications programs matter obtained play key role development computer science software engineering proofs mathematics absence continuity inevitability change complexity specification significantly real programs make form al verification process difficult justify manage felt ease formal verification dominate program language design formal mathematics mathematical proofs program verification program specification
3141 improved algorithm decentralized extrema finding circular configurations processes note presents improvement lelann algorithm finding largest smallest set uniquely numbered processes arranged circle central controller exists number processes priori decentralized algorithm technique selective message extinction order achieve average number message passes order log decentralized algorithms distributed systems operating systems
3142 consumer difficulties computerized transactions empirical investigation prevalence errors encountered end targets computerized process assessed type errors occur easily corrected reaction consumers errors failure correct learned designers large management packages data results show present state art approximately percent individuals households average contacts types accounts experience errors year eighty percent relate billing attempts correct errors turned difficult successful appears conflict computer organizations public role poor man agement packages including poor software management systems adequate results survey raise concerns timeliness number designs large linked program packages eft instance errors systems errors billing errors management systems consumers
3143 reasoning arrays variety concepts laws notations presented facilitate reasoning arrays basic concepts include intervals partitions functional restriction images pointwise extension relations ordering single point variation functions equivalence relations array values concatenation effectiveness ideas illustrated informal descriptions algorithms binary search merging short formal proof arrays assertions program proving intervals partitions pointwise extension ordering concatenation binary search merging
3144 model discussion multi interpreter systems multi interpreter system system programs execute virtue interpreted programs interpreted nested interpreters run directly host machine model reveals anatomy interpreters differ procedures exhibits links protection domains multiprocessor architectures interpreters transfer control hierarchies
3145 implementation structured walk throughs teaching cobol programming effectiveness structured walk throughs teaching introductory cobol programming empirically assessed sample graduate business administration majors cobol proficiency measured final examination testing knowledge language rules ability read debug program ability write program analysis multiple covariance statistically adjust test scores age conditional reasoning scores findings provide empirical support incorporating structured walk throughs programming learning process effectively develop student proficiency writing cobol programs structured walk throughs cobol programming teaching programming testing programming proficiency
3146 academic program providing realistic training software engineering academic program harvey mudd college called clinic program brings projects industry campus studied solved student teams objective clinic provide students working small teams careful faculty supervision opportunity work real world problems sufficient magnitude complexity program students acquire essential skills software engineering team work software project management software design methodology communication skills realistic environment sample software projects undertaken clinic experience shown program viable transition academic industrial world software engineering software engineering education software projects student teams software engineering skills
3147 model automating file program design business application systems paper discusses model finding efficient implementation business application system logical specifications determined advance model views file program design problem systematically coordinating configurations datasets computations straight forward search technique determine aggregations computations aggregations datasets device organization key order data set key order computation access method dataset computation pair computational results presented sample problem involving computations datasets main point paper underlying model works computationally simple adapted file design situations system design automatic programming search methods system configurations design choices
3148 high level programming distributed computing programming distributed loosely coupled systems problem growing interest paper describes approach distributed computing level general purpose programming languages based primitive notions module message transaction key methodology shown independent languages machines appears programming wide range tasks part ambitious program development advanced programming languages relations aspects project discussed distributed computing modules messages assertions
3149 cyclic order property vertices aid scene analysis cyclic order property defined bodies bounded smooth curved faces property shown analyzing pictures bodies line data extracted pictures imperfect property augments previously grammatical rules determine existence dimensional bodies dimensional line structure data scene analysis cyclic order artificial intelligence dimensional reconstruction picture processing computer graphics pattern recognition
3150 programming languages computer technology matures growing ability create large systems leading basic nature programming current programming language concepts adequate building maintaining systems complexity called tasks attempt high level languages enabled programmer escape intricacies machine order code higher level programming systems provide means understand manipulate complex systems components order develop systems shift attention detailed specification algorithms description properties packages objects build paper analyzes shortcomings programming languages exist lays directions future research programming programming languages programming systems systems development
3151 optimal real time algorithm planar convex hulls algorithm construction real time convex hull set points plane data structure algorithm constructs convex hull successive updates taking time log achieving total processing time log computational geometry convex hull planar set points real time algorithms line algorithms
3152 storage reorganization techniques matrix computation paging environment order multiply matrices minimizing number page fetches required efficient reorganize data submatrix form block multiplication algorithms leave matrices stored row column oriented form efficient method accomplishing reorganization makes derivation asymptotically bound multiplication matrices row oriented form adapting technique strassen reorganized data reorganization block multiplication scheme shown advantageous matrices pages realistic size strassen adaptation scheme shown advantageous transpose matrices additional cost matrix multiplication paging virtual memory data reorganization pagination transpose
3153 control response times multi class systems memory allocations possibility giving quality service jobs classes regulating memory allocation examined context paged computer system parameterized algorithms partition main memory classes jobs considered initially closed system consisting process paging file devices fixed numbers jobs studied determine optimal degrees multiprogramming proportion processor time devoted class applying decomposition approach treating closed system single server response times open system external arrivals studied object investigate effect memory alocation parameters expected response times algorithms numerical solutions economical lower bounds expected response times functions control parameters obtained applying results systems job classes queueing networks paging virtual memory performance control
3154 algorithm logic control algorithm regarded consisting logic component specifies knowledge solving problems control component determines problem solving strategies means knowledge logic component determines meaning algorithm control component affects efficiency efficiency algorithm improving control component changing logic algorithm argue computer programs correct easily improved modified logic control aspects identified separated program text control language logic programming nonprocedural language programming methodology program specification relational data structures
3155 paradigms programming
3156 computing connected components parallel computers present parallel algorithm processors find connected components undirected graph vertices time log log time bound achieved log processors algorithm find transitive closure symmetric boolean matrix assume processors access common memory simultaneous access location permitted fetch instructions store instructions graph theory parallel processing algorithms transitive closure connected component
3157 proving termination multiset orderings common tool proving termination programs founded set set ordered admit infinite descending sequences basic approach find termination function maps values program variables founded set termination function repeatedly reduced computation termination functions required difficult find complexity proportion program consideration multisets bags founded set sets admit multiple occurrences elements ordering induces ordering finite multisets multiset ordering shown founded multiset ordering enables simple intuitive termination functions difficult termination proofs multiset ordering prove termination production systems programs defined terms sets rewriting rules program correctness program termination program verification founded orderings founded sets multisets bags production systems term rewriting systems tree replacement systems reduction rules
3158 secure personal computing insecure network method implementing secure personal computing network central facilities proposed method employs public key encryption device hardware keys user responsible security rely security central facility communication links user safely store confidential files central facility transmit confidential data users network personal computing security privacy networks public key encryption
3159 remark stably updating standard deviation estimates standard deviation
3160 rejuvenating experimental computer science report based results nsf sponsored workshop held wasington november authors report gordon bell digital equipment corporation bernard galler university michigan patricia goldberg ibm corporation john hamblen university missouri rolla elliot pinson bell telephone laboratories ivan sutherland california institute technology participating workshop representatives nsf government agencies addition authors number people contributed contents report preparation original workshop doctorate granting computer science departments nation asked comments suggestions problems experimental computer science version current report dated january circulated departments number industrial government groups criticism editors authors final version gratefully acknowledge contribution large number people stages preparation report note presentation report position paper crisis experimental computer science written acm executive committee
3161 acm executive committee position crisis experimental computer science
3162 improving worst case running time boyer moore string matching algorithm shown modify boyer moore string matching algorithm worst case running time linear multiple occurrences pattern present text computational complexity linear time worst case string matching periodicity
3163 optimal insertion algorithm sided height balanced binary search trees algorithm inserting element sided height balanced oshb binary search tree presented algorithm operates time log number nodes tree represents improvement previous ly insertion algorithms hirschberg kosaraju require time log log complexity optimal earlier results shown deletion structure performed log time result paper negative answer question trees examples kind deletion smaller time complexity insertion concluded insertion deletion retrieval oshb trees performed time operations general avl trees constant factor insertion deletion algorithms oshb trees complicated algorithms avl trees insertion sided height balanced trees height balanced trees binary trees search trees
3164 progressive acyclic digraphs tool database integrity progressive acyclic digraph pad algorithm accepts requests maintains graph acyclic state request creates cycle nodes detached entered acyclically process important areas database implementation constraints permissible sequences actions pad algorithms presented simple path matrix representation list artificial gradient experiments suggest large considerably faster asymptotically nr number nodes expected number nodes reachable paths node list processing data structures topological sort acyclic digraph database integrity network deadlock
3165 approximation polygonal maps cellular maps approximation polygonal thematic maps cellular maps important operation geographical data processing analyzed data organization representing polygonal maps widely segment based data structure class labels identify regions bordering segment side approximation algorithm presented operates organization eliminating recognition region boundaries segment examined versatility organization illustrated outline algorithms area computation point inclusion algorithm applied set soil maps converted computer readable form means coordinate digitizer polygon maps cellularization gridding geographic data structures computational geometry computer cartography automated cartography
3166 computing standard deviations accuracy algorithms numerical computation standard deviation unweighted sampled data analyzed algorithms statistical computational literature algorithms specifically intended automatic computation discussion expository emphasis reaching suitable definition accuracy algorithms analyzed conditions accurate conclude algorithms provide accurate answers problems algorithms substantially accurate difficult problems standard deviation squares updating estimates rounding error analysis condition number
3167 updating variance estimates improved method method improved efficiency updating variance weighted sampled data additional data included set evidence presented method stable accurate existing updating method standard deviation variance updating estimates removing data
3168 comment optimal evaluation boolean expressions online query system query boolean expression information retrieval file organization
3169 note optimal evaluation boolean expressions online query system query boolean expression optimal evaluation information retrieval
3170 proof correctness calendar program formal specification simple calendar program derivation proof correctness program sketched specification easy understand correctness manifest humans program specification program verification inductive assertions
3171 line numbers made cheap technique run time line number administration implementations high level languages suitable circumstances method requires absolutely overhead time space execution program line number administration diagnostic messages abstract machine code
3172 algorithm planning collision free paths polyhedral obstacles paper describes collision avoidance algorithm planning safe path polyhedral object moving polyhedral objects algorithm transforms obstacles represent locus forbidden positions arbitrary reference point moving object trajectory reference point avoids forbidden regions free collisions trajectories found searching network vertex transformed obstacles vertices reached safely path finding collision free paths polyhedral objects polyhedral obstacles graph searching growing objects
3173 psychology learning basic paper addresses question person learning basic programming underlying conceptual structures identified transaction event occurs computer involves operation object location prestatement set transactions line code chunks frequently occurring configurations prestatements lines code basic learning instruction
3174 password security case history paper describes history design password security scheme remotely accessed time sharing system present design result countering observed attempts penetrate system result compromise extreme security ease operating systems passwords computer security
3175 breaking substitution ciphers relaxation algorithm substitution ciphers codes letter alphabet fixed substitute word divisions change paper problem breaking substitution ciphers represented probabilistic labeling problem code letter assigned probabilities representing plain text letters probabilities updated parallel code letters joint letter probabilities iterating updating scheme results improved estimates finally lead breaking cipher method applies successfully examples cryptography substitution ciphers probabilistic classification relaxation
3176 storing sparse table problem storing searching large sparse tables ubiquitous computer science standard technique storing tables hashing hashing poor worst case performance propose good worst case method storing static table entries integer method requires words storage logn access time method complicated practice analysis shows simpler algorithm compressing lr parsing tables works gaussian elimination parsing searching sparse matrix table compression table lookup
3177 share secret paper show divide data pieces easily reconstructable pieces complete knowledge pieces reveals olutely information technique enables construction robust key management schemes cryptographic systems function securely reliably misfortunes destroy half pieces security breaches expose remaining pieces cryptography key management interpolation
3178 introduction eft symposium
3179 overview eft symposium increasingly recognized large scale technologies eft potential aiding solution current societal problems technologies generate problems symposium presents selected papers conference sought discover eft impacts society research needed future eft research agenda conference results public policy
3180 costs current payments system banking industry public policy makers good information comparative costs alternative payment systems cash checks credit cards eft transactions result eft systems services implemented valid assessment cost justified lst justified terms criteria eft payment system costs payment system volumes
3181 public protection education eft research revealed existence widespread misinformation lack knowledge eft business government consumers result effort stimulate meaningful public participation decisions introduction eft systems require coordinated educational effort considerable scale addition research revealed shortcomings present system defining responsibilities liabilities avenues recourse article presents alternatives improving current system ongoing research needed assure actions responsive changing environment consumer electronic funds transfer systems consumer education security fraud privacy system reliability eft ombudsman
3182 vulnerabilities efts intentionally caused losses hypothesis consumers provided greater accuracy freedom error fraud electronic funds transfer systems efts discussed light technical capabilities potential computer protect accidentally intentionally caused losses nomenclature business crimes remains manual depository financial service systems fraud theft embezzlement characteristics crimes resulting accelerating efts continual technological advances broaden scope security issues examined factors backup requirements regulatory legislative actions economics give rise urgency research solutions emerging efts related vulnerabilities efts computer abuse crime security errors losses positions trust legislation
3183 policy values eft research anatomy research agenda emerging recognition eft systems potential vastly alter payment fund transfer system american society number forces actors involved evolution values vary significantly depending individual institutional perspectives conflicts highlighted part research agenda technological issues eft eft impacts people economic impact eft regulation control eft evaluating monitoring eft systems efts research agenda conflicts impacts people economic impacts regulation control monitoring eft
3184 revised report algorithmic language algol report complete defining description international algorithmic language algol language suitable expressing large class numerical processes form sufficiently concise direct automatic translation language programmed automatic computers
3185 humble programmer programming job provided approach task full appreciation tremendous difficulty provided stick modest elegant programming languages provided respect intrinsic limitations human mind approach task humble programmers
3186 statement considerd harmful statement jump instruction branch instruction conditional clause repetitive clause program intelligibility program sequencing
3187 certification algorithm quickersort quickersort compiled run correction aldep translator cdc comparison average sorting items recently published algorithms demonstrates quickersort superior performance
3188 semiotics programming languages based paper semiotics dimension insert point language aspects pragmatics semantics syntactics cover project aspects semiotic dimension strong tendency today
3189 algebraic compiler fortran assembly program algebraic compiler written added fortran assembly program compiler expand algebraic statements operations addition subtraction multiplication division compile multi level expressions floating point arithmetic easily revised fixed point
3190 correction economies scale ibm system page typical instruction mix id discussed timing computed outlined page undetected programming error times resulting regression equation slightly error
3191 generating permutations nested cycling purpose letter fold give due credit tompkins paige algorithm clarify comment hill cr review programs permutations permutations
3192 lincoln keyboard typewriter keyboard designed computers input flexibility typewriter keyboard direct punched paper tape computer input replace usual commercial keyboard characters chosen convenience programmers lincoln keyboard expected facilitate programming algorithmic process considerable flexibility assembly utility routines
3193 work progress formula coding technique allowing direct entry computer formulae typed character flexo writer flexo writer modified automatic half line advance retract carriage return permit completely general superscripting
3194 heuristic program proving elementary logical theorems paper discusses problems involved designing device capable distinguishing speech events recognized native speakers language parallels problems chemical analysis pointed
3195 reiteration acm policy standardization periodic change officers chairman editors election occasionally results change policy case department radical change proper time reiterate ans underline acm policy respect standardization computer area
3196 reactive typewriter program character keyboard including alphabetical upper lower case good readability machine restricted single case lower case preferred reactive typewriter portable reactive typewriter operate commercially dial type telephone voice telegraph telex line leased nondial telegraph lines interchangeably
3197 structures standards processing organizations computer area line acm policy statement comm acm nov organizational descriptions provided order describe standardization activities pertinent computers information processing
3198 microprogramming emulators programming languages problem concerned converting language action intellectual energy mechanical energy medium purpose language preoccupied subject language areas language investigation concentrated formalizing syntax semantics
3199 algem algebraic manipulator algem package subprograms written slip fortran iv map ii manipulate algebraic expressions algem basic algebraic operations additions subtractions multiplications division exponentiation capable handling number single letter variables variable exponents finding highest common factor polynomials included functions substitution differentiation determining coefficients variables solving linear equation basic routines special purpose arithmetic routines major innovation algem manipulators assignment types expressions standard ordering procedure
3200 formac program solution linear boundary initial problems computer program developed obtaining approximate solutions linear initial boundary problems involving differential equations problem input program includes equations symbolic form satisfied differential equations equations describing auxiliary conditions boundary conditions numerical description regions equations satisfied sets functions symbolic form linear combinations approximate solution functions give input program generates approximation solutions problemm terms functions optimum squares sense
3201 symbolic manipulation poisson series poisson series variables manageable symbolically set formal subroutines written partially ibm machine language called fortran language fortran programs effort made supply operations required celestial mechanics routines contained subroutines require standard fortran input output units design avoid waste overflow core storage space
3202 manip computer system algebra analytic differentiation mathematical expression operated written fortran notation stored computer string bcd characters blanks removed complicated desired parentheses nested restriction long entire expression subsequent form exceed characters problemm performing algebraic operations obtaining analytic derivatives translated identifying manipulating character sequences programs resulted written fortran iv cdc discussed detail
3203 grad assistant program symbolic algebraic manipulation differentiation general recursive algebra differentiation assistant grad assistant development set lisp functions symbolically manipulate abd differentiate algebraic expressions designed problemms large amount routine manipulation program human intervention grad recognize simplifications external guidance complicated expressions notably involving nested radicals trigonometric functions yield completely present version proved
3204 line program numerical algebra goal program make step te design automated mathematical assistant requirements program easy access result obtained short time program written time shared computer computer system development corporation santa monica california chosen lisp compiler programming debugging remote teletype console stanford university
